
LCD_ILI9341_ResistiveTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e1c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08009054  08009054  0000a054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009150  08009150  0000a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009158  08009158  0000a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800915c  0800915c  0000a15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000029  20000000  08009160  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000224  2000002c  08009189  0000b02c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000250  08009189  0000b250  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b029  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cc0f  00000000  00000000  0000b05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034ea  00000000  00000000  00027c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017a8  00000000  00000000  0002b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000127c  00000000  00000000  0002c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000341ba  00000000  00000000  0002db7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e689  00000000  00000000  00061d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014aec6  00000000  00000000  000803bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cb285  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006550  00000000  00000000  001cb2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001d1818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000002c 	.word	0x2000002c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800903c 	.word	0x0800903c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000030 	.word	0x20000030
 8000274:	0800903c 	.word	0x0800903c

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <ILI9341_SPI_Tx>:
static volatile uint8_t spi_dma_tx_completed = 1;

// --- 底层硬件操作函数 ---

// SPI发送单个字节
static void ILI9341_SPI_Tx(uint8_t data) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(ILI9341_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2201      	movs	r2, #1
 8000606:	4803      	ldr	r0, [pc, #12]	@ (8000614 <ILI9341_SPI_Tx+0x20>)
 8000608:	f006 fdac 	bl	8007164 <HAL_SPI_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000058 	.word	0x20000058

08000618 <ILI9341_SPI_Wait_DMA_Completed>:

//// SPI发送多个字节
//static void ILI9341_SPI_TxBuffer(uint8_t* buffer, uint16_t len) {
//    HAL_SPI_Transmit(ILI9341_SPI_HANDLE, buffer, len, HAL_MAX_DELAY);
//}
static void ILI9341_SPI_Wait_DMA_Completed(void) {
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
    while (!spi_dma_tx_completed);
 800061c:	bf00      	nop
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <ILI9341_SPI_Wait_DMA_Completed+0x1c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0fa      	beq.n	800061e <ILI9341_SPI_Wait_DMA_Completed+0x6>
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000000 	.word	0x20000000

08000638 <ILI9341_WriteCommand>:
	// 启动DMA传输
    HAL_SPI_Transmit_DMA(ILI9341_SPI_HANDLE, buffer, len);
}

// 发送命令
static void ILI9341_WriteCommand(uint8_t cmd) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	ILI9341_SPI_Wait_DMA_Completed();
 8000642:	f7ff ffe9 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET); // DC拉低，表示命令
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800064e:	f002 fbb3 	bl	8002db8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET); // CS拉低，选中芯片
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800065a:	f002 fbad 	bl	8002db8 <HAL_GPIO_WritePin>
    ILI9341_SPI_Tx(cmd);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffc7 	bl	80005f4 <ILI9341_SPI_Tx>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);   // CS拉高，取消选中
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800066e:	f002 fba3 	bl	8002db8 <HAL_GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	42020c00 	.word	0x42020c00

08000680 <ILI9341_WriteData>:

// 发送数据
static void ILI9341_WriteData(uint8_t data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	ILI9341_SPI_Wait_DMA_Completed();
 800068a:	f7ff ffc5 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);   // DC拉高，表示数据
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000694:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <ILI9341_WriteData+0x44>)
 8000696:	f002 fb8f 	bl	8002db8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET); // CS拉低，选中芯片
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a0:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <ILI9341_WriteData+0x44>)
 80006a2:	f002 fb89 	bl	8002db8 <HAL_GPIO_WritePin>
    ILI9341_SPI_Tx(data);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa3 	bl	80005f4 <ILI9341_SPI_Tx>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);   // CS拉高，取消选中
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <ILI9341_WriteData+0x44>)
 80006b6:	f002 fb7f 	bl	8002db8 <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	42020c00 	.word	0x42020c00

080006c8 <ILI9341_Reset>:

// 硬件复位
static void ILI9341_Reset(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d2:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <ILI9341_Reset+0x2c>)
 80006d4:	f002 fb70 	bl	8002db8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80006d8:	2014      	movs	r0, #20
 80006da:	f001 f8cb 	bl	8001874 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <ILI9341_Reset+0x2c>)
 80006e6:	f002 fb67 	bl	8002db8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80006ea:	2064      	movs	r0, #100	@ 0x64
 80006ec:	f001 f8c2 	bl	8001874 <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	42021400 	.word	0x42021400

080006f8 <ILI9341_SetAddressWindow>:

// 设置绘图窗口
void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4604      	mov	r4, r0
 8000700:	4608      	mov	r0, r1
 8000702:	4611      	mov	r1, r2
 8000704:	461a      	mov	r2, r3
 8000706:	4623      	mov	r3, r4
 8000708:	80fb      	strh	r3, [r7, #6]
 800070a:	4603      	mov	r3, r0
 800070c:	80bb      	strh	r3, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	807b      	strh	r3, [r7, #2]
 8000712:	4613      	mov	r3, r2
 8000714:	803b      	strh	r3, [r7, #0]
    // Column Address Set
    ILI9341_WriteCommand(0x2A);
 8000716:	202a      	movs	r0, #42	@ 0x2a
 8000718:	f7ff ff8e 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(x0 >> 8);
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffab 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x0 & 0xFF);
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffa6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x1 >> 8);
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b29b      	uxth	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff9f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x1 & 0xFF);
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <ILI9341_WriteData>

    // Page Address Set
    ILI9341_WriteCommand(0x2B);
 800074c:	202b      	movs	r0, #43	@ 0x2b
 800074e:	f7ff ff73 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(y0 >> 8);
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff90 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y0 & 0xFF);
 8000760:	88bb      	ldrh	r3, [r7, #4]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff8b 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y1 >> 8);
 800076a:	883b      	ldrh	r3, [r7, #0]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	b29b      	uxth	r3, r3
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff84 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y1 & 0xFF);
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff7f 	bl	8000680 <ILI9341_WriteData>

    // Memory Write
    ILI9341_WriteCommand(0x2C);
 8000782:	202c      	movs	r0, #44	@ 0x2c
 8000784:	f7ff ff58 	bl	8000638 <ILI9341_WriteCommand>
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bd90      	pop	{r4, r7, pc}

08000790 <ILI9341_Init>:


// --- 高层绘图函数 ---

// 初始化序列
void ILI9341_Init(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 8000794:	f7ff ff98 	bl	80006c8 <ILI9341_Reset>

    ILI9341_WriteCommand(0xCF); // Power control B
 8000798:	20cf      	movs	r0, #207	@ 0xcf
 800079a:	f7ff ff4d 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff6e 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xC1);
 80007a4:	20c1      	movs	r0, #193	@ 0xc1
 80007a6:	f7ff ff6b 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x30);
 80007aa:	2030      	movs	r0, #48	@ 0x30
 80007ac:	f7ff ff68 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xED); // Power on sequence control
 80007b0:	20ed      	movs	r0, #237	@ 0xed
 80007b2:	f7ff ff41 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x64);
 80007b6:	2064      	movs	r0, #100	@ 0x64
 80007b8:	f7ff ff62 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 80007bc:	2003      	movs	r0, #3
 80007be:	f7ff ff5f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x12);
 80007c2:	2012      	movs	r0, #18
 80007c4:	f7ff ff5c 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x81);
 80007c8:	2081      	movs	r0, #129	@ 0x81
 80007ca:	f7ff ff59 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE8); // Driver timing control A
 80007ce:	20e8      	movs	r0, #232	@ 0xe8
 80007d0:	f7ff ff32 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x85);
 80007d4:	2085      	movs	r0, #133	@ 0x85
 80007d6:	f7ff ff53 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff50 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x78);
 80007e0:	2078      	movs	r0, #120	@ 0x78
 80007e2:	f7ff ff4d 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xCB); // Power control A
 80007e6:	20cb      	movs	r0, #203	@ 0xcb
 80007e8:	f7ff ff26 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x39);
 80007ec:	2039      	movs	r0, #57	@ 0x39
 80007ee:	f7ff ff47 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x2C);
 80007f2:	202c      	movs	r0, #44	@ 0x2c
 80007f4:	f7ff ff44 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff ff41 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x34);
 80007fe:	2034      	movs	r0, #52	@ 0x34
 8000800:	f7ff ff3e 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x02);
 8000804:	2002      	movs	r0, #2
 8000806:	f7ff ff3b 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xF7); // Pump ratio control
 800080a:	20f7      	movs	r0, #247	@ 0xf7
 800080c:	f7ff ff14 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x20);
 8000810:	2020      	movs	r0, #32
 8000812:	f7ff ff35 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xEA); // Driver timing control B
 8000816:	20ea      	movs	r0, #234	@ 0xea
 8000818:	f7ff ff0e 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ff2f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff ff2c 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC0); // Power Control 1
 8000828:	20c0      	movs	r0, #192	@ 0xc0
 800082a:	f7ff ff05 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x23);
 800082e:	2023      	movs	r0, #35	@ 0x23
 8000830:	f7ff ff26 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC1); // Power Control 2
 8000834:	20c1      	movs	r0, #193	@ 0xc1
 8000836:	f7ff feff 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x10);
 800083a:	2010      	movs	r0, #16
 800083c:	f7ff ff20 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC5); // VCM control 1
 8000840:	20c5      	movs	r0, #197	@ 0xc5
 8000842:	f7ff fef9 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x3E);
 8000846:	203e      	movs	r0, #62	@ 0x3e
 8000848:	f7ff ff1a 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x28);
 800084c:	2028      	movs	r0, #40	@ 0x28
 800084e:	f7ff ff17 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC7); // VCM control 2
 8000852:	20c7      	movs	r0, #199	@ 0xc7
 8000854:	f7ff fef0 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x86);
 8000858:	2086      	movs	r0, #134	@ 0x86
 800085a:	f7ff ff11 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x36); // Memory Access Control
 800085e:	2036      	movs	r0, #54	@ 0x36
 8000860:	f7ff feea 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x48);
 8000864:	2048      	movs	r0, #72	@ 0x48
 8000866:	f7ff ff0b 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x3A); // Pixel Format Set
 800086a:	203a      	movs	r0, #58	@ 0x3a
 800086c:	f7ff fee4 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x55);    // 16 bits per pixel
 8000870:	2055      	movs	r0, #85	@ 0x55
 8000872:	f7ff ff05 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xB1); // Frame Rate Control
 8000876:	20b1      	movs	r0, #177	@ 0xb1
 8000878:	f7ff fede 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff feff 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x18);
 8000882:	2018      	movs	r0, #24
 8000884:	f7ff fefc 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xB6); // Display Function Control
 8000888:	20b6      	movs	r0, #182	@ 0xb6
 800088a:	f7ff fed5 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x08);
 800088e:	2008      	movs	r0, #8
 8000890:	f7ff fef6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x82);
 8000894:	2082      	movs	r0, #130	@ 0x82
 8000896:	f7ff fef3 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x27);
 800089a:	2027      	movs	r0, #39	@ 0x27
 800089c:	f7ff fef0 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xF2); // 3Gamma Function Disable
 80008a0:	20f2      	movs	r0, #242	@ 0xf2
 80008a2:	f7ff fec9 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff feea 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x26); // Gamma curve selected
 80008ac:	2026      	movs	r0, #38	@ 0x26
 80008ae:	f7ff fec3 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x01);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fee4 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE0); // Set Gamma
 80008b8:	20e0      	movs	r0, #224	@ 0xe0
 80008ba:	f7ff febd 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x0F);
 80008be:	200f      	movs	r0, #15
 80008c0:	f7ff fede 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 80008c4:	2031      	movs	r0, #49	@ 0x31
 80008c6:	f7ff fedb 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x2B);
 80008ca:	202b      	movs	r0, #43	@ 0x2b
 80008cc:	f7ff fed8 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0C);
 80008d0:	200c      	movs	r0, #12
 80008d2:	f7ff fed5 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 80008d6:	200e      	movs	r0, #14
 80008d8:	f7ff fed2 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x08);
 80008dc:	2008      	movs	r0, #8
 80008de:	f7ff fecf 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x4E);
 80008e2:	204e      	movs	r0, #78	@ 0x4e
 80008e4:	f7ff fecc 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xF1);
 80008e8:	20f1      	movs	r0, #241	@ 0xf1
 80008ea:	f7ff fec9 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x37);
 80008ee:	2037      	movs	r0, #55	@ 0x37
 80008f0:	f7ff fec6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x07);
 80008f4:	2007      	movs	r0, #7
 80008f6:	f7ff fec3 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x10);
 80008fa:	2010      	movs	r0, #16
 80008fc:	f7ff fec0 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 8000900:	2003      	movs	r0, #3
 8000902:	f7ff febd 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 8000906:	200e      	movs	r0, #14
 8000908:	f7ff feba 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x09);
 800090c:	2009      	movs	r0, #9
 800090e:	f7ff feb7 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff feb4 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE1); // Set Gamma
 8000918:	20e1      	movs	r0, #225	@ 0xe1
 800091a:	f7ff fe8d 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff feae 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 8000924:	200e      	movs	r0, #14
 8000926:	f7ff feab 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x14);
 800092a:	2014      	movs	r0, #20
 800092c:	f7ff fea8 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 8000930:	2003      	movs	r0, #3
 8000932:	f7ff fea5 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x11);
 8000936:	2011      	movs	r0, #17
 8000938:	f7ff fea2 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x07);
 800093c:	2007      	movs	r0, #7
 800093e:	f7ff fe9f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 8000942:	2031      	movs	r0, #49	@ 0x31
 8000944:	f7ff fe9c 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xC1);
 8000948:	20c1      	movs	r0, #193	@ 0xc1
 800094a:	f7ff fe99 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x48);
 800094e:	2048      	movs	r0, #72	@ 0x48
 8000950:	f7ff fe96 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x08);
 8000954:	2008      	movs	r0, #8
 8000956:	f7ff fe93 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0F);
 800095a:	200f      	movs	r0, #15
 800095c:	f7ff fe90 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0C);
 8000960:	200c      	movs	r0, #12
 8000962:	f7ff fe8d 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 8000966:	2031      	movs	r0, #49	@ 0x31
 8000968:	f7ff fe8a 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x36);
 800096c:	2036      	movs	r0, #54	@ 0x36
 800096e:	f7ff fe87 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0F);
 8000972:	200f      	movs	r0, #15
 8000974:	f7ff fe84 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x11); // Exit Sleep
 8000978:	2011      	movs	r0, #17
 800097a:	f7ff fe5d 	bl	8000638 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800097e:	2078      	movs	r0, #120	@ 0x78
 8000980:	f000 ff78 	bl	8001874 <HAL_Delay>

    ILI9341_WriteCommand(0x29); // Display on
 8000984:	2029      	movs	r0, #41	@ 0x29
 8000986:	f7ff fe57 	bl	8000638 <ILI9341_WriteCommand>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <ILI9341_FillScreen>:
//    }
//
//    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
//}
// ** 优化后的填充屏幕函数 **
void ILI9341_FillScreen(uint16_t color) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af02      	add	r7, sp, #8
 8000994:	4603      	mov	r3, r0
 8000996:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009a0:	22f0      	movs	r2, #240	@ 0xf0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f805 	bl	80009b4 <ILI9341_FillRectangle>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <ILI9341_FillRectangle>:
//    }
//
//    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
//}
// ** 优化后的填充矩形函数 **
void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b0fc      	sub	sp, #496	@ 0x1f0
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4605      	mov	r5, r0
 80009bc:	460c      	mov	r4, r1
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80009c6:	f5a3 73f5 	sub.w	r3, r3, #490	@ 0x1ea
 80009ca:	462a      	mov	r2, r5
 80009cc:	801a      	strh	r2, [r3, #0]
 80009ce:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80009d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80009d6:	4622      	mov	r2, r4
 80009d8:	801a      	strh	r2, [r3, #0]
 80009da:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80009de:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 80009e2:	4602      	mov	r2, r0
 80009e4:	801a      	strh	r2, [r3, #0]
 80009e6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80009ea:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80009ee:	460a      	mov	r2, r1
 80009f0:	801a      	strh	r2, [r3, #0]
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80009f2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80009f6:	f5a3 73f5 	sub.w	r3, r3, #490	@ 0x1ea
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2bef      	cmp	r3, #239	@ 0xef
 80009fe:	f200 80cc 	bhi.w	8000b9a <ILI9341_FillRectangle+0x1e6>
 8000a02:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a10:	f080 80c3 	bcs.w	8000b9a <ILI9341_FillRectangle+0x1e6>
    if ((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000a14:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a18:	f5a3 73f5 	sub.w	r3, r3, #490	@ 0x1ea
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a22:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a2c:	dd0b      	ble.n	8000a46 <ILI9341_FillRectangle+0x92>
 8000a2e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a32:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000a36:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8000a3a:	f5a2 72f5 	sub.w	r2, r2, #490	@ 0x1ea
 8000a3e:	8812      	ldrh	r2, [r2, #0]
 8000a40:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
 8000a44:	801a      	strh	r2, [r3, #0]
    if ((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000a46:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a4a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000a4e:	881a      	ldrh	r2, [r3, #0]
 8000a50:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a54:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a60:	dd0b      	ble.n	8000a7a <ILI9341_FillRectangle+0xc6>
 8000a62:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a66:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000a6a:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8000a6e:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8000a72:	8812      	ldrh	r2, [r2, #0]
 8000a74:	f5c2 72a0 	rsb	r2, r2, #320	@ 0x140
 8000a78:	801a      	strh	r2, [r3, #0]

    ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000a7a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a7e:	f5a3 72f5 	sub.w	r2, r3, #490	@ 0x1ea
 8000a82:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a86:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000a8a:	8812      	ldrh	r2, [r2, #0]
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	3b01      	subs	r3, #1
 8000a94:	b29c      	uxth	r4, r3
 8000a96:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a9a:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8000a9e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000aa2:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000aa6:	8812      	ldrh	r2, [r2, #0]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000ab6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000aba:	8819      	ldrh	r1, [r3, #0]
 8000abc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000ac0:	f5a3 73f5 	sub.w	r3, r3, #490	@ 0x1ea
 8000ac4:	8818      	ldrh	r0, [r3, #0]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	4622      	mov	r2, r4
 8000aca:	f7ff fe15 	bl	80006f8 <ILI9341_SetAddressWindow>

    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad4:	4833      	ldr	r0, [pc, #204]	@ (8000ba4 <ILI9341_FillRectangle+0x1f0>)
 8000ad6:	f002 f96f 	bl	8002db8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae0:	4830      	ldr	r0, [pc, #192]	@ (8000ba4 <ILI9341_FillRectangle+0x1f0>)
 8000ae2:	f002 f969 	bl	8002db8 <HAL_GPIO_WritePin>

    // 使用最大可能的行缓冲区
	uint8_t row_buffer[ILI9341_WIDTH * 2];
	uint16_t row_size_bytes = w * 2;
 8000ae6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000aea:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea

	// 填充缓冲区为指定颜色
	for (uint16_t i = 0; i < row_size_bytes; i += 2) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8000afc:	e01b      	b.n	8000b36 <ILI9341_FillRectangle+0x182>
		row_buffer[i] = color >> 8;
 8000afe:	f8b7 3200 	ldrh.w	r3, [r7, #512]	@ 0x200
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8000b0a:	b2d1      	uxtb	r1, r2
 8000b0c:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8000b10:	f5a2 72f4 	sub.w	r2, r2, #488	@ 0x1e8
 8000b14:	54d1      	strb	r1, [r2, r3]
		row_buffer[i+1] = color & 0xFF;
 8000b16:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	f8b7 2200 	ldrh.w	r2, [r7, #512]	@ 0x200
 8000b20:	b2d1      	uxtb	r1, r2
 8000b22:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8000b26:	f5a2 72f4 	sub.w	r2, r2, #488	@ 0x1e8
 8000b2a:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < row_size_bytes; i += 2) {
 8000b2c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8000b30:	3302      	adds	r3, #2
 8000b32:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8000b36:	f8b7 21ee 	ldrh.w	r2, [r7, #494]	@ 0x1ee
 8000b3a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3dd      	bcc.n	8000afe <ILI9341_FillRectangle+0x14a>
	}

	// 逐行发送，每次发送都等待上一次完成
	for (uint16_t i = 0; i < h; i++) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec
 8000b48:	e015      	b.n	8000b76 <ILI9341_FillRectangle+0x1c2>
		while (!spi_dma_tx_completed); // 等待
 8000b4a:	bf00      	nop
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <ILI9341_FillRectangle+0x1f4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0fa      	beq.n	8000b4c <ILI9341_FillRectangle+0x198>
		spi_dma_tx_completed = 0;      // 清零
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <ILI9341_FillRectangle+0x1f4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(ILI9341_SPI_HANDLE, row_buffer, row_size_bytes); // 启动
 8000b5c:	f8b7 21ea 	ldrh.w	r2, [r7, #490]	@ 0x1ea
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	4619      	mov	r1, r3
 8000b66:	4811      	ldr	r0, [pc, #68]	@ (8000bac <ILI9341_FillRectangle+0x1f8>)
 8000b68:	f006 fd10 	bl	800758c <HAL_SPI_Transmit_DMA>
	for (uint16_t i = 0; i < h; i++) {
 8000b6c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 8000b70:	3301      	adds	r3, #1
 8000b72:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec
 8000b76:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000b7a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000b7e:	f8b7 21ec 	ldrh.w	r2, [r7, #492]	@ 0x1ec
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d3e0      	bcc.n	8000b4a <ILI9341_FillRectangle+0x196>
	}


	// 等待最后一次DMA传输完成
	ILI9341_SPI_Wait_DMA_Completed();
 8000b88:	f7ff fd46 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <ILI9341_FillRectangle+0x1f0>)
 8000b94:	f002 f910 	bl	8002db8 <HAL_GPIO_WritePin>
 8000b98:	e000      	b.n	8000b9c <ILI9341_FillRectangle+0x1e8>
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000b9a:	bf00      	nop
}
 8000b9c:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba4:	42020c00 	.word	0x42020c00
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000058 	.word	0x20000058

08000bb0 <HAL_SPI_TxCpltCallback>:

// --- SPI DMA传输完成回调函数 ---
// 当DMA完成SPI发送后，硬件会自动调用这个函数
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    // 检查是否是我们正在使用的SPI1
    if (hspi->Instance == SPI1) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <HAL_SPI_TxCpltCallback+0x24>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d102      	bne.n	8000bc8 <HAL_SPI_TxCpltCallback+0x18>
        // 设置标志位，表示传输已完成
        spi_dma_tx_completed = 1;
 8000bc2:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_SPI_TxCpltCallback+0x28>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
    }
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40013000 	.word	0x40013000
 8000bd8:	20000000 	.word	0x20000000

08000bdc <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    // 在这里设置第二个断点 (断点2)
    // 如果程序停在这里，就说明DMA出错了！
    __NOP(); // 这是一条空指令，方便设置断点
 8000be4:	bf00      	nop
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfa:	f000 fdeb 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000bfe:	f000 f8a9 	bl	8000d54 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000c02:	f000 f84b 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c06:	f000 f957 	bl	8000eb8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000c0a:	f000 f8b1 	bl	8000d70 <MX_GPDMA1_Init>
  MX_SPI1_Init();
 8000c0e:	f000 f8e3 	bl	8000dd8 <MX_SPI1_Init>
  MX_ICACHE_Init();
 8000c12:	f000 f8cd 	bl	8000db0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  // 初始化TFT显示屏
  ILI9341_Init();
 8000c16:	f7ff fdbb 	bl	8000790 <ILI9341_Init>

  ILI9341_FillScreen(ILI9341_BLACK);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff feb7 	bl	800098e <ILI9341_FillScreen>
  ILI9341_FillRectangle(50, 50, 140, 30, ILI9341_RED);
 8000c20:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	231e      	movs	r3, #30
 8000c28:	228c      	movs	r2, #140	@ 0x8c
 8000c2a:	2132      	movs	r1, #50	@ 0x32
 8000c2c:	2032      	movs	r0, #50	@ 0x32
 8000c2e:	f7ff fec1 	bl	80009b4 <ILI9341_FillRectangle>
  ILI9341_FillRectangle(50, 150, 140, 30, ILI9341_GREEN);
 8000c32:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	231e      	movs	r3, #30
 8000c3a:	228c      	movs	r2, #140	@ 0x8c
 8000c3c:	2196      	movs	r1, #150	@ 0x96
 8000c3e:	2032      	movs	r0, #50	@ 0x32
 8000c40:	f7ff feb8 	bl	80009b4 <ILI9341_FillRectangle>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 fbd7 	bl	80013f8 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 fbd4 	bl	80013f8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000c50:	2002      	movs	r0, #2
 8000c52:	f000 fbd1 	bl	80013f8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c56:	2101      	movs	r1, #1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fc5d 	bl	8001518 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <main+0xa4>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c64:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <main+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <main+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <main+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <main+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c7e:	4906      	ldr	r1, [pc, #24]	@ (8000c98 <main+0xa4>)
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 fce3 	bl	800164c <BSP_COM_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <main+0x9e>
  {
    Error_Handler();
 8000c8c:	f000 f9b0 	bl	8000ff0 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	e7fd      	b.n	8000c92 <main+0x9e>
 8000c96:	bf00      	nop
 8000c98:	20000048 	.word	0x20000048

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09e      	sub	sp, #120	@ 0x78
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2260      	movs	r2, #96	@ 0x60
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f008 f999 	bl	8008fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cc0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000cc4:	f002 f8c0 	bl	8002e48 <HAL_PWREx_ControlVoltageScaling>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000cce:	f000 f98f 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000cea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000d04:	230c      	movs	r3, #12
 8000d06:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 f995 	bl	8003040 <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d1c:	f000 f968 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	231f      	movs	r3, #31
 8000d22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d24:	2303      	movs	r3, #3
 8000d26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 f85b 	bl	8003df8 <HAL_RCC_ClockConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d48:	f000 f952 	bl	8000ff0 <Error_Handler>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3778      	adds	r7, #120	@ 0x78
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d58:	f002 f962 	bl	8003020 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f002 f8ff 	bl	8002f60 <HAL_PWREx_ConfigSupply>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000d68:	f000 f942 	bl	8000ff0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <MX_GPDMA1_Init+0x3c>)
 8000d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <MX_GPDMA1_Init+0x3c>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_GPDMA1_Init+0x3c>)
 8000d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	201d      	movs	r0, #29
 8000d9a:	f000 fe47 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d9e:	201d      	movs	r0, #29
 8000da0:	f000 fe5e 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	46020c00 	.word	0x46020c00

08000db0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000db4:	2000      	movs	r0, #0
 8000db6:	f002 f817 	bl	8002de8 <HAL_ICACHE_ConfigAssociativityMode>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000dc0:	f000 f916 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000dc4:	f002 f830 	bl	8002e28 <HAL_ICACHE_Enable>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000dce:	f000 f90f 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de8:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000dea:	4a32      	ldr	r2, [pc, #200]	@ (8000eb4 <MX_SPI1_Init+0xdc>)
 8000dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dee:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000df0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df6:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000dfe:	2207      	movs	r2, #7
 8000e00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e02:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e08:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e18:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000e1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1e:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e32:	2207      	movs	r2, #7
 8000e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e52:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e76:	480e      	ldr	r0, [pc, #56]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e78:	f006 f85e 	bl	8006f38 <HAL_SPI_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8000e82:	f000 f8b5 	bl	8000ff0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000e8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e8e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_SPI1_Init+0xd8>)
 8000e9a:	f007 f886 	bl	8007faa <HAL_SPIEx_SetConfigAutonomousMode>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000ea4:	f000 f8a4 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000058 	.word	0x20000058
 8000eb4:	40013000 	.word	0x40013000

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ede:	4b38      	ldr	r3, [pc, #224]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef2:	4a33      	ldr	r2, [pc, #204]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000efc:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f1a:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f28:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f2e:	4a24      	ldr	r2, [pc, #144]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f38:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_GPIO_Init+0x108>)
 8000f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f6a:	4816      	ldr	r0, [pc, #88]	@ (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f6c:	f001 ff24 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000f76:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <MX_GPIO_Init+0x110>)
 8000f78:	f001 ff1e 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <MX_GPIO_Init+0x10c>)
 8000f96:	f001 fd2f 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin;
 8000f9a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_GPIO_Init+0x110>)
 8000fb4:	f001 fd20 	bl	80029f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	@ 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	46020c00 	.word	0x46020c00
 8000fc4:	42021400 	.word	0x42021400
 8000fc8:	42020c00 	.word	0x42020c00

08000fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000fde:	f000 fc29 	bl	8001834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40014800 	.word	0x40014800

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_MspInit+0x34>)
 8001004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <HAL_MspInit+0x34>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <HAL_MspInit+0x34>)
 8001014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001020:	2004      	movs	r0, #4
 8001022:	f000 fcf8 	bl	8001a16 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	46020c00 	.word	0x46020c00

08001034 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0ba      	sub	sp, #232	@ 0xe8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	22c0      	movs	r2, #192	@ 0xc0
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f007 ffc4 	bl	8008fe2 <memset>
  if(hspi->Instance==SPI1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a4d      	ldr	r2, [pc, #308]	@ (8001194 <HAL_SPI_MspInit+0x160>)
 8001060:	4293      	cmp	r3, r2
 8001062:	f040 8092 	bne.w	800118a <HAL_SPI_MspInit+0x156>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001066:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001072:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001076:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fac2 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_SPI_MspInit+0x5a>
    {
      Error_Handler();
 800108a:	f7ff ffb1 	bl	8000ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <HAL_SPI_MspInit+0x164>)
 8001090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001094:	4a40      	ldr	r2, [pc, #256]	@ (8001198 <HAL_SPI_MspInit+0x164>)
 8001096:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800109a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800109e:	4b3e      	ldr	r3, [pc, #248]	@ (8001198 <HAL_SPI_MspInit+0x164>)
 80010a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <HAL_SPI_MspInit+0x164>)
 80010ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010b2:	4a39      	ldr	r2, [pc, #228]	@ (8001198 <HAL_SPI_MspInit+0x164>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <HAL_SPI_MspInit+0x164>)
 80010be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010ca:	23e0      	movs	r3, #224	@ 0xe0
 80010cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e2:	2305      	movs	r3, #5
 80010e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ec:	4619      	mov	r1, r3
 80010ee:	482b      	ldr	r0, [pc, #172]	@ (800119c <HAL_SPI_MspInit+0x168>)
 80010f0:	f001 fc82 	bl	80029f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 80010f6:	4a2b      	ldr	r2, [pc, #172]	@ (80011a4 <HAL_SPI_MspInit+0x170>)
 80010f8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001108:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800110c:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001110:	2208      	movs	r2, #8
 8001112:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001120:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001126:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 800112e:	2201      	movs	r2, #1
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001132:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001134:	2201      	movs	r2, #1
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001140:	2200      	movs	r2, #0
 8001142:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001146:	2200      	movs	r2, #0
 8001148:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 800114c:	f000 fcee 	bl	8001b2c <HAL_DMA_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8001156:	f7ff ff4b 	bl	8000ff0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel0);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 800115e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001168:	2110      	movs	r1, #16
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <HAL_SPI_MspInit+0x16c>)
 800116c:	f001 f816 	bl	800219c <HAL_DMA_ConfigChannelAttributes>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 8001176:	f7ff ff3b 	bl	8000ff0 <Error_Handler>
    }

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	203b      	movs	r0, #59	@ 0x3b
 8001180:	f000 fc54 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001184:	203b      	movs	r0, #59	@ 0x3b
 8001186:	f000 fc6b 	bl	8001a60 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800118a:	bf00      	nop
 800118c:	37e8      	adds	r7, #232	@ 0xe8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40013000 	.word	0x40013000
 8001198:	46020c00 	.word	0x46020c00
 800119c:	42020000 	.word	0x42020000
 80011a0:	200000e8 	.word	0x200000e8
 80011a4:	40020050 	.word	0x40020050

080011a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	@ 0x38
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80011b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <HAL_InitTick+0xcc>)
 80011ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80011be:	4a2d      	ldr	r2, [pc, #180]	@ (8001274 <HAL_InitTick+0xcc>)
 80011c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80011c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <HAL_InitTick+0xcc>)
 80011ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80011ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011d6:	f107 0210 	add.w	r2, r7, #16
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 f953 	bl	800448c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011e6:	f003 f929 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 80011ea:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011ee:	4a22      	ldr	r2, [pc, #136]	@ (8001278 <HAL_InitTick+0xd0>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	0c9b      	lsrs	r3, r3, #18
 80011f6:	3b01      	subs	r3, #1
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_InitTick+0xd4>)
 80011fc:	4a20      	ldr	r2, [pc, #128]	@ (8001280 <HAL_InitTick+0xd8>)
 80011fe:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <HAL_InitTick+0xd4>)
 8001202:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001206:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001208:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <HAL_InitTick+0xd4>)
 800120a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_InitTick+0xd4>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_InitTick+0xd4>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800121a:	4818      	ldr	r0, [pc, #96]	@ (800127c <HAL_InitTick+0xd4>)
 800121c:	f006 ff06 	bl	800802c <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001226:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800122e:	4813      	ldr	r0, [pc, #76]	@ (800127c <HAL_InitTick+0xd4>)
 8001230:	f006 ff5e 	bl	80080f0 <HAL_TIM_Base_Start_IT>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800123a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10e      	bne.n	8001260 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d808      	bhi.n	800125a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	2047      	movs	r0, #71	@ 0x47
 800124e:	f000 fbed 	bl	8001a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001252:	4a0c      	ldr	r2, [pc, #48]	@ (8001284 <HAL_InitTick+0xdc>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e002      	b.n	8001260 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001260:	2047      	movs	r0, #71	@ 0x47
 8001262:	f000 fbfd 	bl	8001a60 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001266:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800126a:	4618      	mov	r0, r3
 800126c:	3738      	adds	r7, #56	@ 0x38
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	46020c00 	.word	0x46020c00
 8001278:	431bde83 	.word	0x431bde83
 800127c:	20000160 	.word	0x20000160
 8001280:	40014800 	.word	0x40014800
 8001284:	20000024 	.word	0x20000024

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <NMI_Handler+0x4>

08001290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <MemManage_Handler+0x4>

080012a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <UsageFault_Handler+0x4>

080012b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 f98b 	bl	8001608 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <GPDMA1_Channel0_IRQHandler+0x10>)
 80012fe:	f000 fde0 	bl	8001ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000e8 	.word	0x200000e8

0800130c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <SPI1_IRQHandler+0x10>)
 8001312:	f006 faf7 	bl	8007904 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000058 	.word	0x20000058

08001320 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <TIM17_IRQHandler+0x10>)
 8001326:	f006 ff83 	bl	8008230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000160 	.word	0x20000160

08001334 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <SystemInit+0x68>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133e:	4a17      	ldr	r2, [pc, #92]	@ (800139c <SystemInit+0x68>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <SystemInit+0x6c>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <SystemInit+0x6c>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <SystemInit+0x6c>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <SystemInit+0x6c>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <SystemInit+0x6c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <SystemInit+0x6c>)
 8001366:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800136a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800136e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <SystemInit+0x6c>)
 8001372:	2200      	movs	r2, #0
 8001374:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <SystemInit+0x6c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <SystemInit+0x6c>)
 800137c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001380:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <SystemInit+0x6c>)
 8001384:	2200      	movs	r2, #0
 8001386:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <SystemInit+0x68>)
 800138a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800138e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	46020c00 	.word	0x46020c00

080013a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013a8:	f7ff ffc4 	bl	8001334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ae:	e003      	b.n	80013b8 <LoopCopyDataInit>

080013b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013b6:	3104      	adds	r1, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013b8:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013c0:	d3f6      	bcc.n	80013b0 <CopyDataInit>
	ldr	r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80013c4:	e002      	b.n	80013cc <LoopFillZerobss>

080013c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013c8:	f842 3b04 	str.w	r3, [r2], #4

080013cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <LoopForever+0x16>)
	cmp	r2, r3
 80013ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013d0:	d3f9      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f007 fe0f 	bl	8008ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d6:	f7ff fc0d 	bl	8000bf4 <main>

080013da <LoopForever>:

LoopForever:
    b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013dc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80013e0:	08009160 	.word	0x08009160
	ldr	r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013e8:	20000029 	.word	0x20000029
	ldr	r2, =_sbss
 80013ec:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
 80013f0:	20000250 	.word	0x20000250

080013f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_IRQHandler>
	...

080013f8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001402:	2300      	movs	r3, #0
 8001404:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d009      	beq.n	8001424 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <BSP_LED_Init+0x2c>
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d003      	beq.n	8001424 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800141c:	f06f 0301 	mvn.w	r3, #1
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
 8001422:	e06e      	b.n	8001502 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d10f      	bne.n	800144a <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 800142a:	4b38      	ldr	r3, [pc, #224]	@ (800150c <BSP_LED_Init+0x114>)
 800142c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001430:	4a36      	ldr	r2, [pc, #216]	@ (800150c <BSP_LED_Init+0x114>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800143a:	4b34      	ldr	r3, [pc, #208]	@ (800150c <BSP_LED_Init+0x114>)
 800143c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	e046      	b.n	80014d8 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10f      	bne.n	8001470 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001450:	4b2e      	ldr	r3, [pc, #184]	@ (800150c <BSP_LED_Init+0x114>)
 8001452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001456:	4a2d      	ldr	r2, [pc, #180]	@ (800150c <BSP_LED_Init+0x114>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001460:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <BSP_LED_Init+0x114>)
 8001462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	e033      	b.n	80014d8 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <BSP_LED_Init+0x114>)
 8001472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d110      	bne.n	80014a0 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <BSP_LED_Init+0x114>)
 8001480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001484:	4a21      	ldr	r2, [pc, #132]	@ (800150c <BSP_LED_Init+0x114>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800148e:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <BSP_LED_Init+0x114>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 800149c:	2301      	movs	r3, #1
 800149e:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 80014a0:	f001 fdae 	bl	8003000 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 80014a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <BSP_LED_Init+0x114>)
 80014ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b0:	4a16      	ldr	r2, [pc, #88]	@ (800150c <BSP_LED_Init+0x114>)
 80014b2:	f023 0304 	bic.w	r3, r3, #4
 80014b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <BSP_LED_Init+0x114>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	4a12      	ldr	r2, [pc, #72]	@ (800150c <BSP_LED_Init+0x114>)
 80014c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <BSP_LED_Init+0x114>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <BSP_LED_Init+0x118>)
 80014dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <BSP_LED_Init+0x11c>)
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	f107 021c 	add.w	r2, r7, #28
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fa7b 	bl	80029f8 <HAL_GPIO_Init>
  }

  return ret;
 8001502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001504:	4618      	mov	r0, r3
 8001506:	3738      	adds	r7, #56	@ 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	46020c00 	.word	0x46020c00
 8001510:	080090ac 	.word	0x080090ac
 8001514:	2000000c 	.word	0x2000000c

08001518 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	460a      	mov	r2, r1
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	4613      	mov	r3, r2
 8001526:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001528:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <BSP_PB_Init+0xd4>)
 800152a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152e:	4a2f      	ldr	r2, [pc, #188]	@ (80015ec <BSP_PB_Init+0xd4>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001538:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <BSP_PB_Init+0xd4>)
 800153a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <BSP_PB_Init+0xd8>)
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	f107 020c 	add.w	r2, r7, #12
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f001 fa43 	bl	80029f8 <HAL_GPIO_Init>
 8001572:	e036      	b.n	80015e2 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001574:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <BSP_PB_Init+0xdc>)
 8001576:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <BSP_PB_Init+0xd8>)
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	f107 020c 	add.w	r2, r7, #12
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fa36 	bl	80029f8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800158c:	79fa      	ldrb	r2, [r7, #7]
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4a18      	ldr	r2, [pc, #96]	@ (80015f8 <BSP_PB_Init+0xe0>)
 8001598:	441a      	add	r2, r3
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4917      	ldr	r1, [pc, #92]	@ (80015fc <BSP_PB_Init+0xe4>)
 800159e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f001 f9cb 	bl	8002940 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <BSP_PB_Init+0xe0>)
 80015b6:	1898      	adds	r0, r3, r2
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <BSP_PB_Init+0xe8>)
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	461a      	mov	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	f001 f990 	bl	80028e8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80015c8:	2018      	movs	r0, #24
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <BSP_PB_Init+0xec>)
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	2200      	movs	r2, #0
 80015d4:	4619      	mov	r1, r3
 80015d6:	f000 fa29 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80015da:	2318      	movs	r3, #24
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fa3f 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	46020c00 	.word	0x46020c00
 80015f0:	20000018 	.word	0x20000018
 80015f4:	10110000 	.word	0x10110000
 80015f8:	200001ac 	.word	0x200001ac
 80015fc:	080090b4 	.word	0x080090b4
 8001600:	2000001c 	.word	0x2000001c
 8001604:	20000020 	.word	0x20000020

08001608 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <BSP_PB_IRQHandler+0x28>)
 800161e:	4413      	add	r3, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f001 f9a1 	bl	8002968 <HAL_EXTI_IRQHandler>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001ac 	.word	0x200001ac

08001634 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001662:	f06f 0301 	mvn.w	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e018      	b.n	800169c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2294      	movs	r2, #148	@ 0x94
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <BSP_COM_Init+0x5c>)
 8001674:	4413      	add	r3, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f854 	bl	8001724 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2294      	movs	r2, #148	@ 0x94
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <BSP_COM_Init+0x5c>)
 8001686:	4413      	add	r3, r2
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f80e 	bl	80016ac <MX_USART1_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001696:	f06f 0303 	mvn.w	r3, #3
 800169a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001b8 	.word	0x200001b8

080016ac <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <MX_USART1_Init+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	220c      	movs	r2, #12
 80016ca:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	895b      	ldrh	r3, [r3, #10]
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	891b      	ldrh	r3, [r3, #8]
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	899b      	ldrh	r3, [r3, #12]
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016f8:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f007 f853 	bl	80087ac <HAL_UART_Init>
 8001706:	4603      	mov	r3, r0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000008 	.word	0x20000008

08001714 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff ff8b 	bl	8001634 <BSP_PB_Callback>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800172c:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <COM1_MspInit+0xa8>)
 800172e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001732:	4a26      	ldr	r2, [pc, #152]	@ (80017cc <COM1_MspInit+0xa8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173c:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <COM1_MspInit+0xa8>)
 800173e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <COM1_MspInit+0xa8>)
 800174c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001750:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <COM1_MspInit+0xa8>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <COM1_MspInit+0xa8>)
 800175c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <COM1_MspInit+0xa8>)
 800176a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <COM1_MspInit+0xa8>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <COM1_MspInit+0xa8>)
 800177a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800177e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001794:	2301      	movs	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001798:	2307      	movs	r3, #7
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	480b      	ldr	r0, [pc, #44]	@ (80017d0 <COM1_MspInit+0xac>)
 80017a4:	f001 f928 	bl	80029f8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80017a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80017b2:	2307      	movs	r3, #7
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4804      	ldr	r0, [pc, #16]	@ (80017d0 <COM1_MspInit+0xac>)
 80017be:	f001 f91b 	bl	80029f8 <HAL_GPIO_Init>
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	46020c00 	.word	0x46020c00
 80017d0:	42020000 	.word	0x42020000

080017d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_Init+0x50>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a11      	ldr	r2, [pc, #68]	@ (8001824 <HAL_Init+0x50>)
 80017de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 f916 	bl	8001a16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80017ea:	f002 fcf7 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <HAL_Init+0x54>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	490c      	ldr	r1, [pc, #48]	@ (800182c <HAL_Init+0x58>)
 80017fa:	5ccb      	ldrb	r3, [r1, r3]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_Init+0x5c>)
 8001802:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001804:	2004      	movs	r0, #4
 8001806:	f000 f939 	bl	8001a7c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	2007      	movs	r0, #7
 800180c:	f7ff fccc 	bl	80011a8 <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e002      	b.n	8001820 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800181a:	f7ff fbef 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40022000 	.word	0x40022000
 8001828:	46020c00 	.word	0x46020c00
 800182c:	08009054 	.word	0x08009054
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000028 	.word	0x20000028
 8001858:	2000024c 	.word	0x2000024c

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	2000024c 	.word	0x2000024c

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff ffee 	bl	800185c <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d005      	beq.n	800189a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_Delay+0x44>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189a:	bf00      	nop
 800189c:	f7ff ffde 	bl	800185c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8f7      	bhi.n	800189c <HAL_Delay+0x28>
  {
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000028 	.word	0x20000028

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	@ (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	@ (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	@ (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	@ 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff4c 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3a:	f7ff ff63 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	6978      	ldr	r0, [r7, #20]
 8001a46:	f7ff ffb3 	bl	80019b0 <NVIC_EncodePriority>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff82 	bl	800195c <__NVIC_SetPriority>
}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff56 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d844      	bhi.n	8001b14 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a90:	08001ab3 	.word	0x08001ab3
 8001a94:	08001ad1 	.word	0x08001ad1
 8001a98:	08001af3 	.word	0x08001af3
 8001a9c:	08001b15 	.word	0x08001b15
 8001aa0:	08001aa5 	.word	0x08001aa5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6013      	str	r3, [r2, #0]
      break;
 8001ab0:	e031      	b.n	8001b16 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac4:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ac6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001ace:	e022      	b.n	8001b16 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ad6:	f023 0304 	bic.w	r3, r3, #4
 8001ada:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ae6:	4a10      	ldr	r2, [pc, #64]	@ (8001b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ae8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001af0:	e011      	b.n	8001b16 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001af2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b04:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001b08:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001b12:	e000      	b.n	8001b16 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001b14:	bf00      	nop
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010
 8001b28:	46020c00 	.word	0x46020c00

08001b2c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff fe92 	bl	800185c <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0f0      	b.n	8001d26 <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a79      	ldr	r2, [pc, #484]	@ (8001d30 <HAL_DMA_Init+0x204>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	f000 809f 	beq.w	8001c8e <HAL_DMA_Init+0x162>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a77      	ldr	r2, [pc, #476]	@ (8001d34 <HAL_DMA_Init+0x208>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	f000 8099 	beq.w	8001c8e <HAL_DMA_Init+0x162>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a75      	ldr	r2, [pc, #468]	@ (8001d38 <HAL_DMA_Init+0x20c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	f000 8093 	beq.w	8001c8e <HAL_DMA_Init+0x162>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a73      	ldr	r2, [pc, #460]	@ (8001d3c <HAL_DMA_Init+0x210>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	f000 808d 	beq.w	8001c8e <HAL_DMA_Init+0x162>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a71      	ldr	r2, [pc, #452]	@ (8001d40 <HAL_DMA_Init+0x214>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	f000 8087 	beq.w	8001c8e <HAL_DMA_Init+0x162>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6f      	ldr	r2, [pc, #444]	@ (8001d44 <HAL_DMA_Init+0x218>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	f000 8081 	beq.w	8001c8e <HAL_DMA_Init+0x162>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6d      	ldr	r2, [pc, #436]	@ (8001d48 <HAL_DMA_Init+0x21c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d07b      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6c      	ldr	r2, [pc, #432]	@ (8001d4c <HAL_DMA_Init+0x220>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d076      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d50 <HAL_DMA_Init+0x224>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d071      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a69      	ldr	r2, [pc, #420]	@ (8001d54 <HAL_DMA_Init+0x228>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d06c      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a67      	ldr	r2, [pc, #412]	@ (8001d58 <HAL_DMA_Init+0x22c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d067      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a66      	ldr	r2, [pc, #408]	@ (8001d5c <HAL_DMA_Init+0x230>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d062      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a64      	ldr	r2, [pc, #400]	@ (8001d60 <HAL_DMA_Init+0x234>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d05d      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a63      	ldr	r2, [pc, #396]	@ (8001d64 <HAL_DMA_Init+0x238>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d058      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a61      	ldr	r2, [pc, #388]	@ (8001d68 <HAL_DMA_Init+0x23c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d053      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a60      	ldr	r2, [pc, #384]	@ (8001d6c <HAL_DMA_Init+0x240>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d04e      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8001d70 <HAL_DMA_Init+0x244>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d049      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8001d74 <HAL_DMA_Init+0x248>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d044      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a5b      	ldr	r2, [pc, #364]	@ (8001d78 <HAL_DMA_Init+0x24c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d03f      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a5a      	ldr	r2, [pc, #360]	@ (8001d7c <HAL_DMA_Init+0x250>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d03a      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a58      	ldr	r2, [pc, #352]	@ (8001d80 <HAL_DMA_Init+0x254>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d035      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a57      	ldr	r2, [pc, #348]	@ (8001d84 <HAL_DMA_Init+0x258>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d030      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a55      	ldr	r2, [pc, #340]	@ (8001d88 <HAL_DMA_Init+0x25c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02b      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a54      	ldr	r2, [pc, #336]	@ (8001d8c <HAL_DMA_Init+0x260>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d026      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a52      	ldr	r2, [pc, #328]	@ (8001d90 <HAL_DMA_Init+0x264>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d021      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a51      	ldr	r2, [pc, #324]	@ (8001d94 <HAL_DMA_Init+0x268>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d01c      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	@ (8001d98 <HAL_DMA_Init+0x26c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d017      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a4e      	ldr	r2, [pc, #312]	@ (8001d9c <HAL_DMA_Init+0x270>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d012      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001da0 <HAL_DMA_Init+0x274>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a4b      	ldr	r2, [pc, #300]	@ (8001da4 <HAL_DMA_Init+0x278>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d008      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a49      	ldr	r2, [pc, #292]	@ (8001da8 <HAL_DMA_Init+0x27c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d003      	beq.n	8001c8e <HAL_DMA_Init+0x162>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a48      	ldr	r2, [pc, #288]	@ (8001dac <HAL_DMA_Init+0x280>)
 8001c8c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0206 	orr.w	r2, r2, #6
 8001cd6:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001cd8:	e00f      	b.n	8001cfa <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001cda:	f7ff fdbf 	bl	800185c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d908      	bls.n	8001cfa <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2210      	movs	r2, #16
 8001cec:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e015      	b.n	8001d26 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e8      	bne.n	8001cda <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 faa9 	bl	8002260 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40020050 	.word	0x40020050
 8001d34:	50020050 	.word	0x50020050
 8001d38:	400200d0 	.word	0x400200d0
 8001d3c:	500200d0 	.word	0x500200d0
 8001d40:	40020150 	.word	0x40020150
 8001d44:	50020150 	.word	0x50020150
 8001d48:	400201d0 	.word	0x400201d0
 8001d4c:	500201d0 	.word	0x500201d0
 8001d50:	40020250 	.word	0x40020250
 8001d54:	50020250 	.word	0x50020250
 8001d58:	400202d0 	.word	0x400202d0
 8001d5c:	500202d0 	.word	0x500202d0
 8001d60:	40020350 	.word	0x40020350
 8001d64:	50020350 	.word	0x50020350
 8001d68:	400203d0 	.word	0x400203d0
 8001d6c:	500203d0 	.word	0x500203d0
 8001d70:	40020450 	.word	0x40020450
 8001d74:	50020450 	.word	0x50020450
 8001d78:	400204d0 	.word	0x400204d0
 8001d7c:	500204d0 	.word	0x500204d0
 8001d80:	40020550 	.word	0x40020550
 8001d84:	50020550 	.word	0x50020550
 8001d88:	400205d0 	.word	0x400205d0
 8001d8c:	500205d0 	.word	0x500205d0
 8001d90:	40020650 	.word	0x40020650
 8001d94:	50020650 	.word	0x50020650
 8001d98:	400206d0 	.word	0x400206d0
 8001d9c:	500206d0 	.word	0x500206d0
 8001da0:	40020750 	.word	0x40020750
 8001da4:	50020750 	.word	0x50020750
 8001da8:	400207d0 	.word	0x400207d0
 8001dac:	500207d0 	.word	0x500207d0

08001db0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e04f      	b.n	8001e68 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Start_IT+0x26>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e048      	b.n	8001e68 <HAL_DMA_Start_IT+0xb8>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d136      	bne.n	8001e58 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 fa08 	bl	8002214 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8001e12:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e42:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e007      	b.n	8001e68 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e019      	b.n	8001eb6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d004      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e00e      	b.n	8001eb6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001ed2:	f023 030f 	bic.w	r3, r3, #15
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	3b50      	subs	r3, #80	@ 0x50
 8001ee2:	09db      	lsrs	r3, r3, #7
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2201      	movs	r2, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 813b 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d011      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f26:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d011      	beq.n	8001f66 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f58:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	f043 0202 	orr.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d011      	beq.n	8001f98 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f8a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f043 0204 	orr.w	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d011      	beq.n	8001fca <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fbc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	f043 0208 	orr.w	r2, r3, #8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fee:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d04c      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d045      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002024:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b04      	cmp	r3, #4
 8002030:	d12e      	bne.n	8002090 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002040:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0202 	orr.w	r2, r2, #2
 8002050:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206a:	2201      	movs	r2, #1
 800206c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d07a      	beq.n	800217c <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
        }

        return;
 800208e:	e075      	b.n	800217c <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2205      	movs	r2, #5
 8002094:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d039      	beq.n	800212a <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d032      	beq.n	800212a <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d116      	bne.n	8002108 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d111      	bne.n	8002108 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f0:	2201      	movs	r2, #1
 80020f2:	731a      	strb	r2, [r3, #12]
 80020f4:	e008      	b.n	8002108 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002110:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	2b00      	cmp	r3, #0
 8002130:	d025      	beq.n	800217e <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0202 	orr.w	r2, r2, #2
 8002140:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215a:	2201      	movs	r2, #1
 800215c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
 8002176:	e002      	b.n	800217e <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002178:	bf00      	nop
 800217a:	e000      	b.n	800217e <HAL_DMA_IRQHandler+0x2bc>
        return;
 800217c:	bf00      	nop
    }
  }
}
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e02b      	b.n	8002208 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80021b8:	f023 030f 	bic.w	r3, r3, #15
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c6:	3b50      	subs	r3, #80	@ 0x50
 80021c8:	09db      	lsrs	r3, r3, #7
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	2201      	movs	r2, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f003 0311 	and.w	r3, r3, #17
 80021e6:	2b11      	cmp	r3, #17
 80021e8:	d106      	bne.n	80021f8 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	e006      	b.n	8002206 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	43db      	mvns	r3, r3
 8002200:	401a      	ands	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	041b      	lsls	r3, r3, #16
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	b291      	uxth	r1, r2
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002240:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	430a      	orrs	r2, r1
 8002280:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a53      	ldr	r2, [pc, #332]	@ (80023ec <DMA_Init+0x18c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f000 80a0 	beq.w	80023e6 <DMA_Init+0x186>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a51      	ldr	r2, [pc, #324]	@ (80023f0 <DMA_Init+0x190>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f000 809a 	beq.w	80023e6 <DMA_Init+0x186>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a4f      	ldr	r2, [pc, #316]	@ (80023f4 <DMA_Init+0x194>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	f000 8094 	beq.w	80023e6 <DMA_Init+0x186>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a4d      	ldr	r2, [pc, #308]	@ (80023f8 <DMA_Init+0x198>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f000 808e 	beq.w	80023e6 <DMA_Init+0x186>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a4b      	ldr	r2, [pc, #300]	@ (80023fc <DMA_Init+0x19c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	f000 8088 	beq.w	80023e6 <DMA_Init+0x186>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a49      	ldr	r2, [pc, #292]	@ (8002400 <DMA_Init+0x1a0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	f000 8082 	beq.w	80023e6 <DMA_Init+0x186>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a47      	ldr	r2, [pc, #284]	@ (8002404 <DMA_Init+0x1a4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d07c      	beq.n	80023e6 <DMA_Init+0x186>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a45      	ldr	r2, [pc, #276]	@ (8002408 <DMA_Init+0x1a8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d077      	beq.n	80023e6 <DMA_Init+0x186>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a44      	ldr	r2, [pc, #272]	@ (800240c <DMA_Init+0x1ac>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d072      	beq.n	80023e6 <DMA_Init+0x186>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a42      	ldr	r2, [pc, #264]	@ (8002410 <DMA_Init+0x1b0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d06d      	beq.n	80023e6 <DMA_Init+0x186>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a41      	ldr	r2, [pc, #260]	@ (8002414 <DMA_Init+0x1b4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d068      	beq.n	80023e6 <DMA_Init+0x186>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3f      	ldr	r2, [pc, #252]	@ (8002418 <DMA_Init+0x1b8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d063      	beq.n	80023e6 <DMA_Init+0x186>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a3e      	ldr	r2, [pc, #248]	@ (800241c <DMA_Init+0x1bc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d05e      	beq.n	80023e6 <DMA_Init+0x186>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a3c      	ldr	r2, [pc, #240]	@ (8002420 <DMA_Init+0x1c0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d059      	beq.n	80023e6 <DMA_Init+0x186>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a3b      	ldr	r2, [pc, #236]	@ (8002424 <DMA_Init+0x1c4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d054      	beq.n	80023e6 <DMA_Init+0x186>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a39      	ldr	r2, [pc, #228]	@ (8002428 <DMA_Init+0x1c8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d04f      	beq.n	80023e6 <DMA_Init+0x186>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a38      	ldr	r2, [pc, #224]	@ (800242c <DMA_Init+0x1cc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04a      	beq.n	80023e6 <DMA_Init+0x186>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a36      	ldr	r2, [pc, #216]	@ (8002430 <DMA_Init+0x1d0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d045      	beq.n	80023e6 <DMA_Init+0x186>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a35      	ldr	r2, [pc, #212]	@ (8002434 <DMA_Init+0x1d4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d040      	beq.n	80023e6 <DMA_Init+0x186>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a33      	ldr	r2, [pc, #204]	@ (8002438 <DMA_Init+0x1d8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d03b      	beq.n	80023e6 <DMA_Init+0x186>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a32      	ldr	r2, [pc, #200]	@ (800243c <DMA_Init+0x1dc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d036      	beq.n	80023e6 <DMA_Init+0x186>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a30      	ldr	r2, [pc, #192]	@ (8002440 <DMA_Init+0x1e0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d031      	beq.n	80023e6 <DMA_Init+0x186>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2f      	ldr	r2, [pc, #188]	@ (8002444 <DMA_Init+0x1e4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d02c      	beq.n	80023e6 <DMA_Init+0x186>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a2d      	ldr	r2, [pc, #180]	@ (8002448 <DMA_Init+0x1e8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d027      	beq.n	80023e6 <DMA_Init+0x186>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a2c      	ldr	r2, [pc, #176]	@ (800244c <DMA_Init+0x1ec>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d022      	beq.n	80023e6 <DMA_Init+0x186>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002450 <DMA_Init+0x1f0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01d      	beq.n	80023e6 <DMA_Init+0x186>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a29      	ldr	r2, [pc, #164]	@ (8002454 <DMA_Init+0x1f4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d018      	beq.n	80023e6 <DMA_Init+0x186>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a27      	ldr	r2, [pc, #156]	@ (8002458 <DMA_Init+0x1f8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <DMA_Init+0x186>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a26      	ldr	r2, [pc, #152]	@ (800245c <DMA_Init+0x1fc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00e      	beq.n	80023e6 <DMA_Init+0x186>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a24      	ldr	r2, [pc, #144]	@ (8002460 <DMA_Init+0x200>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d009      	beq.n	80023e6 <DMA_Init+0x186>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a23      	ldr	r2, [pc, #140]	@ (8002464 <DMA_Init+0x204>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <DMA_Init+0x186>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a21      	ldr	r2, [pc, #132]	@ (8002468 <DMA_Init+0x208>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d142      	bne.n	800246c <DMA_Init+0x20c>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e041      	b.n	800246e <DMA_Init+0x20e>
 80023ea:	bf00      	nop
 80023ec:	40020050 	.word	0x40020050
 80023f0:	50020050 	.word	0x50020050
 80023f4:	400200d0 	.word	0x400200d0
 80023f8:	500200d0 	.word	0x500200d0
 80023fc:	40020150 	.word	0x40020150
 8002400:	50020150 	.word	0x50020150
 8002404:	400201d0 	.word	0x400201d0
 8002408:	500201d0 	.word	0x500201d0
 800240c:	40020250 	.word	0x40020250
 8002410:	50020250 	.word	0x50020250
 8002414:	400202d0 	.word	0x400202d0
 8002418:	500202d0 	.word	0x500202d0
 800241c:	40020350 	.word	0x40020350
 8002420:	50020350 	.word	0x50020350
 8002424:	400203d0 	.word	0x400203d0
 8002428:	500203d0 	.word	0x500203d0
 800242c:	40020450 	.word	0x40020450
 8002430:	50020450 	.word	0x50020450
 8002434:	400204d0 	.word	0x400204d0
 8002438:	500204d0 	.word	0x500204d0
 800243c:	40020550 	.word	0x40020550
 8002440:	50020550 	.word	0x50020550
 8002444:	400205d0 	.word	0x400205d0
 8002448:	500205d0 	.word	0x500205d0
 800244c:	40020650 	.word	0x40020650
 8002450:	50020650 	.word	0x50020650
 8002454:	400206d0 	.word	0x400206d0
 8002458:	500206d0 	.word	0x500206d0
 800245c:	40020750 	.word	0x40020750
 8002460:	50020750 	.word	0x50020750
 8002464:	400207d0 	.word	0x400207d0
 8002468:	500207d0 	.word	0x500207d0
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d012      	beq.n	8002498 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	051b      	lsls	r3, r3, #20
 800247e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002482:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	3b01      	subs	r3, #1
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002490:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ca:	f040 80b0 	bne.w	800262e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a82      	ldr	r2, [pc, #520]	@ (80026dc <DMA_Init+0x47c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	f000 80a0 	beq.w	800261a <DMA_Init+0x3ba>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a80      	ldr	r2, [pc, #512]	@ (80026e0 <DMA_Init+0x480>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	f000 809a 	beq.w	800261a <DMA_Init+0x3ba>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7e      	ldr	r2, [pc, #504]	@ (80026e4 <DMA_Init+0x484>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	f000 8094 	beq.w	800261a <DMA_Init+0x3ba>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7c      	ldr	r2, [pc, #496]	@ (80026e8 <DMA_Init+0x488>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	f000 808e 	beq.w	800261a <DMA_Init+0x3ba>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7a      	ldr	r2, [pc, #488]	@ (80026ec <DMA_Init+0x48c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	f000 8088 	beq.w	800261a <DMA_Init+0x3ba>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a78      	ldr	r2, [pc, #480]	@ (80026f0 <DMA_Init+0x490>)
 8002510:	4293      	cmp	r3, r2
 8002512:	f000 8082 	beq.w	800261a <DMA_Init+0x3ba>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a76      	ldr	r2, [pc, #472]	@ (80026f4 <DMA_Init+0x494>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d07c      	beq.n	800261a <DMA_Init+0x3ba>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a74      	ldr	r2, [pc, #464]	@ (80026f8 <DMA_Init+0x498>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d077      	beq.n	800261a <DMA_Init+0x3ba>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a73      	ldr	r2, [pc, #460]	@ (80026fc <DMA_Init+0x49c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d072      	beq.n	800261a <DMA_Init+0x3ba>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a71      	ldr	r2, [pc, #452]	@ (8002700 <DMA_Init+0x4a0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d06d      	beq.n	800261a <DMA_Init+0x3ba>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a70      	ldr	r2, [pc, #448]	@ (8002704 <DMA_Init+0x4a4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d068      	beq.n	800261a <DMA_Init+0x3ba>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6e      	ldr	r2, [pc, #440]	@ (8002708 <DMA_Init+0x4a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d063      	beq.n	800261a <DMA_Init+0x3ba>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6d      	ldr	r2, [pc, #436]	@ (800270c <DMA_Init+0x4ac>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d05e      	beq.n	800261a <DMA_Init+0x3ba>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6b      	ldr	r2, [pc, #428]	@ (8002710 <DMA_Init+0x4b0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d059      	beq.n	800261a <DMA_Init+0x3ba>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6a      	ldr	r2, [pc, #424]	@ (8002714 <DMA_Init+0x4b4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d054      	beq.n	800261a <DMA_Init+0x3ba>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a68      	ldr	r2, [pc, #416]	@ (8002718 <DMA_Init+0x4b8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d04f      	beq.n	800261a <DMA_Init+0x3ba>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a67      	ldr	r2, [pc, #412]	@ (800271c <DMA_Init+0x4bc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d04a      	beq.n	800261a <DMA_Init+0x3ba>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a65      	ldr	r2, [pc, #404]	@ (8002720 <DMA_Init+0x4c0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d045      	beq.n	800261a <DMA_Init+0x3ba>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a64      	ldr	r2, [pc, #400]	@ (8002724 <DMA_Init+0x4c4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d040      	beq.n	800261a <DMA_Init+0x3ba>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a62      	ldr	r2, [pc, #392]	@ (8002728 <DMA_Init+0x4c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d03b      	beq.n	800261a <DMA_Init+0x3ba>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a61      	ldr	r2, [pc, #388]	@ (800272c <DMA_Init+0x4cc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d036      	beq.n	800261a <DMA_Init+0x3ba>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002730 <DMA_Init+0x4d0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d031      	beq.n	800261a <DMA_Init+0x3ba>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002734 <DMA_Init+0x4d4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d02c      	beq.n	800261a <DMA_Init+0x3ba>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002738 <DMA_Init+0x4d8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d027      	beq.n	800261a <DMA_Init+0x3ba>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5b      	ldr	r2, [pc, #364]	@ (800273c <DMA_Init+0x4dc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <DMA_Init+0x3ba>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a59      	ldr	r2, [pc, #356]	@ (8002740 <DMA_Init+0x4e0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01d      	beq.n	800261a <DMA_Init+0x3ba>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a58      	ldr	r2, [pc, #352]	@ (8002744 <DMA_Init+0x4e4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d018      	beq.n	800261a <DMA_Init+0x3ba>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a56      	ldr	r2, [pc, #344]	@ (8002748 <DMA_Init+0x4e8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <DMA_Init+0x3ba>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a55      	ldr	r2, [pc, #340]	@ (800274c <DMA_Init+0x4ec>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00e      	beq.n	800261a <DMA_Init+0x3ba>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a53      	ldr	r2, [pc, #332]	@ (8002750 <DMA_Init+0x4f0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <DMA_Init+0x3ba>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a52      	ldr	r2, [pc, #328]	@ (8002754 <DMA_Init+0x4f4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d004      	beq.n	800261a <DMA_Init+0x3ba>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a50      	ldr	r2, [pc, #320]	@ (8002758 <DMA_Init+0x4f8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <DMA_Init+0x3be>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <DMA_Init+0x3c0>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e008      	b.n	8002640 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002636:	d103      	bne.n	8002640 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002646:	4b45      	ldr	r3, [pc, #276]	@ (800275c <DMA_Init+0x4fc>)
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	68f9      	ldr	r1, [r7, #12]
 8002650:	430b      	orrs	r3, r1
 8002652:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a36      	ldr	r2, [pc, #216]	@ (800273c <DMA_Init+0x4dc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d022      	beq.n	80026ac <DMA_Init+0x44c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a35      	ldr	r2, [pc, #212]	@ (8002740 <DMA_Init+0x4e0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d01d      	beq.n	80026ac <DMA_Init+0x44c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a33      	ldr	r2, [pc, #204]	@ (8002744 <DMA_Init+0x4e4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d018      	beq.n	80026ac <DMA_Init+0x44c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a32      	ldr	r2, [pc, #200]	@ (8002748 <DMA_Init+0x4e8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d013      	beq.n	80026ac <DMA_Init+0x44c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a30      	ldr	r2, [pc, #192]	@ (800274c <DMA_Init+0x4ec>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00e      	beq.n	80026ac <DMA_Init+0x44c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2f      	ldr	r2, [pc, #188]	@ (8002750 <DMA_Init+0x4f0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <DMA_Init+0x44c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2d      	ldr	r2, [pc, #180]	@ (8002754 <DMA_Init+0x4f4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <DMA_Init+0x44c>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002758 <DMA_Init+0x4f8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <DMA_Init+0x450>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <DMA_Init+0x452>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2200      	movs	r2, #0
 80026cc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40020050 	.word	0x40020050
 80026e0:	50020050 	.word	0x50020050
 80026e4:	400200d0 	.word	0x400200d0
 80026e8:	500200d0 	.word	0x500200d0
 80026ec:	40020150 	.word	0x40020150
 80026f0:	50020150 	.word	0x50020150
 80026f4:	400201d0 	.word	0x400201d0
 80026f8:	500201d0 	.word	0x500201d0
 80026fc:	40020250 	.word	0x40020250
 8002700:	50020250 	.word	0x50020250
 8002704:	400202d0 	.word	0x400202d0
 8002708:	500202d0 	.word	0x500202d0
 800270c:	40020350 	.word	0x40020350
 8002710:	50020350 	.word	0x50020350
 8002714:	400203d0 	.word	0x400203d0
 8002718:	500203d0 	.word	0x500203d0
 800271c:	40020450 	.word	0x40020450
 8002720:	50020450 	.word	0x50020450
 8002724:	400204d0 	.word	0x400204d0
 8002728:	500204d0 	.word	0x500204d0
 800272c:	40020550 	.word	0x40020550
 8002730:	50020550 	.word	0x50020550
 8002734:	400205d0 	.word	0x400205d0
 8002738:	500205d0 	.word	0x500205d0
 800273c:	40020650 	.word	0x40020650
 8002740:	50020650 	.word	0x50020650
 8002744:	400206d0 	.word	0x400206d0
 8002748:	500206d0 	.word	0x500206d0
 800274c:	40020750 	.word	0x40020750
 8002750:	50020750 	.word	0x50020750
 8002754:	400207d0 	.word	0x400207d0
 8002758:	500207d0 	.word	0x500207d0
 800275c:	3cc03180 	.word	0x3cc03180

08002760 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_DMAEx_List_Start_IT+0x16>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e082      	b.n	8002880 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002780:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d005      	beq.n	80027a0 <HAL_DMAEx_List_Start_IT+0x40>
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d16a      	bne.n	8002870 <HAL_DMAEx_List_Start_IT+0x110>
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d067      	beq.n	8002870 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d157      	bne.n	800285c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_DMAEx_List_Start_IT+0x5a>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e062      	b.n	8002880 <HAL_DMAEx_List_Start_IT+0x120>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ce:	2202      	movs	r2, #2
 80027d0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80027ee:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002806:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800281e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f107 010c 	add.w	r1, r7, #12
 800282a:	2200      	movs	r2, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f82b 	bl	8002888 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	0c0b      	lsrs	r3, r1, #16
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002850:	4013      	ands	r3, r2
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	430b      	orrs	r3, r1
 800285a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e007      	b.n	8002880 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2240      	movs	r2, #64	@ 0x40
 8002874:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00c      	beq.n	80028ba <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <DMA_List_GetCLLRNodeInfo+0x58>)
 80028aa:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00f      	beq.n	80028d2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80028b8:	e00b      	b.n	80028d2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4a08      	ldr	r2, [pc, #32]	@ (80028e4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80028c4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2205      	movs	r2, #5
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	fe010000 	.word	0xfe010000
 80028e4:	f8010000 	.word	0xf8010000

080028e8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	460b      	mov	r3, r1
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d011      	beq.n	8002924 <HAL_EXTI_RegisterCallback+0x3c>
 8002900:	2b02      	cmp	r3, #2
 8002902:	dc13      	bgt.n	800292c <HAL_EXTI_RegisterCallback+0x44>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_EXTI_RegisterCallback+0x26>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d007      	beq.n	800291c <HAL_EXTI_RegisterCallback+0x34>
 800290c:	e00e      	b.n	800292c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]
      break;
 800291a:	e00a      	b.n	8002932 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	605a      	str	r2, [r3, #4]
      break;
 8002922:	e006      	b.n	8002932 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	609a      	str	r2, [r3, #8]
      break;
 800292a:	e002      	b.n	8002932 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	75fb      	strb	r3, [r7, #23]
      break;
 8002930:	bf00      	nop
  }

  return status;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e003      	b.n	800295c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
  }
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2201      	movs	r2, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_EXTI_IRQHandler+0x88>)
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <HAL_EXTI_IRQHandler+0x8c>)
 80029c0:	4413      	add	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4798      	blx	r3
    }
  }
}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	4602200c 	.word	0x4602200c
 80029f4:	46022010 	.word	0x46022010

080029f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a0a:	e1c2      	b.n	8002d92 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 81b2 	beq.w	8002d8c <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a55      	ldr	r2, [pc, #340]	@ (8002b80 <HAL_GPIO_Init+0x188>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d15d      	bne.n	8002aec <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002a36:	2201      	movs	r2, #1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0201 	and.w	r2, r3, #1
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002a60:	4a48      	ldr	r2, [pc, #288]	@ (8002b84 <HAL_GPIO_Init+0x18c>)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a68:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002a6a:	4a46      	ldr	r2, [pc, #280]	@ (8002b84 <HAL_GPIO_Init+0x18c>)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a82:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220b      	movs	r2, #11
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	08da      	lsrs	r2, r3, #3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	3208      	adds	r2, #8
 8002ab6:	69f9      	ldr	r1, [r7, #28]
 8002ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2202      	movs	r2, #2
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e067      	b.n	8002bbc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x104>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d145      	bne.n	8002b88 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	08da      	lsrs	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3208      	adds	r2, #8
 8002b42:	69f9      	ldr	r1, [r7, #28]
 8002b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0203 	and.w	r2, r3, #3
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e01e      	b.n	8002bbc <HAL_GPIO_Init+0x1c4>
 8002b7e:	bf00      	nop
 8002b80:	46020000 	.word	0x46020000
 8002b84:	080090b8 	.word	0x080090b8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d00b      	beq.n	8002bdc <HAL_GPIO_Init+0x1e4>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d007      	beq.n	8002bdc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd0:	2b11      	cmp	r3, #17
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b12      	cmp	r3, #18
 8002bda:	d130      	bne.n	8002c3e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002c12:	2201      	movs	r2, #1
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 0201 	and.w	r2, r3, #1
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d107      	bne.n	8002c56 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d11b      	bne.n	8002c86 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d017      	beq.n	8002c86 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d07c      	beq.n	8002d8c <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002c92:	4a47      	ldr	r2, [pc, #284]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3318      	adds	r3, #24
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0a9a      	lsrs	r2, r3, #10
 8002cba:	4b3e      	ldr	r3, [pc, #248]	@ (8002db4 <HAL_GPIO_Init+0x3bc>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	f002 0203 	and.w	r2, r2, #3
 8002cc4:	00d2      	lsls	r2, r2, #3
 8002cc6:	4093      	lsls	r3, r2
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002cce:	4938      	ldr	r1, [pc, #224]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3318      	adds	r3, #24
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002cdc:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002d00:	4a2b      	ldr	r2, [pc, #172]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002d06:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002d2a:	4a21      	ldr	r2, [pc, #132]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002d30:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d36:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002d56:	4a16      	ldr	r2, [pc, #88]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d64:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002d84:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <HAL_GPIO_Init+0x3b8>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f ae35 	bne.w	8002a0c <HAL_GPIO_Init+0x14>
  }
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	3724      	adds	r7, #36	@ 0x24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	46022000 	.word	0x46022000
 8002db4:	002f7f7f 	.word	0x002f7f7f

08002db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e007      	b.n	8002e16 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002e06:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0204 	bic.w	r2, r3, #4
 8002e0e:	4905      	ldr	r1, [pc, #20]	@ (8002e24 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40030400 	.word	0x40030400

08002e28 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <HAL_ICACHE_Enable+0x1c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a04      	ldr	r2, [pc, #16]	@ (8002e44 <HAL_ICACHE_Enable+0x1c>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40030400 	.word	0x40030400

08002e48 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002e50:	4b39      	ldr	r3, [pc, #228]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e58:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10b      	bne.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e68:	d905      	bls.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002e6a:	4b33      	ldr	r3, [pc, #204]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	4a32      	ldr	r2, [pc, #200]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e74:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e057      	b.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e80:	d90a      	bls.n	8002e98 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002e82:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	60d3      	str	r3, [r2, #12]
 8002e96:	e007      	b.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002e98:	4b27      	ldr	r3, [pc, #156]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002ea0:	4925      	ldr	r1, [pc, #148]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002ea8:	4b24      	ldr	r3, [pc, #144]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a24      	ldr	r2, [pc, #144]	@ (8002f40 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	2232      	movs	r2, #50	@ 0x32
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	4a21      	ldr	r2, [pc, #132]	@ (8002f40 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002ec6:	e002      	b.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f3      	bne.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01b      	beq.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a15      	ldr	r2, [pc, #84]	@ (8002f40 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	099b      	lsrs	r3, r3, #6
 8002ef2:	2232      	movs	r2, #50	@ 0x32
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	4a11      	ldr	r2, [pc, #68]	@ (8002f40 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	3301      	adds	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002f04:	e002      	b.n	8002f0c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f3      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e000      	b.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	46020800 	.word	0x46020800
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	10624dd3 	.word	0x10624dd3

08002f44 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	46020800 	.word	0x46020800

08002f60 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002f68:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <HAL_PWREx_ConfigSupply+0x94>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a22      	ldr	r2, [pc, #136]	@ (8002ff8 <HAL_PWREx_ConfigSupply+0x98>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2232      	movs	r2, #50	@ 0x32
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_PWREx_ConfigSupply+0x98>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	3301      	adds	r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d113      	bne.n	8002fb4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_PWREx_ConfigSupply+0x9c>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a1a      	ldr	r2, [pc, #104]	@ (8002ffc <HAL_PWREx_ConfigSupply+0x9c>)
 8002f92:	f023 0302 	bic.w	r3, r3, #2
 8002f96:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002f98:	e002      	b.n	8002fa0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002fa0:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <HAL_PWREx_ConfigSupply+0x9c>)
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d116      	bne.n	8002fda <HAL_PWREx_ConfigSupply+0x7a>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f3      	bne.n	8002f9a <HAL_PWREx_ConfigSupply+0x3a>
 8002fb2:	e012      	b.n	8002fda <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002fb4:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <HAL_PWREx_ConfigSupply+0x9c>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a10      	ldr	r2, [pc, #64]	@ (8002ffc <HAL_PWREx_ConfigSupply+0x9c>)
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002fc0:	e002      	b.n	8002fc8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <HAL_PWREx_ConfigSupply+0x9c>)
 8002fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_PWREx_ConfigSupply+0x7a>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f3      	bne.n	8002fc2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	10624dd3 	.word	0x10624dd3
 8002ffc:	46020800 	.word	0x46020800

08003000 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4a04      	ldr	r2, [pc, #16]	@ (800301c <HAL_PWREx_EnableVddIO2+0x1c>)
 800300a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800300e:	6113      	str	r3, [r2, #16]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	46020800 	.word	0x46020800

08003020 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	46020800 	.word	0x46020800

08003040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08e      	sub	sp, #56	@ 0x38
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f000 bec8 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305a:	4b99      	ldr	r3, [pc, #612]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003064:	4b96      	ldr	r3, [pc, #600]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 816c 	beq.w	8003354 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_RCC_OscConfig+0x52>
 8003082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003084:	2b0c      	cmp	r3, #12
 8003086:	f040 80de 	bne.w	8003246 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 80da 	bne.w	8003246 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f000 bea5 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030a4:	4b86      	ldr	r3, [pc, #536]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <HAL_RCC_OscConfig+0x7a>
 80030b0:	4b83      	ldr	r3, [pc, #524]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80030b8:	e005      	b.n	80030c6 <HAL_RCC_OscConfig+0x86>
 80030ba:	4b81      	ldr	r3, [pc, #516]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d255      	bcs.n	8003176 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f001 fa11 	bl	80044fc <RCC_SetFlashLatencyFromMSIRange>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f000 be82 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80030e6:	4b76      	ldr	r3, [pc, #472]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	4a75      	ldr	r2, [pc, #468]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030f0:	6093      	str	r3, [r2, #8]
 80030f2:	4b73      	ldr	r3, [pc, #460]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	4970      	ldr	r1, [pc, #448]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800310c:	d309      	bcc.n	8003122 <HAL_RCC_OscConfig+0xe2>
 800310e:	4b6c      	ldr	r3, [pc, #432]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 021f 	bic.w	r2, r3, #31
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4969      	ldr	r1, [pc, #420]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 800311c:	4313      	orrs	r3, r2
 800311e:	60cb      	str	r3, [r1, #12]
 8003120:	e07e      	b.n	8003220 <HAL_RCC_OscConfig+0x1e0>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	2b00      	cmp	r3, #0
 8003128:	da0a      	bge.n	8003140 <HAL_RCC_OscConfig+0x100>
 800312a:	4b65      	ldr	r3, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	015b      	lsls	r3, r3, #5
 8003138:	4961      	ldr	r1, [pc, #388]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 800313a:	4313      	orrs	r3, r2
 800313c:	60cb      	str	r3, [r1, #12]
 800313e:	e06f      	b.n	8003220 <HAL_RCC_OscConfig+0x1e0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003148:	d30a      	bcc.n	8003160 <HAL_RCC_OscConfig+0x120>
 800314a:	4b5d      	ldr	r3, [pc, #372]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	029b      	lsls	r3, r3, #10
 8003158:	4959      	ldr	r1, [pc, #356]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 800315a:	4313      	orrs	r3, r2
 800315c:	60cb      	str	r3, [r1, #12]
 800315e:	e05f      	b.n	8003220 <HAL_RCC_OscConfig+0x1e0>
 8003160:	4b57      	ldr	r3, [pc, #348]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	03db      	lsls	r3, r3, #15
 800316e:	4954      	ldr	r1, [pc, #336]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003170:	4313      	orrs	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]
 8003174:	e054      	b.n	8003220 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003176:	4b52      	ldr	r3, [pc, #328]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	4a51      	ldr	r2, [pc, #324]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 800317c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003180:	6093      	str	r3, [r2, #8]
 8003182:	4b4f      	ldr	r3, [pc, #316]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	494c      	ldr	r1, [pc, #304]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800319c:	d309      	bcc.n	80031b2 <HAL_RCC_OscConfig+0x172>
 800319e:	4b48      	ldr	r3, [pc, #288]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f023 021f 	bic.w	r2, r3, #31
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4945      	ldr	r1, [pc, #276]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60cb      	str	r3, [r1, #12]
 80031b0:	e028      	b.n	8003204 <HAL_RCC_OscConfig+0x1c4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	da0a      	bge.n	80031d0 <HAL_RCC_OscConfig+0x190>
 80031ba:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	015b      	lsls	r3, r3, #5
 80031c8:	493d      	ldr	r1, [pc, #244]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60cb      	str	r3, [r1, #12]
 80031ce:	e019      	b.n	8003204 <HAL_RCC_OscConfig+0x1c4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d8:	d30a      	bcc.n	80031f0 <HAL_RCC_OscConfig+0x1b0>
 80031da:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	029b      	lsls	r3, r3, #10
 80031e8:	4935      	ldr	r1, [pc, #212]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60cb      	str	r3, [r1, #12]
 80031ee:	e009      	b.n	8003204 <HAL_RCC_OscConfig+0x1c4>
 80031f0:	4b33      	ldr	r3, [pc, #204]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	03db      	lsls	r3, r3, #15
 80031fe:	4930      	ldr	r1, [pc, #192]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003200:	4313      	orrs	r3, r2
 8003202:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	4618      	mov	r0, r3
 8003210:	f001 f974 	bl	80044fc <RCC_SetFlashLatencyFromMSIRange>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f000 bde5 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003220:	f001 f8de 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003224:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <HAL_RCC_OscConfig+0x284>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd ffbd 	bl	80011a8 <HAL_InitTick>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 808a 	beq.w	8003352 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800323e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003242:	f000 bdd2 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d066      	beq.n	800331c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800324e:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1b      	ldr	r2, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800325a:	f7fe faff 	bl	800185c <HAL_GetTick>
 800325e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003260:	e009      	b.n	8003276 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003262:	f7fe fafb 	bl	800185c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d902      	bls.n	8003276 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	f000 bdba 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003276:	4b12      	ldr	r3, [pc, #72]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ef      	beq.n	8003262 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003282:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4a0e      	ldr	r2, [pc, #56]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003288:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800328c:	6093      	str	r3, [r2, #8]
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	4909      	ldr	r1, [pc, #36]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80032a8:	d30e      	bcc.n	80032c8 <HAL_RCC_OscConfig+0x288>
 80032aa:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f023 021f 	bic.w	r2, r3, #31
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4902      	ldr	r1, [pc, #8]	@ (80032c0 <HAL_RCC_OscConfig+0x280>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60cb      	str	r3, [r1, #12]
 80032bc:	e04a      	b.n	8003354 <HAL_RCC_OscConfig+0x314>
 80032be:	bf00      	nop
 80032c0:	46020c00 	.word	0x46020c00
 80032c4:	20000024 	.word	0x20000024
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	da0a      	bge.n	80032e6 <HAL_RCC_OscConfig+0x2a6>
 80032d0:	4b98      	ldr	r3, [pc, #608]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	015b      	lsls	r3, r3, #5
 80032de:	4995      	ldr	r1, [pc, #596]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
 80032e4:	e036      	b.n	8003354 <HAL_RCC_OscConfig+0x314>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ee:	d30a      	bcc.n	8003306 <HAL_RCC_OscConfig+0x2c6>
 80032f0:	4b90      	ldr	r3, [pc, #576]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	029b      	lsls	r3, r3, #10
 80032fe:	498d      	ldr	r1, [pc, #564]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	60cb      	str	r3, [r1, #12]
 8003304:	e026      	b.n	8003354 <HAL_RCC_OscConfig+0x314>
 8003306:	4b8b      	ldr	r3, [pc, #556]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	03db      	lsls	r3, r3, #15
 8003314:	4987      	ldr	r1, [pc, #540]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60cb      	str	r3, [r1, #12]
 800331a:	e01b      	b.n	8003354 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800331c:	4b85      	ldr	r3, [pc, #532]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a84      	ldr	r2, [pc, #528]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003328:	f7fe fa98 	bl	800185c <HAL_GetTick>
 800332c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800332e:	e009      	b.n	8003344 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003330:	f7fe fa94 	bl	800185c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d902      	bls.n	8003344 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	f000 bd53 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003344:	4b7b      	ldr	r3, [pc, #492]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1ef      	bne.n	8003330 <HAL_RCC_OscConfig+0x2f0>
 8003350:	e000      	b.n	8003354 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003352:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 808b 	beq.w	8003478 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003364:	2b08      	cmp	r3, #8
 8003366:	d005      	beq.n	8003374 <HAL_RCC_OscConfig+0x334>
 8003368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d109      	bne.n	8003382 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003370:	2b03      	cmp	r3, #3
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d17d      	bne.n	8003478 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f000 bd34 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x35a>
 800338c:	4b69      	ldr	r3, [pc, #420]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a68      	ldr	r2, [pc, #416]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	e041      	b.n	800341e <HAL_RCC_OscConfig+0x3de>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a2:	d112      	bne.n	80033ca <HAL_RCC_OscConfig+0x38a>
 80033a4:	4b63      	ldr	r3, [pc, #396]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a62      	ldr	r2, [pc, #392]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b60      	ldr	r3, [pc, #384]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b5d      	ldr	r3, [pc, #372]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e029      	b.n	800341e <HAL_RCC_OscConfig+0x3de>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80033d2:	d112      	bne.n	80033fa <HAL_RCC_OscConfig+0x3ba>
 80033d4:	4b57      	ldr	r3, [pc, #348]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a56      	ldr	r2, [pc, #344]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b54      	ldr	r3, [pc, #336]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a53      	ldr	r2, [pc, #332]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b51      	ldr	r3, [pc, #324]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a50      	ldr	r2, [pc, #320]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	e011      	b.n	800341e <HAL_RCC_OscConfig+0x3de>
 80033fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b4b      	ldr	r3, [pc, #300]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a4a      	ldr	r2, [pc, #296]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 800340c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b48      	ldr	r3, [pc, #288]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a47      	ldr	r2, [pc, #284]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003418:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800341c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d014      	beq.n	8003450 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003426:	f7fe fa19 	bl	800185c <HAL_GetTick>
 800342a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342c:	e009      	b.n	8003442 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342e:	f7fe fa15 	bl	800185c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	@ 0x64
 800343a:	d902      	bls.n	8003442 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	f000 bcd4 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003442:	4b3c      	ldr	r3, [pc, #240]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0ef      	beq.n	800342e <HAL_RCC_OscConfig+0x3ee>
 800344e:	e013      	b.n	8003478 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003450:	f7fe fa04 	bl	800185c <HAL_GetTick>
 8003454:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003456:	e009      	b.n	800346c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fa00 	bl	800185c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	@ 0x64
 8003464:	d902      	bls.n	800346c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	f000 bcbf 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800346c:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ef      	bne.n	8003458 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05f      	beq.n	8003544 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003486:	2b04      	cmp	r3, #4
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x456>
 800348a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d114      	bne.n	80034ba <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003492:	2b02      	cmp	r3, #2
 8003494:	d111      	bne.n	80034ba <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f000 bca3 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	4920      	ldr	r1, [pc, #128]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034b8:	e044      	b.n	8003544 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d024      	beq.n	800350c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80034c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80034ce:	f7fe f9c5 	bl	800185c <HAL_GetTick>
 80034d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d4:	e009      	b.n	80034ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fe f9c1 	bl	800185c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d902      	bls.n	80034ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	f000 bc80 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80034f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	490b      	ldr	r1, [pc, #44]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	610b      	str	r3, [r1, #16]
 800350a:	e01b      	b.n	8003544 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800350c:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a08      	ldr	r2, [pc, #32]	@ (8003534 <HAL_RCC_OscConfig+0x4f4>)
 8003512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003516:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003518:	f7fe f9a0 	bl	800185c <HAL_GetTick>
 800351c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003520:	f7fe f99c 	bl	800185c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d904      	bls.n	8003538 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	f000 bc5b 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
 8003534:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003538:	4baf      	ldr	r3, [pc, #700]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ed      	bne.n	8003520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80c8 	beq.w	80036e2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003558:	4ba7      	ldr	r3, [pc, #668]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d111      	bne.n	800358a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	4ba4      	ldr	r3, [pc, #656]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356c:	4aa2      	ldr	r2, [pc, #648]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003576:	4ba0      	ldr	r3, [pc, #640]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800358a:	4b9c      	ldr	r3, [pc, #624]	@ (80037fc <HAL_RCC_OscConfig+0x7bc>)
 800358c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d119      	bne.n	80035ca <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003596:	4b99      	ldr	r3, [pc, #612]	@ (80037fc <HAL_RCC_OscConfig+0x7bc>)
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	4a98      	ldr	r2, [pc, #608]	@ (80037fc <HAL_RCC_OscConfig+0x7bc>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a2:	f7fe f95b 	bl	800185c <HAL_GetTick>
 80035a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035a8:	e009      	b.n	80035be <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035aa:	f7fe f957 	bl	800185c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d902      	bls.n	80035be <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	f000 bc16 	b.w	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035be:	4b8f      	ldr	r3, [pc, #572]	@ (80037fc <HAL_RCC_OscConfig+0x7bc>)
 80035c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ef      	beq.n	80035aa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d05f      	beq.n	8003692 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80035d2:	4b89      	ldr	r3, [pc, #548]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80035d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035d8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d037      	beq.n	8003658 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e3f4      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01b      	beq.n	8003642 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800360a:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 800360c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003610:	4a79      	ldr	r2, [pc, #484]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003612:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800361a:	f7fe f91f 	bl	800185c <HAL_GetTick>
 800361e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe f91b 	bl	800185c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b05      	cmp	r3, #5
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e3da      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003634:	4b70      	ldr	r3, [pc, #448]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800363a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003642:	4b6d      	ldr	r3, [pc, #436]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003648:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	4969      	ldr	r1, [pc, #420]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003658:	4b67      	ldr	r3, [pc, #412]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 800365a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800365e:	4a66      	ldr	r2, [pc, #408]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003664:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003668:	f7fe f8f8 	bl	800185c <HAL_GetTick>
 800366c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7fe f8f4 	bl	800185c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b05      	cmp	r3, #5
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e3b3      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003682:	4b5d      	ldr	r3, [pc, #372]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <HAL_RCC_OscConfig+0x630>
 8003690:	e01b      	b.n	80036ca <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003692:	4b59      	ldr	r3, [pc, #356]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003698:	4a57      	ldr	r2, [pc, #348]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 800369a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800369e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80036a2:	f7fe f8db 	bl	800185c <HAL_GetTick>
 80036a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036aa:	f7fe f8d7 	bl	800185c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e396      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80036bc:	4b4e      	ldr	r3, [pc, #312]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80036be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ef      	bne.n	80036aa <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d2:	4b49      	ldr	r3, [pc, #292]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80036d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d8:	4a47      	ldr	r2, [pc, #284]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8111 	beq.w	8003912 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f6:	4b40      	ldr	r3, [pc, #256]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80036f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d111      	bne.n	8003728 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003704:	4b3c      	ldr	r3, [pc, #240]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370a:	4a3b      	ldr	r2, [pc, #236]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003714:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003728:	4b34      	ldr	r3, [pc, #208]	@ (80037fc <HAL_RCC_OscConfig+0x7bc>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d118      	bne.n	8003766 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003734:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_RCC_OscConfig+0x7bc>)
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	4a30      	ldr	r2, [pc, #192]	@ (80037fc <HAL_RCC_OscConfig+0x7bc>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003740:	f7fe f88c 	bl	800185c <HAL_GetTick>
 8003744:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7fe f888 	bl	800185c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e347      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800375a:	4b28      	ldr	r3, [pc, #160]	@ (80037fc <HAL_RCC_OscConfig+0x7bc>)
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01f      	beq.n	80037b2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800377e:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003784:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003786:	f043 0304 	orr.w	r3, r3, #4
 800378a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800378e:	4b1a      	ldr	r3, [pc, #104]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003794:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800379e:	e018      	b.n	80037d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037a0:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80037a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037a6:	4a14      	ldr	r2, [pc, #80]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037b0:	e00f      	b.n	80037d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037b2:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80037b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037b8:	4a0f      	ldr	r2, [pc, #60]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80037c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037c8:	4a0b      	ldr	r2, [pc, #44]	@ (80037f8 <HAL_RCC_OscConfig+0x7b8>)
 80037ca:	f023 0304 	bic.w	r3, r3, #4
 80037ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d057      	beq.n	800388a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80037da:	f7fe f83f 	bl	800185c <HAL_GetTick>
 80037de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e0:	e00e      	b.n	8003800 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fe f83b 	bl	800185c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d905      	bls.n	8003800 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e2f8      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
 80037f8:	46020c00 	.word	0x46020c00
 80037fc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003800:	4b9c      	ldr	r3, [pc, #624]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0e9      	beq.n	80037e2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01b      	beq.n	8003852 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800381a:	4b96      	ldr	r3, [pc, #600]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 800381c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003820:	4a94      	ldr	r2, [pc, #592]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003826:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe f816 	bl	800185c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e2d3      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003842:	4b8c      	ldr	r3, [pc, #560]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ed      	beq.n	800382c <HAL_RCC_OscConfig+0x7ec>
 8003850:	e053      	b.n	80038fa <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003852:	4b88      	ldr	r3, [pc, #544]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003858:	4a86      	ldr	r2, [pc, #536]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 800385a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800385e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fd fffa 	bl	800185c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e2b7      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800387a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 800387c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ed      	bne.n	8003864 <HAL_RCC_OscConfig+0x824>
 8003888:	e037      	b.n	80038fa <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800388a:	f7fd ffe7 	bl	800185c <HAL_GetTick>
 800388e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fd ffe3 	bl	800185c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e2a0      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a8:	4b72      	ldr	r3, [pc, #456]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80038aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ed      	bne.n	8003892 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80038b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80038b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01a      	beq.n	80038fa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80038c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80038c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80038cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d6:	f7fd ffc1 	bl	800185c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e27e      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80038ec:	4b61      	ldr	r3, [pc, #388]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80038ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ed      	bne.n	80038d6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038fa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b5c      	ldr	r3, [pc, #368]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003908:	4a5a      	ldr	r2, [pc, #360]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 800390a:	f023 0304 	bic.w	r3, r3, #4
 800390e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d036      	beq.n	800398c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d019      	beq.n	800395a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003926:	4b53      	ldr	r3, [pc, #332]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a52      	ldr	r2, [pc, #328]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 800392c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003930:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003932:	f7fd ff93 	bl	800185c <HAL_GetTick>
 8003936:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800393a:	f7fd ff8f 	bl	800185c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e24e      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800394c:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x8fa>
 8003958:	e018      	b.n	800398c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800395a:	4b46      	ldr	r3, [pc, #280]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a45      	ldr	r2, [pc, #276]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003960:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003964:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003966:	f7fd ff79 	bl	800185c <HAL_GetTick>
 800396a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800396e:	f7fd ff75 	bl	800185c <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e234      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003980:	4b3c      	ldr	r3, [pc, #240]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f0      	bne.n	800396e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d036      	beq.n	8003a06 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	2b00      	cmp	r3, #0
 800399e:	d019      	beq.n	80039d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80039a0:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a33      	ldr	r2, [pc, #204]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80039a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80039ac:	f7fd ff56 	bl	800185c <HAL_GetTick>
 80039b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80039b4:	f7fd ff52 	bl	800185c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e211      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80039c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x974>
 80039d2:	e018      	b.n	8003a06 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a26      	ldr	r2, [pc, #152]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80039da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80039e0:	f7fd ff3c 	bl	800185c <HAL_GetTick>
 80039e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80039e8:	f7fd ff38 	bl	800185c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1f7      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80039fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d07f      	beq.n	8003b12 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d062      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003a1a:	4b16      	ldr	r3, [pc, #88]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4a15      	ldr	r2, [pc, #84]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003a20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	4910      	ldr	r1, [pc, #64]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a40:	d309      	bcc.n	8003a56 <HAL_RCC_OscConfig+0xa16>
 8003a42:	4b0c      	ldr	r3, [pc, #48]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f023 021f 	bic.w	r2, r3, #31
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4909      	ldr	r1, [pc, #36]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
 8003a54:	e02a      	b.n	8003aac <HAL_RCC_OscConfig+0xa6c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	da0c      	bge.n	8003a78 <HAL_RCC_OscConfig+0xa38>
 8003a5e:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	015b      	lsls	r3, r3, #5
 8003a6c:	4901      	ldr	r1, [pc, #4]	@ (8003a74 <HAL_RCC_OscConfig+0xa34>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60cb      	str	r3, [r1, #12]
 8003a72:	e01b      	b.n	8003aac <HAL_RCC_OscConfig+0xa6c>
 8003a74:	46020c00 	.word	0x46020c00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d30a      	bcc.n	8003a98 <HAL_RCC_OscConfig+0xa58>
 8003a82:	4ba1      	ldr	r3, [pc, #644]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	499d      	ldr	r1, [pc, #628]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60cb      	str	r3, [r1, #12]
 8003a96:	e009      	b.n	8003aac <HAL_RCC_OscConfig+0xa6c>
 8003a98:	4b9b      	ldr	r3, [pc, #620]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	03db      	lsls	r3, r3, #15
 8003aa6:	4998      	ldr	r1, [pc, #608]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003aac:	4b96      	ldr	r3, [pc, #600]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a95      	ldr	r2, [pc, #596]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003ab2:	f043 0310 	orr.w	r3, r3, #16
 8003ab6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ab8:	f7fd fed0 	bl	800185c <HAL_GetTick>
 8003abc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003ac0:	f7fd fecc 	bl	800185c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e18b      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0xa80>
 8003ade:	e018      	b.n	8003b12 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003ae0:	4b89      	ldr	r3, [pc, #548]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a88      	ldr	r2, [pc, #544]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003ae6:	f023 0310 	bic.w	r3, r3, #16
 8003aea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003aec:	f7fd feb6 	bl	800185c <HAL_GetTick>
 8003af0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003af4:	f7fd feb2 	bl	800185c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e171      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003b06:	4b80      	ldr	r3, [pc, #512]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8166 	beq.w	8003de8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b22:	4b79      	ldr	r3, [pc, #484]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	f000 80f2 	beq.w	8003d14 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	f040 80c5 	bne.w	8003cc4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b73      	ldr	r3, [pc, #460]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a72      	ldr	r2, [pc, #456]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b46:	f7fd fe89 	bl	800185c <HAL_GetTick>
 8003b4a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fd fe85 	bl	800185c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e144      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b60:	4b69      	ldr	r3, [pc, #420]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6c:	4b66      	ldr	r3, [pc, #408]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d111      	bne.n	8003b9e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	4b63      	ldr	r3, [pc, #396]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b80:	4a61      	ldr	r2, [pc, #388]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003d0c <HAL_RCC_OscConfig+0xccc>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003bb2:	4b56      	ldr	r3, [pc, #344]	@ (8003d0c <HAL_RCC_OscConfig+0xccc>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	4a55      	ldr	r2, [pc, #340]	@ (8003d0c <HAL_RCC_OscConfig+0xccc>)
 8003bb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bbc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003bbe:	4b52      	ldr	r3, [pc, #328]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003bd2:	3a01      	subs	r2, #1
 8003bd4:	0212      	lsls	r2, r2, #8
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	494a      	ldr	r1, [pc, #296]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003be4:	4b48      	ldr	r3, [pc, #288]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be8:	4b49      	ldr	r3, [pc, #292]	@ (8003d10 <HAL_RCC_OscConfig+0xcd0>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003bfa:	3a01      	subs	r2, #1
 8003bfc:	0252      	lsls	r2, r2, #9
 8003bfe:	b292      	uxth	r2, r2
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c06:	3a01      	subs	r2, #1
 8003c08:	0412      	lsls	r2, r2, #16
 8003c0a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003c14:	3a01      	subs	r2, #1
 8003c16:	0612      	lsls	r2, r2, #24
 8003c18:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	493a      	ldr	r1, [pc, #232]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003c24:	4b38      	ldr	r3, [pc, #224]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	4a37      	ldr	r2, [pc, #220]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c2a:	f023 0310 	bic.w	r3, r3, #16
 8003c2e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c34:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003c3a:	4b33      	ldr	r3, [pc, #204]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3e:	4a32      	ldr	r2, [pc, #200]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c40:	f043 0310 	orr.w	r3, r3, #16
 8003c44:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003c46:	4b30      	ldr	r3, [pc, #192]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	f023 020c 	bic.w	r2, r3, #12
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c52:	492d      	ldr	r1, [pc, #180]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003c58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003c60:	4b2a      	ldr	r3, [pc, #168]	@ (8003d0c <HAL_RCC_OscConfig+0xccc>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a29      	ldr	r2, [pc, #164]	@ (8003d0c <HAL_RCC_OscConfig+0xccc>)
 8003c66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c6a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003c6c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003c74:	4b24      	ldr	r3, [pc, #144]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7a:	4a23      	ldr	r2, [pc, #140]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003c84:	4b20      	ldr	r3, [pc, #128]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1f      	ldr	r2, [pc, #124]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c90:	f7fd fde4 	bl	800185c <HAL_GetTick>
 8003c94:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd fde0 	bl	800185c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e09f      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003caa:	4b17      	ldr	r3, [pc, #92]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cb6:	4b14      	ldr	r3, [pc, #80]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	4a13      	ldr	r2, [pc, #76]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc0:	6293      	str	r3, [r2, #40]	@ 0x28
 8003cc2:	e091      	b.n	8003de8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003cc4:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003cd0:	f7fd fdc4 	bl	800185c <HAL_GetTick>
 8003cd4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd fdc0 	bl	800185c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e07f      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003cf6:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	4a03      	ldr	r2, [pc, #12]	@ (8003d08 <HAL_RCC_OscConfig+0xcc8>)
 8003cfc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003d00:	f023 0303 	bic.w	r3, r3, #3
 8003d04:	6293      	str	r3, [r2, #40]	@ 0x28
 8003d06:	e06f      	b.n	8003de8 <HAL_RCC_OscConfig+0xda8>
 8003d08:	46020c00 	.word	0x46020c00
 8003d0c:	46020800 	.word	0x46020800
 8003d10:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003d14:	4b37      	ldr	r3, [pc, #220]	@ (8003df4 <HAL_RCC_OscConfig+0xdb4>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d18:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d1a:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <HAL_RCC_OscConfig+0xdb4>)
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d039      	beq.n	8003d9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0203 	and.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d132      	bne.n	8003d9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d129      	bne.n	8003d9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d122      	bne.n	8003d9c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d60:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d11a      	bne.n	8003d9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	0a5b      	lsrs	r3, r3, #9
 8003d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d111      	bne.n	8003d9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	0c1b      	lsrs	r3, r3, #16
 8003d7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d84:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d108      	bne.n	8003d9c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	0e1b      	lsrs	r3, r3, #24
 8003d8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e024      	b.n	8003dea <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003da0:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <HAL_RCC_OscConfig+0xdb4>)
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d01a      	beq.n	8003de8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003db2:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <HAL_RCC_OscConfig+0xdb4>)
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	4a0f      	ldr	r2, [pc, #60]	@ (8003df4 <HAL_RCC_OscConfig+0xdb4>)
 8003db8:	f023 0310 	bic.w	r3, r3, #16
 8003dbc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fd4d 	bl	800185c <HAL_GetTick>
 8003dc2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003dc4:	bf00      	nop
 8003dc6:	f7fd fd49 	bl	800185c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d0f9      	beq.n	8003dc6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd6:	4a07      	ldr	r2, [pc, #28]	@ (8003df4 <HAL_RCC_OscConfig+0xdb4>)
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_OscConfig+0xdb4>)
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	4a04      	ldr	r2, [pc, #16]	@ (8003df4 <HAL_RCC_OscConfig+0xdb4>)
 8003de2:	f043 0310 	orr.w	r3, r3, #16
 8003de6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3738      	adds	r7, #56	@ 0x38
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	46020c00 	.word	0x46020c00

08003df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e1d9      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b9b      	ldr	r3, [pc, #620]	@ (800407c <HAL_RCC_ClockConfig+0x284>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d910      	bls.n	8003e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b98      	ldr	r3, [pc, #608]	@ (800407c <HAL_RCC_ClockConfig+0x284>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 020f 	bic.w	r2, r3, #15
 8003e22:	4996      	ldr	r1, [pc, #600]	@ (800407c <HAL_RCC_ClockConfig+0x284>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b94      	ldr	r3, [pc, #592]	@ (800407c <HAL_RCC_ClockConfig+0x284>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e1c1      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d010      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d908      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003e58:	4b89      	ldr	r3, [pc, #548]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	4986      	ldr	r1, [pc, #536]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	4b81      	ldr	r3, [pc, #516]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d909      	bls.n	8003e9c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003e88:	4b7d      	ldr	r3, [pc, #500]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	497a      	ldr	r1, [pc, #488]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d010      	beq.n	8003eca <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	4b74      	ldr	r3, [pc, #464]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d908      	bls.n	8003eca <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003eb8:	4b71      	ldr	r3, [pc, #452]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	496e      	ldr	r1, [pc, #440]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d010      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	4b69      	ldr	r3, [pc, #420]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d908      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003ee6:	4b66      	ldr	r3, [pc, #408]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f023 020f 	bic.w	r2, r3, #15
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4963      	ldr	r1, [pc, #396]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80d2 	beq.w	80040aa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d143      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f12:	4b5b      	ldr	r3, [pc, #364]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d110      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b57      	ldr	r3, [pc, #348]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f26:	4a56      	ldr	r2, [pc, #344]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003f30:	4b53      	ldr	r3, [pc, #332]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003f42:	f7fd fc8b 	bl	800185c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003f48:	4b4e      	ldr	r3, [pc, #312]	@ (8004084 <HAL_RCC_ClockConfig+0x28c>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00f      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003f56:	f7fd fc81 	bl	800185c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e12b      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003f68:	4b46      	ldr	r3, [pc, #280]	@ (8004084 <HAL_RCC_ClockConfig+0x28c>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f7a:	4b41      	ldr	r3, [pc, #260]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f80:	4a3f      	ldr	r2, [pc, #252]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003f82:	f023 0304 	bic.w	r3, r3, #4
 8003f86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d121      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e112      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa2:	4b37      	ldr	r3, [pc, #220]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e106      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003fba:	4b31      	ldr	r3, [pc, #196]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0fa      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fca:	4b2d      	ldr	r3, [pc, #180]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0f2      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b29      	ldr	r3, [pc, #164]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4926      	ldr	r1, [pc, #152]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003fec:	f7fd fc36 	bl	800185c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d112      	bne.n	8004020 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fd fc2e 	bl	800185c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e0d6      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004012:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d1ee      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x204>
 800401e:	e044      	b.n	80040aa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d112      	bne.n	800404e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004028:	e00a      	b.n	8004040 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402a:	f7fd fc17 	bl	800185c <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004038:	4293      	cmp	r3, r2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e0bf      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004040:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d1ee      	bne.n	800402a <HAL_RCC_ClockConfig+0x232>
 800404c:	e02d      	b.n	80040aa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d123      	bne.n	800409e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004056:	e00a      	b.n	800406e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004058:	f7fd fc00 	bl	800185c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e0a8      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800406e:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <HAL_RCC_ClockConfig+0x288>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1ee      	bne.n	8004058 <HAL_RCC_ClockConfig+0x260>
 800407a:	e016      	b.n	80040aa <HAL_RCC_ClockConfig+0x2b2>
 800407c:	40022000 	.word	0x40022000
 8004080:	46020c00 	.word	0x46020c00
 8004084:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004088:	f7fd fbe8 	bl	800185c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e090      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800409e:	4b4a      	ldr	r3, [pc, #296]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d1ee      	bne.n	8004088 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d010      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	4b43      	ldr	r3, [pc, #268]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d208      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80040c6:	4b40      	ldr	r3, [pc, #256]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 020f 	bic.w	r2, r3, #15
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	493d      	ldr	r1, [pc, #244]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b3c      	ldr	r3, [pc, #240]	@ (80041cc <HAL_RCC_ClockConfig+0x3d4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d210      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b39      	ldr	r3, [pc, #228]	@ (80041cc <HAL_RCC_ClockConfig+0x3d4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 020f 	bic.w	r2, r3, #15
 80040ee:	4937      	ldr	r1, [pc, #220]	@ (80041cc <HAL_RCC_ClockConfig+0x3d4>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b35      	ldr	r3, [pc, #212]	@ (80041cc <HAL_RCC_ClockConfig+0x3d4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e05b      	b.n	80041c0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d010      	beq.n	8004136 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	4b2b      	ldr	r3, [pc, #172]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004120:	429a      	cmp	r2, r3
 8004122:	d208      	bcs.n	8004136 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b28      	ldr	r3, [pc, #160]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4925      	ldr	r1, [pc, #148]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d012      	beq.n	8004168 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	4b20      	ldr	r3, [pc, #128]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004150:	429a      	cmp	r2, r3
 8004152:	d209      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004154:	4b1c      	ldr	r3, [pc, #112]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4919      	ldr	r1, [pc, #100]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d010      	beq.n	8004196 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004180:	429a      	cmp	r2, r3
 8004182:	d208      	bcs.n	8004196 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004184:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	490d      	ldr	r1, [pc, #52]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004192:	4313      	orrs	r3, r2
 8004194:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004196:	f000 f821 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <HAL_RCC_ClockConfig+0x3d0>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	490a      	ldr	r1, [pc, #40]	@ (80041d0 <HAL_RCC_ClockConfig+0x3d8>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ac:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <HAL_RCC_ClockConfig+0x3dc>)
 80041ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041b0:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <HAL_RCC_ClockConfig+0x3e0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc fff7 	bl	80011a8 <HAL_InitTick>
 80041ba:	4603      	mov	r3, r0
 80041bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	46020c00 	.word	0x46020c00
 80041cc:	40022000 	.word	0x40022000
 80041d0:	08009054 	.word	0x08009054
 80041d4:	20000004 	.word	0x20000004
 80041d8:	20000024 	.word	0x20000024

080041dc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	b08b      	sub	sp, #44	@ 0x2c
 80041e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ea:	4b78      	ldr	r3, [pc, #480]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f4:	4b75      	ldr	r3, [pc, #468]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x34>
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b0c      	cmp	r3, #12
 8004208:	d121      	bne.n	800424e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d11e      	bne.n	800424e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004210:	4b6e      	ldr	r3, [pc, #440]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d107      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800421c:	4b6b      	ldr	r3, [pc, #428]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800421e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004222:	0b1b      	lsrs	r3, r3, #12
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
 800422a:	e005      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800422c:	4b67      	ldr	r3, [pc, #412]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	0f1b      	lsrs	r3, r3, #28
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004238:	4a65      	ldr	r2, [pc, #404]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d110      	bne.n	800426a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800424c:	e00d      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800424e:	4b5f      	ldr	r3, [pc, #380]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b04      	cmp	r3, #4
 8004258:	d102      	bne.n	8004260 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800425a:	4b5e      	ldr	r3, [pc, #376]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	e004      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b08      	cmp	r3, #8
 8004264:	d101      	bne.n	800426a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004266:	4b5b      	ldr	r3, [pc, #364]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004268:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	f040 80a5 	bne.w	80043bc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004272:	4b56      	ldr	r3, [pc, #344]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800427c:	4b53      	ldr	r3, [pc, #332]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3301      	adds	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800428a:	4b50      	ldr	r3, [pc, #320]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	091b      	lsrs	r3, r3, #4
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004296:	4b4d      	ldr	r3, [pc, #308]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429a:	08db      	lsrs	r3, r3, #3
 800429c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ae:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d003      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0xe4>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d022      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x128>
 80042be:	e043      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ca:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80043d8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80042ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d2:	4b3e      	ldr	r3, [pc, #248]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80042e2:	ed97 6a01 	vldr	s12, [r7, #4]
 80042e6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80043dc <HAL_RCC_GetSysClockFreq+0x200>
 80042ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80042f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004302:	e046      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80043d8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b2d      	ldr	r3, [pc, #180]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004326:	ed97 6a01 	vldr	s12, [r7, #4]
 800432a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80043dc <HAL_RCC_GetSysClockFreq+0x200>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004346:	e024      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004360:	4b1a      	ldr	r3, [pc, #104]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004368:	ee07 3a90 	vmov	s15, r3
 800436c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004370:	ed97 6a01 	vldr	s12, [r7, #4]
 8004374:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80043dc <HAL_RCC_GetSysClockFreq+0x200>
 8004378:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800437c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004384:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004390:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004392:	4b0e      	ldr	r3, [pc, #56]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004396:	0e1b      	lsrs	r3, r3, #24
 8004398:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800439c:	3301      	adds	r3, #1
 800439e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b6:	ee17 3a90 	vmov	r3, s15
 80043ba:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80043bc:	6a3b      	ldr	r3, [r7, #32]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	372c      	adds	r7, #44	@ 0x2c
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	46020c00 	.word	0x46020c00
 80043d0:	0800906c 	.word	0x0800906c
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	4b742400 	.word	0x4b742400
 80043dc:	46000000 	.word	0x46000000

080043e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80043e4:	f7ff fefa 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b07      	ldr	r3, [pc, #28]	@ (8004408 <HAL_RCC_GetHCLKFreq+0x28>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	4906      	ldr	r1, [pc, #24]	@ (800440c <HAL_RCC_GetHCLKFreq+0x2c>)
 80043f4:	5ccb      	ldrb	r3, [r1, r3]
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	4a05      	ldr	r2, [pc, #20]	@ (8004410 <HAL_RCC_GetHCLKFreq+0x30>)
 80043fc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80043fe:	4b04      	ldr	r3, [pc, #16]	@ (8004410 <HAL_RCC_GetHCLKFreq+0x30>)
 8004400:	681b      	ldr	r3, [r3, #0]
}
 8004402:	4618      	mov	r0, r3
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	46020c00 	.word	0x46020c00
 800440c:	08009054 	.word	0x08009054
 8004410:	20000004 	.word	0x20000004

08004414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004418:	f7ff ffe2 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4903      	ldr	r1, [pc, #12]	@ (8004438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	46020c00 	.word	0x46020c00
 8004438:	08009064 	.word	0x08009064

0800443c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004440:	f7ff ffce 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	@ (8004460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	46020c00 	.word	0x46020c00
 8004460:	08009064 	.word	0x08009064

08004464 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004468:	f7ff ffba 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4903      	ldr	r1, [pc, #12]	@ (8004488 <HAL_RCC_GetPCLK3Freq+0x24>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	46020c00 	.word	0x46020c00
 8004488:	08009064 	.word	0x08009064

0800448c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	221f      	movs	r2, #31
 800449a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800449c:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <HAL_RCC_GetClockConfig+0x68>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f003 0203 	and.w	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80044a8:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <HAL_RCC_GetClockConfig+0x68>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80044b4:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <HAL_RCC_GetClockConfig+0x68>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <HAL_RCC_GetClockConfig+0x68>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80044ce:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <HAL_RCC_GetClockConfig+0x68>)
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044da:	4b07      	ldr	r3, [pc, #28]	@ (80044f8 <HAL_RCC_GetClockConfig+0x6c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	601a      	str	r2, [r3, #0]
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	46020c00 	.word	0x46020c00
 80044f8:	40022000 	.word	0x40022000

080044fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004504:	4b3e      	ldr	r3, [pc, #248]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004512:	f7fe fd17 	bl	8002f44 <HAL_PWREx_GetVoltageRange>
 8004516:	6178      	str	r0, [r7, #20]
 8004518:	e019      	b.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	4b39      	ldr	r3, [pc, #228]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004520:	4a37      	ldr	r2, [pc, #220]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800452a:	4b35      	ldr	r3, [pc, #212]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800452c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004538:	f7fe fd04 	bl	8002f44 <HAL_PWREx_GetVoltageRange>
 800453c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800453e:	4b30      	ldr	r3, [pc, #192]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004544:	4a2e      	ldr	r2, [pc, #184]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004546:	f023 0304 	bic.w	r3, r3, #4
 800454a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004554:	d003      	beq.n	800455e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800455c:	d109      	bne.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004564:	d202      	bcs.n	800456c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004566:	2301      	movs	r3, #1
 8004568:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800456a:	e033      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004570:	e030      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004578:	d208      	bcs.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004580:	d102      	bne.n	8004588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004582:	2303      	movs	r3, #3
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	e025      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e035      	b.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004592:	d90f      	bls.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045a0:	d902      	bls.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	e015      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80045a8:	2301      	movs	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	e012      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e00f      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ba:	d109      	bne.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c2:	d102      	bne.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80045c4:	2301      	movs	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e004      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80045ca:	2302      	movs	r3, #2
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	e001      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80045d0:	2301      	movs	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 020f 	bic.w	r2, r3, #15
 80045dc:	4909      	ldr	r1, [pc, #36]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80045e4:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d001      	beq.n	80045f6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	46020c00 	.word	0x46020c00
 8004604:	40022000 	.word	0x40022000

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b0b8      	sub	sp, #224	@ 0xe0
 800460e:	af00      	add	r7, sp, #0
 8004610:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004614:	2300      	movs	r3, #0
 8004616:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800461a:	2300      	movs	r3, #0
 800461c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f002 0401 	and.w	r4, r2, #1
 800462c:	2500      	movs	r5, #0
 800462e:	ea54 0305 	orrs.w	r3, r4, r5
 8004632:	d00b      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004634:	4bca      	ldr	r3, [pc, #808]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800463a:	f023 0103 	bic.w	r1, r3, #3
 800463e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004644:	4ac6      	ldr	r2, [pc, #792]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004646:	430b      	orrs	r3, r1
 8004648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800464c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f002 0802 	and.w	r8, r2, #2
 8004658:	f04f 0900 	mov.w	r9, #0
 800465c:	ea58 0309 	orrs.w	r3, r8, r9
 8004660:	d00b      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004662:	4bbf      	ldr	r3, [pc, #764]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004668:	f023 010c 	bic.w	r1, r3, #12
 800466c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004672:	4abb      	ldr	r2, [pc, #748]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004674:	430b      	orrs	r3, r1
 8004676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800467a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f002 0a04 	and.w	sl, r2, #4
 8004686:	f04f 0b00 	mov.w	fp, #0
 800468a:	ea5a 030b 	orrs.w	r3, sl, fp
 800468e:	d00b      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004690:	4bb3      	ldr	r3, [pc, #716]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004696:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800469a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800469e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a0:	4aaf      	ldr	r2, [pc, #700]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046a2:	430b      	orrs	r3, r1
 80046a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f002 0308 	and.w	r3, r2, #8
 80046b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046b8:	2300      	movs	r3, #0
 80046ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4313      	orrs	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80046c8:	4ba5      	ldr	r3, [pc, #660]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d8:	4aa1      	ldr	r2, [pc, #644]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046da:	430b      	orrs	r3, r1
 80046dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f002 0310 	and.w	r3, r2, #16
 80046ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80046f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80046fa:	460b      	mov	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d00b      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004700:	4b97      	ldr	r3, [pc, #604]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004706:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800470a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800470e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004710:	4a93      	ldr	r2, [pc, #588]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004712:	430b      	orrs	r3, r1
 8004714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f002 0320 	and.w	r3, r2, #32
 8004724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800472e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004732:	460b      	mov	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	d00b      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004738:	4b89      	ldr	r3, [pc, #548]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800473a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800473e:	f023 0107 	bic.w	r1, r3, #7
 8004742:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004748:	4a85      	ldr	r2, [pc, #532]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800474a:	430b      	orrs	r3, r1
 800474c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800475c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004760:	2300      	movs	r3, #0
 8004762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004766:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800476a:	460b      	mov	r3, r1
 800476c:	4313      	orrs	r3, r2
 800476e:	d00b      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004770:	4b7b      	ldr	r3, [pc, #492]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004776:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800477a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800477e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004780:	4a77      	ldr	r2, [pc, #476]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004782:	430b      	orrs	r3, r1
 8004784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004794:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800479e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80047a8:	4b6d      	ldr	r3, [pc, #436]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b8:	4a69      	ldr	r2, [pc, #420]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047ba:	430b      	orrs	r3, r1
 80047bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80047cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047da:	460b      	mov	r3, r1
 80047dc:	4313      	orrs	r3, r2
 80047de:	d00b      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80047e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f0:	4a5b      	ldr	r2, [pc, #364]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800480e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d00b      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004818:	4b51      	ldr	r3, [pc, #324]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800481a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800481e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004828:	4a4d      	ldr	r2, [pc, #308]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800482a:	430b      	orrs	r3, r1
 800482c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800483c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004846:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d00b      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004850:	4b43      	ldr	r3, [pc, #268]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004856:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800485a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800485e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004860:	4a3f      	ldr	r2, [pc, #252]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004862:	430b      	orrs	r3, r1
 8004864:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004868:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004874:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004878:	2300      	movs	r3, #0
 800487a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800487e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004882:	460b      	mov	r3, r1
 8004884:	4313      	orrs	r3, r2
 8004886:	d00b      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004888:	4b35      	ldr	r3, [pc, #212]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800488a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800488e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004892:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004898:	4a31      	ldr	r2, [pc, #196]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800489a:	430b      	orrs	r3, r1
 800489c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80048a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048ae:	2300      	movs	r3, #0
 80048b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048b6:	460b      	mov	r3, r1
 80048b8:	4313      	orrs	r3, r2
 80048ba:	d00c      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80048bc:	4b28      	ldr	r3, [pc, #160]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ce:	4a24      	ldr	r2, [pc, #144]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80048e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80048e4:	2300      	movs	r3, #0
 80048e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80048e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d04f      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80048f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	2b80      	cmp	r3, #128	@ 0x80
 80048fc:	d02d      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x352>
 80048fe:	2b80      	cmp	r3, #128	@ 0x80
 8004900:	d827      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004902:	2b60      	cmp	r3, #96	@ 0x60
 8004904:	d02e      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004906:	2b60      	cmp	r3, #96	@ 0x60
 8004908:	d823      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800490a:	2b40      	cmp	r3, #64	@ 0x40
 800490c:	d006      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	d81f      	bhi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d011      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800491a:	e01a      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800491c:	4b10      	ldr	r3, [pc, #64]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	4a0f      	ldr	r2, [pc, #60]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004926:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004928:	e01d      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800492a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800492e:	3308      	adds	r3, #8
 8004930:	4618      	mov	r0, r3
 8004932:	f002 f9d1 	bl	8006cd8 <RCCEx_PLL2_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800493c:	e013      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800493e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004942:	332c      	adds	r3, #44	@ 0x2c
 8004944:	4618      	mov	r0, r3
 8004946:	f002 fa5f 	bl	8006e08 <RCCEx_PLL3_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004950:	e009      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004958:	e005      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800495a:	bf00      	nop
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800495e:	bf00      	nop
 8004960:	46020c00 	.word	0x46020c00
        break;
 8004964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004966:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800496e:	4bb6      	ldr	r3, [pc, #728]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004974:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004980:	4ab1      	ldr	r2, [pc, #708]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004982:	430b      	orrs	r3, r1
 8004984:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004988:	e003      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800498e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800499e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049a0:	2300      	movs	r3, #0
 80049a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d053      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80049ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ba:	d033      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c0:	d82c      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80049c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c6:	d02f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80049c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049cc:	d826      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d2:	d008      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d8:	d820      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80049de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e2:	d011      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80049e4:	e01a      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049e6:	4b98      	ldr	r3, [pc, #608]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	4a97      	ldr	r2, [pc, #604]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80049f2:	e01a      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049f8:	3308      	adds	r3, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f002 f96c 	bl	8006cd8 <RCCEx_PLL2_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004a06:	e010      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a0c:	332c      	adds	r3, #44	@ 0x2c
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f002 f9fa 	bl	8006e08 <RCCEx_PLL3_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004a1a:	e006      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004a24:	bf00      	nop
 8004a26:	e000      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10d      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004a32:	4b85      	ldr	r3, [pc, #532]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a38:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a44:	4a80      	ldr	r2, [pc, #512]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a46:	430b      	orrs	r3, r1
 8004a48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a52:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004a56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004a62:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a64:	2300      	movs	r3, #0
 8004a66:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a68:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d046      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004a72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a7a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004a7e:	d028      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a80:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004a84:	d821      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a8a:	d022      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a90:	d81b      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004a92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a96:	d01c      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004a98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a9c:	d815      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004a9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa8:	d80f      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d011      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ab4:	e009      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aba:	3308      	adds	r3, #8
 8004abc:	4618      	mov	r0, r3
 8004abe:	f002 f90b 	bl	8006cd8 <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004ac8:	e004      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004adc:	4b5a      	ldr	r3, [pc, #360]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ae2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004aee:	4a56      	ldr	r2, [pc, #344]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004af0:	430b      	orrs	r3, r1
 8004af2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004af6:	e003      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004afc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b0e:	2300      	movs	r3, #0
 8004b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d03f      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d81e      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004b28:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b53 	.word	0x08004b53
 8004b3c:	08004b6f 	.word	0x08004b6f
 8004b40:	08004b6f 	.word	0x08004b6f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b44:	4b40      	ldr	r3, [pc, #256]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b48:	4a3f      	ldr	r2, [pc, #252]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b4e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004b50:	e00e      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b56:	332c      	adds	r3, #44	@ 0x2c
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f002 f955 	bl	8006e08 <RCCEx_PLL3_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004b64:	e004      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004b6c:	e000      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004b6e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004b70:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004b78:	4b33      	ldr	r3, [pc, #204]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b7e:	f023 0107 	bic.w	r1, r3, #7
 8004b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b92:	e003      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b98:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004baa:	2300      	movs	r3, #0
 8004bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	d04d      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bc4:	d028      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004bc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bca:	d821      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004bcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bd0:	d024      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004bd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bd6:	d81b      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bdc:	d00e      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004bde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004be2:	d815      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d110      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bee:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	4a15      	ldr	r2, [pc, #84]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004bfa:	e012      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c00:	332c      	adds	r3, #44	@ 0x2c
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 f900 	bl	8006e08 <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004c0e:	e008      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004c16:	e004      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004c18:	bf00      	nop
 8004c1a:	e002      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004c1c:	bf00      	nop
 8004c1e:	e000      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004c20:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004c22:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d110      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004c2a:	4b07      	ldr	r3, [pc, #28]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c3c:	4a02      	ldr	r2, [pc, #8]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c44:	e006      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c46:	bf00      	nop
 8004c48:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c50:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c62:	2300      	movs	r3, #0
 8004c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c66:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f000 80b5 	beq.w	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c78:	4b9d      	ldr	r3, [pc, #628]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d113      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	4b9a      	ldr	r3, [pc, #616]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c8c:	4a98      	ldr	r2, [pc, #608]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c8e:	f043 0304 	orr.w	r3, r3, #4
 8004c92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c96:	4b96      	ldr	r3, [pc, #600]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ca4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004cae:	4b91      	ldr	r3, [pc, #580]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb2:	4a90      	ldr	r2, [pc, #576]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cba:	f7fc fdcf 	bl	800185c <HAL_GetTick>
 8004cbe:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc4:	f7fc fdca 	bl	800185c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d903      	bls.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004cda:	e005      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cdc:	4b85      	ldr	r3, [pc, #532]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0ed      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004ce8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d165      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cf0:	4b7f      	ldr	r3, [pc, #508]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d023      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004d06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d0a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01b      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d16:	4b76      	ldr	r3, [pc, #472]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d24:	4b72      	ldr	r3, [pc, #456]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d2a:	4a71      	ldr	r2, [pc, #452]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d34:	4b6e      	ldr	r3, [pc, #440]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d3a:	4a6d      	ldr	r2, [pc, #436]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d44:	4a6a      	ldr	r2, [pc, #424]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d019      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fc fd7f 	bl	800185c <HAL_GetTick>
 8004d5e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d62:	e00d      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fc fd7a 	bl	800185c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d903      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8004d7e:	e006      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d80:	4b5b      	ldr	r3, [pc, #364]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ea      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004d8e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004d96:	4b56      	ldr	r3, [pc, #344]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004da4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004da8:	4a51      	ldr	r2, [pc, #324]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004db0:	e008      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004db2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004db6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8004dba:	e003      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004dc0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dc4:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d107      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dcc:	4b48      	ldr	r3, [pc, #288]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd2:	4a47      	ldr	r2, [pc, #284]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004dd4:	f023 0304 	bic.w	r3, r3, #4
 8004dd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004de8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dea:	2300      	movs	r3, #0
 8004dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	d042      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e04:	d022      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004e06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e0a:	d81b      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e10:	d011      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004e12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e16:	d815      	bhi.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d019      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004e1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e20:	d110      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e26:	3308      	adds	r3, #8
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 ff55 	bl	8006cd8 <RCCEx_PLL2_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e34:	e00d      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e36:	4b2e      	ldr	r3, [pc, #184]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e40:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004e42:	e006      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e4a:	e002      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004e50:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e52:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10d      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004e5a:	4b25      	ldr	r3, [pc, #148]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e60:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e6c:	4a20      	ldr	r2, [pc, #128]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e74:	e003      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e76:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e7a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e94:	460b      	mov	r3, r1
 8004e96:	4313      	orrs	r3, r2
 8004e98:	d032      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004e9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eac:	d804      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb6:	d007      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004ebe:	e004      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004ec0:	bf00      	nop
 8004ec2:	e002      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004ec4:	bf00      	nop
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004ec8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004eca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d112      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004ed2:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ed4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ed8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ee4:	4a02      	ldr	r2, [pc, #8]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004eec:	e008      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8004eee:	bf00      	nop
 8004ef0:	46020c00 	.word	0x46020c00
 8004ef4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004efc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f0e:	2300      	movs	r3, #0
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f16:	460b      	mov	r3, r1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d019      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004f1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f28:	d105      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f2a:	4b88      	ldr	r3, [pc, #544]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	4a87      	ldr	r2, [pc, #540]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f34:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004f36:	4b85      	ldr	r3, [pc, #532]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004f40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f48:	4a80      	ldr	r2, [pc, #512]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f62:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d00c      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004f6c:	4b77      	ldr	r3, [pc, #476]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f7e:	4973      	ldr	r1, [pc, #460]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004f86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f98:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	d00c      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fa8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fb4:	4965      	ldr	r1, [pc, #404]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	d00c      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fde:	f023 0218 	bic.w	r2, r3, #24
 8004fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004fea:	4958      	ldr	r1, [pc, #352]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005008:	460b      	mov	r3, r1
 800500a:	4313      	orrs	r3, r2
 800500c:	d032      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800500e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005016:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501c:	4b4b      	ldr	r3, [pc, #300]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	4a4a      	ldr	r2, [pc, #296]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005026:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800502c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005030:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005034:	d108      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800503a:	3308      	adds	r3, #8
 800503c:	4618      	mov	r0, r3
 800503e:	f001 fe4b 	bl	8006cd8 <RCCEx_PLL2_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005048:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10d      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005050:	4b3e      	ldr	r3, [pc, #248]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005052:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005056:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800505a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800505e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005062:	493a      	ldr	r1, [pc, #232]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005070:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800508a:	460b      	mov	r3, r1
 800508c:	4313      	orrs	r3, r2
 800508e:	d03a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800509c:	d00e      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800509e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050a2:	d815      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d017      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80050a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050ac:	d110      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ae:	4b27      	ldr	r3, [pc, #156]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	4a26      	ldr	r2, [pc, #152]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80050b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80050ba:	e00e      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050c0:	3308      	adds	r3, #8
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 fe08 	bl	8006cd8 <RCCEx_PLL2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80050ce:	e004      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80050d8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80050e2:	4b1a      	ldr	r3, [pc, #104]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80050e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f4:	4915      	ldr	r1, [pc, #84]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005102:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e9d7 1200 	ldrd	r1, r2, [r7]
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d00c      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005122:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005128:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800512c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005130:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005134:	4905      	ldr	r1, [pc, #20]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800513c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005140:	4618      	mov	r0, r3
 8005142:	37e0      	adds	r7, #224	@ 0xe0
 8005144:	46bd      	mov	sp, r7
 8005146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800514a:	bf00      	nop
 800514c:	46020c00 	.word	0x46020c00

08005150 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	@ 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005158:	4ba6      	ldr	r3, [pc, #664]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800515a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005160:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005162:	4ba4      	ldr	r3, [pc, #656]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800516c:	4ba1      	ldr	r3, [pc, #644]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	0a1b      	lsrs	r3, r3, #8
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	3301      	adds	r3, #1
 8005178:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800517a:	4b9e      	ldr	r3, [pc, #632]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005186:	4b9b      	ldr	r3, [pc, #620]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d062      	beq.n	800526e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	f200 8081 	bhi.w	80052b2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d024      	beq.n	8005200 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d17a      	bne.n	80052b2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80051ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ce:	4b89      	ldr	r3, [pc, #548]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80051de:	ed97 6a02 	vldr	s12, [r7, #8]
 80051e2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80051e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80051ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051fe:	e08f      	b.n	8005320 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005200:	4b7c      	ldr	r3, [pc, #496]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800520c:	4b79      	ldr	r3, [pc, #484]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	0f1b      	lsrs	r3, r3, #28
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	e006      	b.n	8005226 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005218:	4b76      	ldr	r3, [pc, #472]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800521a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	0f1b      	lsrs	r3, r3, #28
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	4a76      	ldr	r2, [pc, #472]	@ (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005250:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005260:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005268:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800526c:	e058      	b.n	8005320 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005278:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800527c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005280:	4b5c      	ldr	r3, [pc, #368]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005290:	ed97 6a02 	vldr	s12, [r7, #8]
 8005294:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005298:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800529c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052b0:	e036      	b.n	8005320 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80052b2:	4b50      	ldr	r3, [pc, #320]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80052be:	4b4d      	ldr	r3, [pc, #308]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	0f1b      	lsrs	r3, r3, #28
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	e006      	b.n	80052d8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80052ca:	4b4a      	ldr	r3, [pc, #296]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80052cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	0f1b      	lsrs	r3, r3, #28
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	4a49      	ldr	r2, [pc, #292]	@ (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80052da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005302:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80053fc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005312:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800531e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005320:	4b34      	ldr	r3, [pc, #208]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d017      	beq.n	800535c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800532c:	4b31      	ldr	r3, [pc, #196]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800532e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005330:	0a5b      	lsrs	r3, r3, #9
 8005332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800533e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005342:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005346:	edd7 6a07 	vldr	s13, [r7, #28]
 800534a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005352:	ee17 2a90 	vmov	r2, s15
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e002      	b.n	8005362 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005362:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d017      	beq.n	800539e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800536e:	4b21      	ldr	r3, [pc, #132]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005378:	ee07 3a90 	vmov	s15, r3
 800537c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005384:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005388:	edd7 6a07 	vldr	s13, [r7, #28]
 800538c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005394:	ee17 2a90 	vmov	r2, s15
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	e002      	b.n	80053a4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80053a4:	4b13      	ldr	r3, [pc, #76]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80053a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d017      	beq.n	80053e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80053b0:	4b10      	ldr	r3, [pc, #64]	@ (80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80053b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b4:	0e1b      	lsrs	r3, r3, #24
 80053b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80053c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80053ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d6:	ee17 2a90 	vmov	r2, s15
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80053de:	e002      	b.n	80053e6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	609a      	str	r2, [r3, #8]
}
 80053e6:	bf00      	nop
 80053e8:	3724      	adds	r7, #36	@ 0x24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	46020c00 	.word	0x46020c00
 80053f8:	4b742400 	.word	0x4b742400
 80053fc:	46000000 	.word	0x46000000
 8005400:	0800906c 	.word	0x0800906c

08005404 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005404:	b480      	push	{r7}
 8005406:	b089      	sub	sp, #36	@ 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800540c:	4ba6      	ldr	r3, [pc, #664]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800540e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005414:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005416:	4ba4      	ldr	r3, [pc, #656]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005420:	4ba1      	ldr	r3, [pc, #644]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	3301      	adds	r3, #1
 800542c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800542e:	4b9e      	ldr	r3, [pc, #632]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	091b      	lsrs	r3, r3, #4
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800543a:	4b9b      	ldr	r3, [pc, #620]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	08db      	lsrs	r3, r3, #3
 8005440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d062      	beq.n	8005522 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b03      	cmp	r3, #3
 8005460:	f200 8081 	bhi.w	8005566 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d024      	beq.n	80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d17a      	bne.n	8005566 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80056ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b89      	ldr	r3, [pc, #548]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005492:	ed97 6a02 	vldr	s12, [r7, #8]
 8005496:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b2:	e08f      	b.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80054b4:	4b7c      	ldr	r3, [pc, #496]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80054c0:	4b79      	ldr	r3, [pc, #484]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	0f1b      	lsrs	r3, r3, #28
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	e006      	b.n	80054da <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80054cc:	4b76      	ldr	r3, [pc, #472]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	0f1b      	lsrs	r3, r3, #28
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	4a76      	ldr	r2, [pc, #472]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	ee07 3a90 	vmov	s15, r3
 80054e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005500:	ed97 6a02 	vldr	s12, [r7, #8]
 8005504:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005514:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005520:	e058      	b.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005534:	4b5c      	ldr	r3, [pc, #368]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005544:	ed97 6a02 	vldr	s12, [r7, #8]
 8005548:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800554c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005550:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005558:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800555c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005564:	e036      	b.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005566:	4b50      	ldr	r3, [pc, #320]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005572:	4b4d      	ldr	r3, [pc, #308]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0f1b      	lsrs	r3, r3, #28
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	e006      	b.n	800558c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800557e:	4b4a      	ldr	r3, [pc, #296]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	0f1b      	lsrs	r3, r3, #28
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	4a49      	ldr	r2, [pc, #292]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055b6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80055d4:	4b34      	ldr	r3, [pc, #208]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80055d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d017      	beq.n	8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80055e0:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	0a5b      	lsrs	r3, r3, #9
 80055e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80055f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80055fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80055fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005606:	ee17 2a90 	vmov	r2, s15
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e002      	b.n	8005616 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005616:	4b24      	ldr	r3, [pc, #144]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d017      	beq.n	8005652 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005622:	4b21      	ldr	r3, [pc, #132]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005638:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800563c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005648:	ee17 2a90 	vmov	r2, s15
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	e002      	b.n	8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005658:	4b13      	ldr	r3, [pc, #76]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800565a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d017      	beq.n	8005694 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005664:	4b10      	ldr	r3, [pc, #64]	@ (80056a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800567a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800567e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568a:	ee17 2a90 	vmov	r2, s15
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005692:	e002      	b.n	800569a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	609a      	str	r2, [r3, #8]
}
 800569a:	bf00      	nop
 800569c:	3724      	adds	r7, #36	@ 0x24
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	46020c00 	.word	0x46020c00
 80056ac:	4b742400 	.word	0x4b742400
 80056b0:	46000000 	.word	0x46000000
 80056b4:	0800906c 	.word	0x0800906c

080056b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	@ 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80056c0:	4ba6      	ldr	r3, [pc, #664]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80056ca:	4ba4      	ldr	r3, [pc, #656]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80056d4:	4ba1      	ldr	r3, [pc, #644]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	3301      	adds	r3, #1
 80056e0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80056e2:	4b9e      	ldr	r3, [pc, #632]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80056ee:	4b9b      	ldr	r3, [pc, #620]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056f2:	08db      	lsrs	r3, r3, #3
 80056f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005706:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d062      	beq.n	80057d6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b03      	cmp	r3, #3
 8005714:	f200 8081 	bhi.w	800581a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d024      	beq.n	8005768 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d17a      	bne.n	800581a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b89      	ldr	r3, [pc, #548]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005746:	ed97 6a02 	vldr	s12, [r7, #8]
 800574a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005766:	e08f      	b.n	8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005768:	4b7c      	ldr	r3, [pc, #496]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005774:	4b79      	ldr	r3, [pc, #484]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	0f1b      	lsrs	r3, r3, #28
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	e006      	b.n	800578e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005780:	4b76      	ldr	r3, [pc, #472]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	0f1b      	lsrs	r3, r3, #28
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	4a76      	ldr	r2, [pc, #472]	@ (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005794:	ee07 3a90 	vmov	s15, r3
 8005798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80057b8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80057bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80057cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057d4:	e058      	b.n	8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	ee07 3a90 	vmov	s15, r3
 80057dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80057e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e8:	4b5c      	ldr	r3, [pc, #368]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80057ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80057f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80057fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005800:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005804:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005808:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005814:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005818:	e036      	b.n	8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800581a:	4b50      	ldr	r3, [pc, #320]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005826:	4b4d      	ldr	r3, [pc, #308]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	0f1b      	lsrs	r3, r3, #28
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	e006      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005832:	4b4a      	ldr	r3, [pc, #296]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005838:	041b      	lsls	r3, r3, #16
 800583a:	0f1b      	lsrs	r3, r3, #28
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	4a49      	ldr	r2, [pc, #292]	@ (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	ee07 3a90 	vmov	s15, r3
 8005854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a02 	vldr	s12, [r7, #8]
 800586a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005886:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005888:	4b34      	ldr	r3, [pc, #208]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d017      	beq.n	80058c4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005894:	4b31      	ldr	r3, [pc, #196]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005898:	0a5b      	lsrs	r3, r3, #9
 800589a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80058a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80058ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ba:	ee17 2a90 	vmov	r2, s15
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e002      	b.n	80058ca <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80058ca:	4b24      	ldr	r3, [pc, #144]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d017      	beq.n	8005906 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80058d6:	4b21      	ldr	r3, [pc, #132]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	0c1b      	lsrs	r3, r3, #16
 80058dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80058e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058ec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80058f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058fc:	ee17 2a90 	vmov	r2, s15
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	e002      	b.n	800590c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800590c:	4b13      	ldr	r3, [pc, #76]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d017      	beq.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005918:	4b10      	ldr	r3, [pc, #64]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800591a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800592a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800592e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005932:	edd7 6a07 	vldr	s13, [r7, #28]
 8005936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 2a90 	vmov	r2, s15
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005946:	e002      	b.n	800594e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
}
 800594e:	bf00      	nop
 8005950:	3724      	adds	r7, #36	@ 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	46020c00 	.word	0x46020c00
 8005960:	4b742400 	.word	0x4b742400
 8005964:	46000000 	.word	0x46000000
 8005968:	0800906c 	.word	0x0800906c

0800596c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	@ 0x38
 8005970:	af00      	add	r7, sp, #0
 8005972:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800597a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800597e:	430b      	orrs	r3, r1
 8005980:	d145      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005982:	4baa      	ldr	r3, [pc, #680]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800598e:	4ba7      	ldr	r3, [pc, #668]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	d108      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a2:	d104      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80059a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059aa:	f001 b987 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80059ae:	4b9f      	ldr	r3, [pc, #636]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80059b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059bc:	d114      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c4:	d110      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059c6:	4b99      	ldr	r3, [pc, #612]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80059c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d4:	d103      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80059d6:	23fa      	movs	r3, #250	@ 0xfa
 80059d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059da:	f001 b96f 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80059de:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059e4:	f001 b96a 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80059e8:	4b90      	ldr	r3, [pc, #576]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f4:	d107      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059fc:	d103      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80059fe:	4b8c      	ldr	r3, [pc, #560]	@ (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a02:	f001 b95b 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a0a:	f001 b957 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a12:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005a16:	430b      	orrs	r3, r1
 8005a18:	d151      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005a1a:	4b84      	ldr	r3, [pc, #528]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a20:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005a24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a28:	2b80      	cmp	r3, #128	@ 0x80
 8005a2a:	d035      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	2b80      	cmp	r3, #128	@ 0x80
 8005a30:	d841      	bhi.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a34:	2b60      	cmp	r3, #96	@ 0x60
 8005a36:	d02a      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	2b60      	cmp	r3, #96	@ 0x60
 8005a3c:	d83b      	bhi.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	2b40      	cmp	r3, #64	@ 0x40
 8005a42:	d009      	beq.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	2b40      	cmp	r3, #64	@ 0x40
 8005a48:	d835      	bhi.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d012      	beq.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005a56:	e02e      	b.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fb77 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a66:	f001 b929 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6a:	f107 0318 	add.w	r3, r7, #24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fcc8 	bl	8005404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a78:	f001 b920 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a7c:	f107 030c 	add.w	r3, r7, #12
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fe19 	bl	80056b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a8a:	f001 b917 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005a8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a94:	f001 b912 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a98:	4b64      	ldr	r3, [pc, #400]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aa4:	d103      	bne.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005aa6:	4b63      	ldr	r3, [pc, #396]	@ (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005aaa:	f001 b907 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ab2:	f001 b903 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005aba:	f001 b8ff 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac2:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	d158      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005aca:	4b58      	ldr	r3, [pc, #352]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ad4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005adc:	d03b      	beq.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae4:	d846      	bhi.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aec:	d02e      	beq.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005af4:	d83e      	bhi.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005afc:	d00b      	beq.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b04:	d836      	bhi.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00d      	beq.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b12:	d012      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005b14:	e02e      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fb18 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b24:	f001 b8ca 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b28:	f107 0318 	add.w	r3, r7, #24
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fc69 	bl	8005404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b36:	f001 b8c1 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fdba 	bl	80056b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b48:	f001 b8b8 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005b4c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b52:	f001 b8b3 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b56:	4b35      	ldr	r3, [pc, #212]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b62:	d103      	bne.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005b64:	4b33      	ldr	r3, [pc, #204]	@ (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005b66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b68:	f001 b8a8 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b70:	f001 b8a4 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b78:	f001 b8a0 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b80:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005b84:	430b      	orrs	r3, r1
 8005b86:	d16e      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005b88:	4b28      	ldr	r3, [pc, #160]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b8e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005b92:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b9a:	d034      	beq.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ba2:	d85c      	bhi.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005baa:	d00b      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb2:	d854      	bhi.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bc0:	d009      	beq.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005bc2:	e04c      	b.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fac1 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bd2:	f001 b873 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bd6:	f107 0318 	add.w	r3, r7, #24
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fc12 	bl	8005404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005be4:	f001 b86a 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005be8:	4b10      	ldr	r3, [pc, #64]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf4:	d103      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005bf6:	4b10      	ldr	r3, [pc, #64]	@ (8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005bf8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bfa:	f001 b85f 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c02:	f001 b85b 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c06:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d121      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c12:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8005c1e:	4b03      	ldr	r3, [pc, #12]	@ (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	0e1b      	lsrs	r3, r3, #24
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	e00f      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005c2a:	bf00      	nop
 8005c2c:	46020c00 	.word	0x46020c00
 8005c30:	0007a120 	.word	0x0007a120
 8005c34:	00f42400 	.word	0x00f42400
 8005c38:	02dc6c00 	.word	0x02dc6c00
 8005c3c:	4ba7      	ldr	r3, [pc, #668]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	0e1b      	lsrs	r3, r3, #24
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	4aa5      	ldr	r2, [pc, #660]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c52:	f001 b833 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c5a:	f001 b82f 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c62:	f001 b82b 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c6a:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	d17f      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005c72:	4b9a      	ldr	r3, [pc, #616]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d165      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005c84:	4b95      	ldr	r3, [pc, #596]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c8a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005c8e:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005c96:	d034      	beq.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005c9e:	d853      	bhi.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ca6:	d00b      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cae:	d84b      	bhi.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cbc:	d009      	beq.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005cbe:	e043      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff fa43 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005cce:	f000 bff5 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd2:	f107 0318 	add.w	r3, r7, #24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff fb94 	bl	8005404 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005ce0:	f000 bfec 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005ce4:	4b7d      	ldr	r3, [pc, #500]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf0:	d103      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8005cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005cf4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005cf6:	f000 bfe1 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005cfe:	f000 bfdd 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d02:	4b76      	ldr	r3, [pc, #472]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d118      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d0e:	4b73      	ldr	r3, [pc, #460]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005d1a:	4b70      	ldr	r3, [pc, #448]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	0e1b      	lsrs	r3, r3, #24
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	e006      	b.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005d26:	4b6d      	ldr	r3, [pc, #436]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d2c:	041b      	lsls	r3, r3, #16
 8005d2e:	0e1b      	lsrs	r3, r3, #24
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	4a6a      	ldr	r2, [pc, #424]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005d3c:	f000 bfbe 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005d44:	f000 bfba 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005d4c:	f000 bfb6 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d56:	d108      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff f9f7 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d66:	f000 bfa9 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d6e:	f000 bfa5 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d76:	1e51      	subs	r1, r2, #1
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	d136      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d7c:	4b57      	ldr	r3, [pc, #348]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005d8e:	f7fe fb55 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8005d92:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d94:	f000 bf92 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d104      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d9e:	f7fe fa1d 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8005da2:	6378      	str	r0, [r7, #52]	@ 0x34
 8005da4:	f000 bf8a 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005da8:	4b4c      	ldr	r3, [pc, #304]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db4:	d106      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d103      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8005dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc0:	f000 bf7c 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005dc4:	4b45      	ldr	r3, [pc, #276]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d107      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d104      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8005dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dde:	f000 bf6d 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de6:	f000 bf69 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dee:	1e91      	subs	r1, r2, #2
 8005df0:	430b      	orrs	r3, r1
 8005df2:	d136      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005df4:	4b39      	ldr	r3, [pc, #228]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e06:	f7fe fb05 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8005e0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e0c:	f000 bf56 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d104      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e16:	f7fe f9e1 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8005e1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e1c:	f000 bf4e 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005e20:	4b2e      	ldr	r3, [pc, #184]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e2c:	d106      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d103      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8005e34:	4b2c      	ldr	r3, [pc, #176]	@ (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e38:	f000 bf40 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005e3c:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d107      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d104      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8005e50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e56:	f000 bf31 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5e:	f000 bf2d 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e66:	1f11      	subs	r1, r2, #4
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	d13f      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e7e:	f7fe fac9 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8005e82:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e84:	f000 bf1a 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d104      	bne.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e8e:	f7fe f9a5 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8005e92:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e94:	f000 bf12 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005e98:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea4:	d106      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d103      	bne.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8005eac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb0:	f000 bf04 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005eb4:	4b09      	ldr	r3, [pc, #36]	@ (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d107      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	2b30      	cmp	r3, #48	@ 0x30
 8005ec6:	d104      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8005ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ece:	f000 bef5 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed6:	f000 bef1 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005eda:	bf00      	nop
 8005edc:	46020c00 	.word	0x46020c00
 8005ee0:	0800906c 	.word	0x0800906c
 8005ee4:	02dc6c00 	.word	0x02dc6c00
 8005ee8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef0:	f1a2 0108 	sub.w	r1, r2, #8
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	d136      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005ef8:	4ba4      	ldr	r3, [pc, #656]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005efe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005f0a:	f7fe fa83 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8005f0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f10:	f000 bed4 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	2b40      	cmp	r3, #64	@ 0x40
 8005f18:	d104      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005f1a:	f7fe f95f 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8005f1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f20:	f000 becc 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005f24:	4b99      	ldr	r3, [pc, #612]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f30:	d106      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	2b80      	cmp	r3, #128	@ 0x80
 8005f36:	d103      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8005f38:	4b95      	ldr	r3, [pc, #596]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f3c:	f000 bebe 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005f40:	4b92      	ldr	r3, [pc, #584]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d107      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f52:	d104      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8005f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f5a:	f000 beaf 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f62:	f000 beab 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6a:	f1a2 0110 	sub.w	r1, r2, #16
 8005f6e:	430b      	orrs	r3, r1
 8005f70:	d139      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005f72:	4b86      	ldr	r3, [pc, #536]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005f84:	f7fe fa46 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8005f88:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f8a:	f000 be97 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f94:	d104      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005f96:	f7fe f921 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8005f9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f9c:	f000 be8e 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005fa0:	4b7a      	ldr	r3, [pc, #488]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fac:	d107      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb4:	d103      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8005fb6:	4b76      	ldr	r3, [pc, #472]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fba:	f000 be7f 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005fbe:	4b73      	ldr	r3, [pc, #460]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d108      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd2:	d104      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8005fd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fda:	f000 be6f 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe2:	f000 be6b 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fea:	f1a2 0120 	sub.w	r1, r2, #32
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	d158      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005ff2:	4b66      	ldr	r3, [pc, #408]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006004:	f7fe fa2e 	bl	8004464 <HAL_RCC_GetPCLK3Freq>
 8006008:	6378      	str	r0, [r7, #52]	@ 0x34
 800600a:	f000 be57 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	2b01      	cmp	r3, #1
 8006012:	d104      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006014:	f7fe f8e2 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8006018:	6378      	str	r0, [r7, #52]	@ 0x34
 800601a:	f000 be4f 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800601e:	4b5b      	ldr	r3, [pc, #364]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800602a:	d106      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	2b02      	cmp	r3, #2
 8006030:	d103      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006032:	4b57      	ldr	r3, [pc, #348]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006034:	637b      	str	r3, [r7, #52]	@ 0x34
 8006036:	f000 be41 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800603a:	4b54      	ldr	r3, [pc, #336]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800603c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b02      	cmp	r3, #2
 8006046:	d107      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	2b03      	cmp	r3, #3
 800604c:	d104      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800604e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006052:	637b      	str	r3, [r7, #52]	@ 0x34
 8006054:	f000 be32 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006058:	4b4c      	ldr	r3, [pc, #304]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b20      	cmp	r3, #32
 8006062:	d11b      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	2b04      	cmp	r3, #4
 8006068:	d118      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800606a:	4b48      	ldr	r3, [pc, #288]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006076:	4b45      	ldr	r3, [pc, #276]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	0e1b      	lsrs	r3, r3, #24
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	e006      	b.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006082:	4b42      	ldr	r3, [pc, #264]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006084:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	0e1b      	lsrs	r3, r3, #24
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	4a40      	ldr	r2, [pc, #256]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006096:	637b      	str	r3, [r7, #52]	@ 0x34
 8006098:	f000 be10 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a0:	f000 be0c 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80060a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80060ac:	430b      	orrs	r3, r1
 80060ae:	d173      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80060b0:	4b36      	ldr	r3, [pc, #216]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80060b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060b6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80060ba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c2:	d104      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80060c4:	f7fe f88a 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 80060c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80060ca:	f000 bdf7 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d4:	d108      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d6:	f107 0318 	add.w	r3, r7, #24
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff f992 	bl	8005404 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e4:	f000 bdea 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80060ee:	f7fe f977 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 80060f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80060f4:	f000 bde2 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80060fe:	d122      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006100:	4b22      	ldr	r3, [pc, #136]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b20      	cmp	r3, #32
 800610a:	d118      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800610c:	4b1f      	ldr	r3, [pc, #124]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006118:	4b1c      	ldr	r3, [pc, #112]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	0e1b      	lsrs	r3, r3, #24
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	e006      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006124:	4b19      	ldr	r3, [pc, #100]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	0e1b      	lsrs	r3, r3, #24
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	4a18      	ldr	r2, [pc, #96]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006138:	637b      	str	r3, [r7, #52]	@ 0x34
 800613a:	f000 bdbf 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	637b      	str	r3, [r7, #52]	@ 0x34
 8006142:	f000 bdbb 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006146:	4b11      	ldr	r3, [pc, #68]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800614e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006152:	d107      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800615a:	d103      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800615c:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800615e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006160:	f000 bdac 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006164:	4b09      	ldr	r3, [pc, #36]	@ (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006170:	d107      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006178:	d103      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800617a:	4b05      	ldr	r3, [pc, #20]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
 800617e:	f000 bd9d 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	637b      	str	r3, [r7, #52]	@ 0x34
 8006186:	f000 bd99 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800618a:	bf00      	nop
 800618c:	46020c00 	.word	0x46020c00
 8006190:	00f42400 	.word	0x00f42400
 8006194:	0800906c 	.word	0x0800906c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800619c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80061a0:	430b      	orrs	r3, r1
 80061a2:	d158      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80061a4:	4bad      	ldr	r3, [pc, #692]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80061a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d84b      	bhi.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80061b6:	a201      	add	r2, pc, #4	@ (adr r2, 80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061f5 	.word	0x080061f5
 80061c0:	080061d1 	.word	0x080061d1
 80061c4:	080061e3 	.word	0x080061e3
 80061c8:	080061ff 	.word	0x080061ff
 80061cc:	08006209 	.word	0x08006209
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe ffbb 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061de:	f000 bd6d 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061e2:	f107 030c 	add.w	r3, r7, #12
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fa66 	bl	80056b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061f0:	f000 bd64 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80061f4:	f7fe f8f4 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 80061f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80061fa:	f000 bd5f 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006202:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006204:	f000 bd5a 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006208:	4b94      	ldr	r3, [pc, #592]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d118      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006214:	4b91      	ldr	r3, [pc, #580]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006220:	4b8e      	ldr	r3, [pc, #568]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	0e1b      	lsrs	r3, r3, #24
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	e006      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800622c:	4b8b      	ldr	r3, [pc, #556]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800622e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	0e1b      	lsrs	r3, r3, #24
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	4a89      	ldr	r2, [pc, #548]	@ (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800623c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006240:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006242:	f000 bd3b 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800624a:	f000 bd37 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006252:	f000 bd33 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800625a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800625e:	430b      	orrs	r3, r1
 8006260:	d167      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006262:	4b7e      	ldr	r3, [pc, #504]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006268:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800626c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006274:	d036      	beq.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800627c:	d855      	bhi.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006284:	d029      	beq.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800628c:	d84d      	bhi.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006294:	d013      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800629c:	d845      	bhi.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062aa:	d13e      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe ff4d 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062ba:	f000 bcff 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062be:	f107 030c 	add.w	r3, r7, #12
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff f9f8 	bl	80056b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062cc:	f000 bcf6 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80062d0:	f7fe f886 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 80062d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80062d6:	f000 bcf1 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80062da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062e0:	f000 bcec 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80062e4:	4b5d      	ldr	r3, [pc, #372]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d118      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062f0:	4b5a      	ldr	r3, [pc, #360]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80062fc:	4b57      	ldr	r3, [pc, #348]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	0e1b      	lsrs	r3, r3, #24
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	e006      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006308:	4b54      	ldr	r3, [pc, #336]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800630a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	0e1b      	lsrs	r3, r3, #24
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	4a52      	ldr	r2, [pc, #328]	@ (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800631c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800631e:	f000 bccd 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006326:	f000 bcc9 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800632e:	f000 bcc5 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006336:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800633a:	430b      	orrs	r3, r1
 800633c:	d14c      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800633e:	4b47      	ldr	r3, [pc, #284]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006344:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006348:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	2b00      	cmp	r3, #0
 800634e:	d104      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fe f860 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8006354:	6378      	str	r0, [r7, #52]	@ 0x34
 8006356:	f000 bcb1 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006360:	d104      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006362:	f7fd ff3b 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8006366:	6378      	str	r0, [r7, #52]	@ 0x34
 8006368:	f000 bca8 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800636c:	4b3b      	ldr	r3, [pc, #236]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006378:	d107      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006380:	d103      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006382:	4b38      	ldr	r3, [pc, #224]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006384:	637b      	str	r3, [r7, #52]	@ 0x34
 8006386:	f000 bc99 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800638a:	4b34      	ldr	r3, [pc, #208]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b20      	cmp	r3, #32
 8006394:	d11c      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800639c:	d118      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800639e:	4b2f      	ldr	r3, [pc, #188]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80063aa:	4b2c      	ldr	r3, [pc, #176]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	0e1b      	lsrs	r3, r3, #24
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	e006      	b.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80063b6:	4b29      	ldr	r3, [pc, #164]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80063b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	0e1b      	lsrs	r3, r3, #24
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	4a26      	ldr	r2, [pc, #152]	@ (8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80063c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80063cc:	f000 bc76 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d4:	f000 bc72 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80063d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063dc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80063e0:	430b      	orrs	r3, r1
 80063e2:	d152      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80063e4:	4b1d      	ldr	r3, [pc, #116]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80063e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80063ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063f6:	f7fe f80d 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80063fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80063fc:	f000 bc5e 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006406:	d104      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006408:	f7fd fee8 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800640c:	6378      	str	r0, [r7, #52]	@ 0x34
 800640e:	f000 bc55 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006412:	4b12      	ldr	r3, [pc, #72]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800641a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800641e:	d107      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006426:	d103      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006428:	4b0e      	ldr	r3, [pc, #56]	@ (8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34
 800642c:	f000 bc46 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006430:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b20      	cmp	r3, #32
 800643a:	d122      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006442:	d11e      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006444:	4b05      	ldr	r3, [pc, #20]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006450:	4b02      	ldr	r3, [pc, #8]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	0e1b      	lsrs	r3, r3, #24
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	e00c      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800645c:	46020c00 	.word	0x46020c00
 8006460:	0800906c 	.word	0x0800906c
 8006464:	00f42400 	.word	0x00f42400
 8006468:	4ba1      	ldr	r3, [pc, #644]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800646a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	0e1b      	lsrs	r3, r3, #24
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	4a9f      	ldr	r2, [pc, #636]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
 800647e:	f000 bc1d 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
 8006486:	f000 bc19 	b.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800648a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006492:	430b      	orrs	r3, r1
 8006494:	d151      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006496:	4b96      	ldr	r3, [pc, #600]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800649c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80064a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80064a6:	d024      	beq.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80064ac:	d842      	bhi.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	2b80      	cmp	r3, #128	@ 0x80
 80064b2:	d00d      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	2b80      	cmp	r3, #128	@ 0x80
 80064b8:	d83c      	bhi.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	2b40      	cmp	r3, #64	@ 0x40
 80064c4:	d011      	beq.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80064c6:	e035      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80064c8:	f7fd ffcc 	bl	8004464 <HAL_RCC_GetPCLK3Freq>
 80064cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80064ce:	e3f5      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064d0:	4b87      	ldr	r3, [pc, #540]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064dc:	d102      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80064de:	4b86      	ldr	r3, [pc, #536]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80064e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80064e2:	e3eb      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064e8:	e3e8      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fd fe77 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 80064ee:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80064f0:	e3e4      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064f2:	4b7f      	ldr	r3, [pc, #508]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d117      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064fe:	4b7c      	ldr	r3, [pc, #496]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800650a:	4b79      	ldr	r3, [pc, #484]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	0e1b      	lsrs	r3, r3, #24
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	e006      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006516:	4b76      	ldr	r3, [pc, #472]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	0e1b      	lsrs	r3, r3, #24
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	4a73      	ldr	r2, [pc, #460]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800652c:	e3c6      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006532:	e3c3      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006538:	e3c0      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800653a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800653e:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006542:	430b      	orrs	r3, r1
 8006544:	d147      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006546:	4b6a      	ldr	r3, [pc, #424]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800654c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006550:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006558:	f7fd ff5c 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 800655c:	6378      	str	r0, [r7, #52]	@ 0x34
 800655e:	e3ad      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006566:	d103      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006568:	f7fd fe38 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800656c:	6378      	str	r0, [r7, #52]	@ 0x34
 800656e:	e3a5      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006570:	4b5f      	ldr	r3, [pc, #380]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657c:	d106      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006584:	d102      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006586:	4b5c      	ldr	r3, [pc, #368]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	e397      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800658c:	4b58      	ldr	r3, [pc, #352]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b20      	cmp	r3, #32
 8006596:	d11b      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800659e:	d117      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065a0:	4b53      	ldr	r3, [pc, #332]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80065ac:	4b50      	ldr	r3, [pc, #320]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	0e1b      	lsrs	r3, r3, #24
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	e006      	b.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80065b8:	4b4d      	ldr	r3, [pc, #308]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	0e1b      	lsrs	r3, r3, #24
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	4a4b      	ldr	r2, [pc, #300]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80065c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ce:	e375      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d4:	e372      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80065d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065da:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80065de:	430b      	orrs	r3, r1
 80065e0:	d164      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80065e2:	4b43      	ldr	r3, [pc, #268]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d120      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065f4:	4b3e      	ldr	r3, [pc, #248]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d117      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006600:	4b3b      	ldr	r3, [pc, #236]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800660c:	4b38      	ldr	r3, [pc, #224]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	0e1b      	lsrs	r3, r3, #24
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	e006      	b.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006618:	4b35      	ldr	r3, [pc, #212]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800661a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800661e:	041b      	lsls	r3, r3, #16
 8006620:	0e1b      	lsrs	r3, r3, #24
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	4a33      	ldr	r2, [pc, #204]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
 800662e:	e345      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
 8006634:	e342      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006636:	4b2e      	ldr	r3, [pc, #184]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800663c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006644:	d112      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800664c:	d10e      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800664e:	4b28      	ldr	r3, [pc, #160]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800665c:	d102      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800665e:	23fa      	movs	r3, #250	@ 0xfa
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006662:	e32b      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006664:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006668:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800666a:	e327      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800666c:	4b20      	ldr	r3, [pc, #128]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006678:	d106      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800667a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006680:	d102      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006682:	4b1d      	ldr	r3, [pc, #116]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
 8006686:	e319      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006688:	4b19      	ldr	r3, [pc, #100]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800668a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b02      	cmp	r3, #2
 8006694:	d107      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800669c:	d103      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800669e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a4:	e30a      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	e307      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80066ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80066b4:	430b      	orrs	r3, r1
 80066b6:	d16b      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066b8:	4b0d      	ldr	r3, [pc, #52]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80066ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066be:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80066c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d127      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066ca:	4b09      	ldr	r3, [pc, #36]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d11e      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066d6:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00c      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80066e2:	4b03      	ldr	r3, [pc, #12]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	0e1b      	lsrs	r3, r3, #24
 80066e8:	f003 030f 	and.w	r3, r3, #15
 80066ec:	e00d      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80066ee:	bf00      	nop
 80066f0:	46020c00 	.word	0x46020c00
 80066f4:	0800906c 	.word	0x0800906c
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	4b94      	ldr	r3, [pc, #592]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	0e1b      	lsrs	r3, r3, #24
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	4a92      	ldr	r2, [pc, #584]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800670c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
 8006712:	e2d3      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	637b      	str	r3, [r7, #52]	@ 0x34
 8006718:	e2d0      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800671a:	4b8d      	ldr	r3, [pc, #564]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800671c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006728:	d112      	bne.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006730:	d10e      	bne.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006732:	4b87      	ldr	r3, [pc, #540]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800673c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006740:	d102      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006742:	23fa      	movs	r3, #250	@ 0xfa
 8006744:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006746:	e2b9      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006748:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800674e:	e2b5      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006750:	4b7f      	ldr	r3, [pc, #508]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675c:	d106      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006764:	d102      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006766:	4b7c      	ldr	r3, [pc, #496]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
 800676a:	e2a7      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800676c:	4b78      	ldr	r3, [pc, #480]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800676e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d107      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006780:	d103      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006786:	637b      	str	r3, [r7, #52]	@ 0x34
 8006788:	e298      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	637b      	str	r3, [r7, #52]	@ 0x34
 800678e:	e295      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006794:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006798:	430b      	orrs	r3, r1
 800679a:	d147      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800679c:	4b6c      	ldr	r3, [pc, #432]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800679e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067a2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80067a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067ae:	f7fd fe31 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80067b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80067b4:	e282      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80067b6:	4b66      	ldr	r3, [pc, #408]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80067b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067c4:	d112      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067cc:	d10e      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80067ce:	4b60      	ldr	r3, [pc, #384]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80067d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067dc:	d102      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80067de:	23fa      	movs	r3, #250	@ 0xfa
 80067e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80067e2:	e26b      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80067e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80067ea:	e267      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80067ec:	4b58      	ldr	r3, [pc, #352]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f8:	d106      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006800:	d102      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006802:	4b55      	ldr	r3, [pc, #340]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006804:	637b      	str	r3, [r7, #52]	@ 0x34
 8006806:	e259      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006808:	4b51      	ldr	r3, [pc, #324]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800680a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b02      	cmp	r3, #2
 8006814:	d107      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800681c:	d103      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800681e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006822:	637b      	str	r3, [r7, #52]	@ 0x34
 8006824:	e24a      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
 800682a:	e247      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800682c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006830:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006834:	430b      	orrs	r3, r1
 8006836:	d12d      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006838:	4b45      	ldr	r3, [pc, #276]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800683a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800683e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006842:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006844:	4b42      	ldr	r3, [pc, #264]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006850:	d105      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006858:	4b3f      	ldr	r3, [pc, #252]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
 800685c:	e22e      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006864:	d107      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fc70 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	637b      	str	r3, [r7, #52]	@ 0x34
 8006874:	e222      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800687c:	d107      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800687e:	f107 0318 	add.w	r3, r7, #24
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fdbe 	bl	8005404 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
 800688c:	e216      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	637b      	str	r3, [r7, #52]	@ 0x34
 8006892:	e213      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006898:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800689c:	430b      	orrs	r3, r1
 800689e:	d15d      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80068a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80068a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80068aa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068b2:	d028      	beq.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80068b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068ba:	d845      	bhi.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80068bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068c2:	d013      	beq.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ca:	d83d      	bhi.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d8:	d004      	beq.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80068da:	e035      	b.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80068dc:	f7fd fdae 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 80068e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068e2:	e1eb      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80068e4:	f7fd fc7a 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 80068e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068ea:	e1e7      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ec:	4b18      	ldr	r3, [pc, #96]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f8:	d102      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80068fa:	4b17      	ldr	r3, [pc, #92]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068fe:	e1dd      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006904:	e1da      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006906:	4b12      	ldr	r3, [pc, #72]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b20      	cmp	r3, #32
 8006910:	d117      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006912:	4b0f      	ldr	r3, [pc, #60]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800691e:	4b0c      	ldr	r3, [pc, #48]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	0e1b      	lsrs	r3, r3, #24
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	e006      	b.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800692a:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800692c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	0e1b      	lsrs	r3, r3, #24
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	4a06      	ldr	r2, [pc, #24]	@ (8006954 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800693a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006940:	e1bc      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006946:	e1b9      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800694c:	e1b6      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800694e:	bf00      	nop
 8006950:	46020c00 	.word	0x46020c00
 8006954:	0800906c 	.word	0x0800906c
 8006958:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800695c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006960:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006964:	430b      	orrs	r3, r1
 8006966:	d156      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006968:	4ba5      	ldr	r3, [pc, #660]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800696a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800696e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006972:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800697a:	d028      	beq.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006982:	d845      	bhi.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800698a:	d013      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006992:	d83d      	bhi.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a0:	d004      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80069a2:	e035      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fd fd36 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80069a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069aa:	e187      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80069ac:	f7fd fc16 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 80069b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069b2:	e183      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b4:	4b92      	ldr	r3, [pc, #584]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c0:	d102      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80069c2:	4b90      	ldr	r3, [pc, #576]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80069c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069c6:	e179      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069cc:	e176      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069ce:	4b8c      	ldr	r3, [pc, #560]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d117      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069da:	4b89      	ldr	r3, [pc, #548]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80069e6:	4b86      	ldr	r3, [pc, #536]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	0e1b      	lsrs	r3, r3, #24
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80069f2:	4b83      	ldr	r3, [pc, #524]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	0e1b      	lsrs	r3, r3, #24
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	4a81      	ldr	r2, [pc, #516]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a08:	e158      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a0e:	e155      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a14:	e152      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	d177      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006a22:	4b77      	ldr	r3, [pc, #476]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a28:	f003 0318 	and.w	r3, r3, #24
 8006a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	2b18      	cmp	r3, #24
 8006a32:	d86b      	bhi.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006a34:	a201      	add	r2, pc, #4	@ (adr r2, 8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006aa1 	.word	0x08006aa1
 8006a40:	08006b0d 	.word	0x08006b0d
 8006a44:	08006b0d 	.word	0x08006b0d
 8006a48:	08006b0d 	.word	0x08006b0d
 8006a4c:	08006b0d 	.word	0x08006b0d
 8006a50:	08006b0d 	.word	0x08006b0d
 8006a54:	08006b0d 	.word	0x08006b0d
 8006a58:	08006b0d 	.word	0x08006b0d
 8006a5c:	08006aa9 	.word	0x08006aa9
 8006a60:	08006b0d 	.word	0x08006b0d
 8006a64:	08006b0d 	.word	0x08006b0d
 8006a68:	08006b0d 	.word	0x08006b0d
 8006a6c:	08006b0d 	.word	0x08006b0d
 8006a70:	08006b0d 	.word	0x08006b0d
 8006a74:	08006b0d 	.word	0x08006b0d
 8006a78:	08006b0d 	.word	0x08006b0d
 8006a7c:	08006ab1 	.word	0x08006ab1
 8006a80:	08006b0d 	.word	0x08006b0d
 8006a84:	08006b0d 	.word	0x08006b0d
 8006a88:	08006b0d 	.word	0x08006b0d
 8006a8c:	08006b0d 	.word	0x08006b0d
 8006a90:	08006b0d 	.word	0x08006b0d
 8006a94:	08006b0d 	.word	0x08006b0d
 8006a98:	08006b0d 	.word	0x08006b0d
 8006a9c:	08006acb 	.word	0x08006acb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006aa0:	f7fd fce0 	bl	8004464 <HAL_RCC_GetPCLK3Freq>
 8006aa4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006aa6:	e109      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006aa8:	f7fd fb98 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8006aac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006aae:	e105      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ab0:	4b53      	ldr	r3, [pc, #332]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abc:	d102      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006abe:	4b51      	ldr	r3, [pc, #324]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006ac0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ac2:	e0fb      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ac8:	e0f8      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006aca:	4b4d      	ldr	r3, [pc, #308]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	d117      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006ae2:	4b47      	ldr	r3, [pc, #284]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	0e1b      	lsrs	r3, r3, #24
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	e006      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006aee:	4b44      	ldr	r3, [pc, #272]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	0e1b      	lsrs	r3, r3, #24
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	4a42      	ldr	r2, [pc, #264]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b04:	e0da      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b0a:	e0d7      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b10:	e0d4      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b16:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	d155      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006b1e:	4b38      	ldr	r3, [pc, #224]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006b20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006b28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b30:	d013      	beq.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b38:	d844      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b40:	d013      	beq.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b48:	d83c      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d014      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b56:	d014      	beq.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006b58:	e034      	b.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b5a:	f107 0318 	add.w	r3, r7, #24
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fc50 	bl	8005404 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b68:	e0a8      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe faee 	bl	8005150 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b78:	e0a0      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006b7a:	f7fd fb2f 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8006b7e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b80:	e09c      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b82:	4b1f      	ldr	r3, [pc, #124]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d117      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006b9a:	4b19      	ldr	r3, [pc, #100]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	0e1b      	lsrs	r3, r3, #24
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	e006      	b.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006ba6:	4b16      	ldr	r3, [pc, #88]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bac:	041b      	lsls	r3, r3, #16
 8006bae:	0e1b      	lsrs	r3, r3, #24
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	4a14      	ldr	r2, [pc, #80]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bbc:	e07e      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bc2:	e07b      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bc8:	e078      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bce:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	d138      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006be0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006be2:	4b07      	ldr	r3, [pc, #28]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d10d      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfc:	e05e      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006bfe:	bf00      	nop
 8006c00:	46020c00 	.word	0x46020c00
 8006c04:	00f42400 	.word	0x00f42400
 8006c08:	0800906c 	.word	0x0800906c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c1a:	d112      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c22:	d10e      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c24:	4b28      	ldr	r3, [pc, #160]	@ (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c32:	d102      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8006c34:	23fa      	movs	r3, #250	@ 0xfa
 8006c36:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c38:	e040      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c3a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c40:	e03c      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c46:	e039      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c4c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006c50:	430b      	orrs	r3, r1
 8006c52:	d131      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006c54:	4b1c      	ldr	r3, [pc, #112]	@ (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006c5e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006c60:	4b19      	ldr	r3, [pc, #100]	@ (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c6c:	d105      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8006c74:	4b15      	ldr	r3, [pc, #84]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c78:	e020      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006c7a:	4b13      	ldr	r3, [pc, #76]	@ (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c86:	d106      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c8e:	d102      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006c90:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c94:	e012      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006c96:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006caa:	d102      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006cac:	4b09      	ldr	r3, [pc, #36]	@ (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb0:	e004      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb6:	e001      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3738      	adds	r7, #56	@ 0x38
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	46020c00 	.word	0x46020c00
 8006ccc:	02dc6c00 	.word	0x02dc6c00
 8006cd0:	016e3600 	.word	0x016e3600
 8006cd4:	00f42400 	.word	0x00f42400

08006cd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006ce0:	4b47      	ldr	r3, [pc, #284]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a46      	ldr	r2, [pc, #280]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006ce6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cec:	f7fa fdb6 	bl	800185c <HAL_GetTick>
 8006cf0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cf2:	e008      	b.n	8006d06 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cf4:	f7fa fdb2 	bl	800185c <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d901      	bls.n	8006d06 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e077      	b.n	8006df6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d06:	4b3e      	ldr	r3, [pc, #248]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f0      	bne.n	8006cf4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006d12:	4b3b      	ldr	r3, [pc, #236]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6811      	ldr	r1, [r2, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6852      	ldr	r2, [r2, #4]
 8006d26:	3a01      	subs	r2, #1
 8006d28:	0212      	lsls	r2, r2, #8
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	4934      	ldr	r1, [pc, #208]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006d32:	4b33      	ldr	r3, [pc, #204]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d36:	4b33      	ldr	r3, [pc, #204]	@ (8006e04 <RCCEx_PLL2_Config+0x12c>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6892      	ldr	r2, [r2, #8]
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	68d2      	ldr	r2, [r2, #12]
 8006d48:	3a01      	subs	r2, #1
 8006d4a:	0252      	lsls	r2, r2, #9
 8006d4c:	b292      	uxth	r2, r2
 8006d4e:	4311      	orrs	r1, r2
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6912      	ldr	r2, [r2, #16]
 8006d54:	3a01      	subs	r2, #1
 8006d56:	0412      	lsls	r2, r2, #16
 8006d58:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006d5c:	4311      	orrs	r1, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6952      	ldr	r2, [r2, #20]
 8006d62:	3a01      	subs	r2, #1
 8006d64:	0612      	lsls	r2, r2, #24
 8006d66:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	4924      	ldr	r1, [pc, #144]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006d72:	4b23      	ldr	r3, [pc, #140]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	f023 020c 	bic.w	r2, r3, #12
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	4920      	ldr	r1, [pc, #128]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006d84:	4b1e      	ldr	r3, [pc, #120]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	491c      	ldr	r1, [pc, #112]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006d92:	4b1b      	ldr	r3, [pc, #108]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	4a1a      	ldr	r2, [pc, #104]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006d98:	f023 0310 	bic.w	r3, r3, #16
 8006d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d9e:	4b18      	ldr	r3, [pc, #96]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006da6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	69d2      	ldr	r2, [r2, #28]
 8006dae:	00d2      	lsls	r2, r2, #3
 8006db0:	4913      	ldr	r1, [pc, #76]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006db6:	4b12      	ldr	r3, [pc, #72]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	4a11      	ldr	r2, [pc, #68]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006dbc:	f043 0310 	orr.w	r3, r3, #16
 8006dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006dc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dcc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006dce:	f7fa fd45 	bl	800185c <HAL_GetTick>
 8006dd2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dd4:	e008      	b.n	8006de8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dd6:	f7fa fd41 	bl	800185c <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e006      	b.n	8006df6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006de8:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <RCCEx_PLL2_Config+0x128>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0f0      	beq.n	8006dd6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0

}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	46020c00 	.word	0x46020c00
 8006e04:	80800000 	.word	0x80800000

08006e08 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006e10:	4b47      	ldr	r3, [pc, #284]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a46      	ldr	r2, [pc, #280]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e1a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e1c:	f7fa fd1e 	bl	800185c <HAL_GetTick>
 8006e20:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e22:	e008      	b.n	8006e36 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e24:	f7fa fd1a 	bl	800185c <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e077      	b.n	8006f26 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e36:	4b3e      	ldr	r3, [pc, #248]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f0      	bne.n	8006e24 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006e42:	4b3b      	ldr	r3, [pc, #236]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6811      	ldr	r1, [r2, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6852      	ldr	r2, [r2, #4]
 8006e56:	3a01      	subs	r2, #1
 8006e58:	0212      	lsls	r2, r2, #8
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	4934      	ldr	r1, [pc, #208]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	630b      	str	r3, [r1, #48]	@ 0x30
 8006e62:	4b33      	ldr	r3, [pc, #204]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e66:	4b33      	ldr	r3, [pc, #204]	@ (8006f34 <RCCEx_PLL3_Config+0x12c>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6892      	ldr	r2, [r2, #8]
 8006e6e:	3a01      	subs	r2, #1
 8006e70:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	68d2      	ldr	r2, [r2, #12]
 8006e78:	3a01      	subs	r2, #1
 8006e7a:	0252      	lsls	r2, r2, #9
 8006e7c:	b292      	uxth	r2, r2
 8006e7e:	4311      	orrs	r1, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6912      	ldr	r2, [r2, #16]
 8006e84:	3a01      	subs	r2, #1
 8006e86:	0412      	lsls	r2, r2, #16
 8006e88:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006e8c:	4311      	orrs	r1, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6952      	ldr	r2, [r2, #20]
 8006e92:	3a01      	subs	r2, #1
 8006e94:	0612      	lsls	r2, r2, #24
 8006e96:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	4924      	ldr	r1, [pc, #144]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006ea2:	4b23      	ldr	r3, [pc, #140]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea6:	f023 020c 	bic.w	r2, r3, #12
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	4920      	ldr	r1, [pc, #128]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	491c      	ldr	r1, [pc, #112]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ec8:	f023 0310 	bic.w	r3, r3, #16
 8006ecc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ece:	4b18      	ldr	r3, [pc, #96]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ed6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	69d2      	ldr	r2, [r2, #28]
 8006ede:	00d2      	lsls	r2, r2, #3
 8006ee0:	4913      	ldr	r1, [pc, #76]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006ee6:	4b12      	ldr	r3, [pc, #72]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eea:	4a11      	ldr	r2, [pc, #68]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006eec:	f043 0310 	orr.w	r3, r3, #16
 8006ef0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006efc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006efe:	f7fa fcad 	bl	800185c <HAL_GetTick>
 8006f02:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f04:	e008      	b.n	8006f18 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f06:	f7fa fca9 	bl	800185c <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e006      	b.n	8006f26 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f18:	4b05      	ldr	r3, [pc, #20]	@ (8006f30 <RCCEx_PLL3_Config+0x128>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0f0      	beq.n	8006f06 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	46020c00 	.word	0x46020c00
 8006f34:	80800000 	.word	0x80800000

08006f38 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e0fb      	b.n	8007142 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7f      	ldr	r2, [pc, #508]	@ (800714c <HAL_SPI_Init+0x214>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_SPI_Init+0x26>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a7d      	ldr	r2, [pc, #500]	@ (8007150 <HAL_SPI_Init+0x218>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	e000      	b.n	8006f60 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006f5e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a78      	ldr	r2, [pc, #480]	@ (800714c <HAL_SPI_Init+0x214>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_SPI_Init+0x42>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a76      	ldr	r2, [pc, #472]	@ (8007150 <HAL_SPI_Init+0x218>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d105      	bne.n	8006f86 <HAL_SPI_Init+0x4e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b0f      	cmp	r3, #15
 8006f80:	d901      	bls.n	8006f86 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e0dd      	b.n	8007142 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fff4 	bl	8007f74 <SPI_GetPacketSize>
 8006f8c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a6e      	ldr	r2, [pc, #440]	@ (800714c <HAL_SPI_Init+0x214>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_SPI_Init+0x6a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a6c      	ldr	r2, [pc, #432]	@ (8007150 <HAL_SPI_Init+0x218>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d102      	bne.n	8006fa8 <HAL_SPI_Init+0x70>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d816      	bhi.n	8006fd6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006fac:	4a69      	ldr	r2, [pc, #420]	@ (8007154 <HAL_SPI_Init+0x21c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a68      	ldr	r2, [pc, #416]	@ (8007158 <HAL_SPI_Init+0x220>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_SPI_Init+0x98>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a66      	ldr	r2, [pc, #408]	@ (800715c <HAL_SPI_Init+0x224>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_SPI_Init+0x98>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a65      	ldr	r2, [pc, #404]	@ (8007160 <HAL_SPI_Init+0x228>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d104      	bne.n	8006fda <HAL_SPI_Init+0xa2>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b10      	cmp	r3, #16
 8006fd4:	d901      	bls.n	8006fda <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0b3      	b.n	8007142 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fa f820 	bl	8001034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007016:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007020:	d119      	bne.n	8007056 <HAL_SPI_Init+0x11e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800702a:	d103      	bne.n	8007034 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007044:	d107      	bne.n	8007056 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007054:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00f      	beq.n	8007082 <HAL_SPI_Init+0x14a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	2b06      	cmp	r3, #6
 8007068:	d90b      	bls.n	8007082 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	e007      	b.n	8007092 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007090:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69da      	ldr	r2, [r3, #28]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	431a      	orrs	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a4:	ea42 0103 	orr.w	r1, r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	431a      	orrs	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fe:	ea42 0103 	orr.w	r1, r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	46002000 	.word	0x46002000
 8007150:	56002000 	.word	0x56002000
 8007154:	40013000 	.word	0x40013000
 8007158:	50013000 	.word	0x50013000
 800715c:	40003800 	.word	0x40003800
 8007160:	50003800 	.word	0x50003800

08007164 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3320      	adds	r3, #32
 800717a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a90      	ldr	r2, [pc, #576]	@ (80073c4 <HAL_SPI_Transmit+0x260>)
 8007182:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007184:	f7fa fb6a 	bl	800185c <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b01      	cmp	r3, #1
 8007194:	d001      	beq.n	800719a <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
 8007198:	e1f4      	b.n	8007584 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_Transmit+0x42>
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e1ec      	b.n	8007584 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_SPI_Transmit+0x54>
 80071b4:	2302      	movs	r3, #2
 80071b6:	e1e5      	b.n	8007584 <HAL_SPI_Transmit+0x420>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2203      	movs	r2, #3
 80071c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	88fa      	ldrh	r2, [r7, #6]
 80071da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	88fa      	ldrh	r2, [r7, #6]
 80071e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007210:	d108      	bne.n	8007224 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e009      	b.n	8007238 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007236:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	041b      	lsls	r3, r3, #16
 8007242:	88f9      	ldrh	r1, [r7, #6]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	430b      	orrs	r3, r1
 800724a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10c      	bne.n	8007284 <HAL_SPI_Transmit+0x120>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007272:	d107      	bne.n	8007284 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b0f      	cmp	r3, #15
 800728a:	d95b      	bls.n	8007344 <HAL_SPI_Transmit+0x1e0>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a4d      	ldr	r2, [pc, #308]	@ (80073c8 <HAL_SPI_Transmit+0x264>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d04f      	beq.n	8007336 <HAL_SPI_Transmit+0x1d2>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a4c      	ldr	r2, [pc, #304]	@ (80073cc <HAL_SPI_Transmit+0x268>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d04a      	beq.n	8007336 <HAL_SPI_Transmit+0x1d2>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a4a      	ldr	r2, [pc, #296]	@ (80073d0 <HAL_SPI_Transmit+0x26c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d045      	beq.n	8007336 <HAL_SPI_Transmit+0x1d2>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a49      	ldr	r2, [pc, #292]	@ (80073d4 <HAL_SPI_Transmit+0x270>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d147      	bne.n	8007344 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80072b4:	e03f      	b.n	8007336 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d114      	bne.n	80072ee <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072d4:	1d1a      	adds	r2, r3, #4
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80072ec:	e023      	b.n	8007336 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ee:	f7fa fab5 	bl	800185c <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d803      	bhi.n	8007306 <HAL_SPI_Transmit+0x1a2>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d102      	bne.n	800730c <HAL_SPI_Transmit+0x1a8>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d114      	bne.n	8007336 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fd63 	bl	8007dd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007318:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e126      	b.n	8007584 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1b9      	bne.n	80072b6 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007342:	e0f9      	b.n	8007538 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b07      	cmp	r3, #7
 800734a:	f240 80ee 	bls.w	800752a <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800734e:	e067      	b.n	8007420 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b02      	cmp	r3, #2
 800735c:	d13c      	bne.n	80073d8 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d918      	bls.n	800739c <HAL_SPI_Transmit+0x238>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d014      	beq.n	800739c <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6812      	ldr	r2, [r2, #0]
 800737c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007382:	1d1a      	adds	r2, r3, #4
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b02      	subs	r3, #2
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800739a:	e041      	b.n	8007420 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a0:	881a      	ldrh	r2, [r3, #0]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073aa:	1c9a      	adds	r2, r3, #2
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80073c2:	e02d      	b.n	8007420 <HAL_SPI_Transmit+0x2bc>
 80073c4:	46002000 	.word	0x46002000
 80073c8:	40013000 	.word	0x40013000
 80073cc:	50013000 	.word	0x50013000
 80073d0:	40003800 	.word	0x40003800
 80073d4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073d8:	f7fa fa40 	bl	800185c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d803      	bhi.n	80073f0 <HAL_SPI_Transmit+0x28c>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d102      	bne.n	80073f6 <HAL_SPI_Transmit+0x292>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d114      	bne.n	8007420 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fcee 	bl	8007dd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007402:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e0b1      	b.n	8007584 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007426:	b29b      	uxth	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d191      	bne.n	8007350 <HAL_SPI_Transmit+0x1ec>
 800742c:	e084      	b.n	8007538 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b02      	cmp	r3, #2
 800743a:	d152      	bne.n	80074e2 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b03      	cmp	r3, #3
 8007446:	d918      	bls.n	800747a <HAL_SPI_Transmit+0x316>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800744c:	2b40      	cmp	r3, #64	@ 0x40
 800744e:	d914      	bls.n	800747a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007460:	1d1a      	adds	r2, r3, #4
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b04      	subs	r3, #4
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007478:	e057      	b.n	800752a <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b01      	cmp	r3, #1
 8007484:	d917      	bls.n	80074b6 <HAL_SPI_Transmit+0x352>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d013      	beq.n	80074b6 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007492:	881a      	ldrh	r2, [r3, #0]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800749c:	1c9a      	adds	r2, r3, #2
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b02      	subs	r3, #2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80074b4:	e039      	b.n	800752a <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3320      	adds	r3, #32
 80074c0:	7812      	ldrb	r2, [r2, #0]
 80074c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80074e0:	e023      	b.n	800752a <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074e2:	f7fa f9bb 	bl	800185c <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d803      	bhi.n	80074fa <HAL_SPI_Transmit+0x396>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d102      	bne.n	8007500 <HAL_SPI_Transmit+0x39c>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d114      	bne.n	800752a <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 fc69 	bl	8007dd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800750c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e02c      	b.n	8007584 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	f47f af7b 	bne.w	800742e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	2108      	movs	r1, #8
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fce8 	bl	8007f18 <SPI_WaitOnFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d007      	beq.n	800755e <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 fc3a 	bl	8007dd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007582:	2300      	movs	r3, #0
  }
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a96      	ldr	r2, [pc, #600]	@ (80077f8 <HAL_SPI_Transmit_DMA+0x26c>)
 80075a0:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d001      	beq.n	80075b2 <HAL_SPI_Transmit_DMA+0x26>
  {
    return HAL_BUSY;
 80075ae:	2302      	movs	r3, #2
 80075b0:	e1a3      	b.n	80078fa <HAL_SPI_Transmit_DMA+0x36e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_SPI_Transmit_DMA+0x32>
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_SPI_Transmit_DMA+0x36>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e19b      	b.n	80078fa <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_SPI_Transmit_DMA+0x44>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e194      	b.n	80078fa <HAL_SPI_Transmit_DMA+0x36e>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2203      	movs	r2, #3
 80075dc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	88fa      	ldrh	r2, [r7, #6]
 80075fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007628:	d108      	bne.n	800763c <HAL_SPI_Transmit_DMA+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e009      	b.n	8007650 <HAL_SPI_Transmit_DMA+0xc4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800764e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	2b0f      	cmp	r3, #15
 8007656:	d919      	bls.n	800768c <HAL_SPI_Transmit_DMA+0x100>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d013      	beq.n	800768c <HAL_SPI_Transmit_DMA+0x100>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8007668:	4a64      	ldr	r2, [pc, #400]	@ (80077fc <HAL_SPI_Transmit_DMA+0x270>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d018      	beq.n	80076a0 <HAL_SPI_Transmit_DMA+0x114>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a63      	ldr	r2, [pc, #396]	@ (8007800 <HAL_SPI_Transmit_DMA+0x274>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <HAL_SPI_Transmit_DMA+0x114>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a61      	ldr	r2, [pc, #388]	@ (8007804 <HAL_SPI_Transmit_DMA+0x278>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00e      	beq.n	80076a0 <HAL_SPI_Transmit_DMA+0x114>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a60      	ldr	r2, [pc, #384]	@ (8007808 <HAL_SPI_Transmit_DMA+0x27c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d009      	beq.n	80076a0 <HAL_SPI_Transmit_DMA+0x114>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007690:	2b07      	cmp	r3, #7
 8007692:	d90b      	bls.n	80076ac <HAL_SPI_Transmit_DMA+0x120>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d105      	bne.n	80076ac <HAL_SPI_Transmit_DMA+0x120>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e126      	b.n	80078fa <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b07      	cmp	r3, #7
 80076b2:	d820      	bhi.n	80076f6 <HAL_SPI_Transmit_DMA+0x16a>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d109      	bne.n	80076d4 <HAL_SPI_Transmit_DMA+0x148>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3301      	adds	r3, #1
 80076ca:	105b      	asrs	r3, r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d11e      	bne.n	800771e <HAL_SPI_Transmit_DMA+0x192>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3303      	adds	r3, #3
 80076ea:	109b      	asrs	r3, r3, #2
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076f4:	e013      	b.n	800771e <HAL_SPI_Transmit_DMA+0x192>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b0f      	cmp	r3, #15
 80076fc:	d80f      	bhi.n	800771e <HAL_SPI_Transmit_DMA+0x192>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d109      	bne.n	800771e <HAL_SPI_Transmit_DMA+0x192>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007710:	b29b      	uxth	r3, r3
 8007712:	3301      	adds	r3, #1
 8007714:	105b      	asrs	r3, r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007724:	4a39      	ldr	r2, [pc, #228]	@ (800780c <HAL_SPI_Transmit_DMA+0x280>)
 8007726:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800772e:	4a38      	ldr	r2, [pc, #224]	@ (8007810 <HAL_SPI_Transmit_DMA+0x284>)
 8007730:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007738:	4a36      	ldr	r2, [pc, #216]	@ (8007814 <HAL_SPI_Transmit_DMA+0x288>)
 800773a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007742:	2200      	movs	r2, #0
 8007744:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007754:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2b07      	cmp	r3, #7
 800775c:	d804      	bhi.n	8007768 <HAL_SPI_Transmit_DMA+0x1dc>
  {
    hspi->TxXferCount = Size;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	88fa      	ldrh	r2, [r7, #6]
 8007762:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007766:	e010      	b.n	800778a <HAL_SPI_Transmit_DMA+0x1fe>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	2b0f      	cmp	r3, #15
 800776e:	d806      	bhi.n	800777e <HAL_SPI_Transmit_DMA+0x1f2>
  {
    hspi->TxXferCount = Size * 2U;
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800777c:	e005      	b.n	800778a <HAL_SPI_Transmit_DMA+0x1fe>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007796:	2b00      	cmp	r3, #0
 8007798:	d03e      	beq.n	8007818 <HAL_SPI_Transmit_DMA+0x28c>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d024      	beq.n	80077f0 <HAL_SPI_Transmit_DMA+0x264>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f103 0220 	add.w	r2, r3, #32
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fa ffbb 	bl	8002760 <HAL_DMAEx_List_Start_IT>
 80077ea:	4603      	mov	r3, r0
 80077ec:	75fb      	strb	r3, [r7, #23]
 80077ee:	e025      	b.n	800783c <HAL_SPI_Transmit_DMA+0x2b0>
    }
    else
    {
      status = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	75fb      	strb	r3, [r7, #23]
 80077f4:	e022      	b.n	800783c <HAL_SPI_Transmit_DMA+0x2b0>
 80077f6:	bf00      	nop
 80077f8:	46002000 	.word	0x46002000
 80077fc:	40013000 	.word	0x40013000
 8007800:	50013000 	.word	0x50013000
 8007804:	40003800 	.word	0x40003800
 8007808:	50003800 	.word	0x50003800
 800780c:	08007d43 	.word	0x08007d43
 8007810:	08007cfd 	.word	0x08007cfd
 8007814:	08007d5f 	.word	0x08007d5f
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007822:	4619      	mov	r1, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3320      	adds	r3, #32
 800782a:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007832:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007834:	f7fa fabc 	bl	8001db0 <HAL_DMA_Start_IT>
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d011      	beq.n	8007866 <HAL_SPI_Transmit_DMA+0x2da>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007848:	f043 0210 	orr.w	r2, r3, #16
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e049      	b.n	80078fa <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800786c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800786e:	2b81      	cmp	r3, #129	@ 0x81
 8007870:	d108      	bne.n	8007884 <HAL_SPI_Transmit_DMA+0x2f8>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	041b      	lsls	r3, r3, #16
 8007880:	6053      	str	r3, [r2, #4]
 8007882:	e009      	b.n	8007898 <HAL_SPI_Transmit_DMA+0x30c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	0c1b      	lsrs	r3, r3, #16
 800788c:	041b      	lsls	r3, r3, #16
 800788e:	88f9      	ldrh	r1, [r7, #6]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	6812      	ldr	r2, [r2, #0]
 8007894:	430b      	orrs	r3, r1
 8007896:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078a6:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80078b6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10c      	bne.n	80078f0 <HAL_SPI_Transmit_DMA+0x364>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078de:	d107      	bne.n	80078f0 <HAL_SPI_Transmit_DMA+0x364>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078ee:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop

08007904 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	@ 0x28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800791c:	6a3a      	ldr	r2, [r7, #32]
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4013      	ands	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800792c:	2300      	movs	r3, #0
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007936:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3330      	adds	r3, #48	@ 0x30
 800793e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007946:	2b00      	cmp	r3, #0
 8007948:	d010      	beq.n	800796c <HAL_SPI_IRQHandler+0x68>
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007962:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9bf 	bl	8007ce8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800796a:	e19a      	b.n	8007ca2 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d113      	bne.n	800799e <HAL_SPI_IRQHandler+0x9a>
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10e      	bne.n	800799e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
    handled = 1UL;
 800799a:	2301      	movs	r3, #1
 800799c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10f      	bne.n	80079c8 <HAL_SPI_IRQHandler+0xc4>
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d105      	bne.n	80079c8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	4798      	blx	r3
    handled = 1UL;
 80079c4:	2301      	movs	r3, #1
 80079c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10f      	bne.n	80079f2 <HAL_SPI_IRQHandler+0xee>
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
    handled = 1UL;
 80079ee:	2301      	movs	r3, #1
 80079f0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f040 814f 	bne.w	8007c98 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 808b 	beq.w	8007b1c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0208 	orr.w	r2, r2, #8
 8007a14:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0210 	orr.w	r2, r2, #16
 8007a24:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a34:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0208 	bic.w	r2, r2, #8
 8007a44:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d13d      	bne.n	8007ad0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007a54:	e036      	b.n	8007ac4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	2b0f      	cmp	r3, #15
 8007a5c:	d90b      	bls.n	8007a76 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a66:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a68:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a6e:	1d1a      	adds	r2, r3, #4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007a74:	e01d      	b.n	8007ab2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	2b07      	cmp	r3, #7
 8007a7c:	d90b      	bls.n	8007a96 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	8812      	ldrh	r2, [r2, #0]
 8007a86:	b292      	uxth	r2, r2
 8007a88:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a8e:	1c9a      	adds	r2, r3, #2
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007a94:	e00d      	b.n	8007ab2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa2:	7812      	ldrb	r2, [r2, #0]
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1c2      	bne.n	8007a56 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f981 	bl	8007dd8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7f9 f877 	bl	8000bdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007aee:	e0d8      	b.n	8007ca2 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007af0:	7cfb      	ldrb	r3, [r7, #19]
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	d103      	bne.n	8007afe <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f8e2 	bl	8007cc0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007afc:	e0ce      	b.n	8007c9c <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007afe:	7cfb      	ldrb	r3, [r7, #19]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d103      	bne.n	8007b0c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f8d1 	bl	8007cac <HAL_SPI_RxCpltCallback>
    return;
 8007b0a:	e0c7      	b.n	8007c9c <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007b0c:	7cfb      	ldrb	r3, [r7, #19]
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	f040 80c4 	bne.w	8007c9c <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7f9 f84b 	bl	8000bb0 <HAL_SPI_TxCpltCallback>
    return;
 8007b1a:	e0bf      	b.n	8007c9c <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80bd 	beq.w	8007ca2 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00f      	beq.n	8007b52 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b38:	f043 0204 	orr.w	r2, r3, #4
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b50:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00f      	beq.n	8007b7c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b62:	f043 0201 	orr.w	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699a      	ldr	r2, [r3, #24]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b7a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00f      	beq.n	8007ba6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b8c:	f043 0208 	orr.w	r2, r3, #8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ba4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00f      	beq.n	8007bd0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0220 	orr.w	r2, r2, #32
 8007bce:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d062      	beq.n	8007ca0 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0201 	bic.w	r2, r2, #1
 8007be8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6812      	ldr	r2, [r2, #0]
 8007bf4:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8007bf8:	f023 0303 	bic.w	r3, r3, #3
 8007bfc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007c04:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007c08:	d13e      	bne.n	8007c88 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007c18:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d015      	beq.n	8007c50 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ca8 <HAL_SPI_IRQHandler+0x3a4>)
 8007c2c:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fa f91b 	bl	8001e70 <HAL_DMA_Abort_IT>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d022      	beq.n	8007ca0 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c60:	4a11      	ldr	r2, [pc, #68]	@ (8007ca8 <HAL_SPI_IRQHandler+0x3a4>)
 8007c62:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fa f900 	bl	8001e70 <HAL_DMA_Abort_IT>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d014      	beq.n	8007ca0 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c86:	e00b      	b.n	8007ca0 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7f8 ffa3 	bl	8000bdc <HAL_SPI_ErrorCallback>
    return;
 8007c96:	e003      	b.n	8007ca0 <HAL_SPI_IRQHandler+0x39c>
    return;
 8007c98:	bf00      	nop
 8007c9a:	e002      	b.n	8007ca2 <HAL_SPI_IRQHandler+0x39e>
    return;
 8007c9c:	bf00      	nop
 8007c9e:	e000      	b.n	8007ca2 <HAL_SPI_IRQHandler+0x39e>
    return;
 8007ca0:	bf00      	nop
  }
}
 8007ca2:	3728      	adds	r7, #40	@ 0x28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	08007da5 	.word	0x08007da5

08007cac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d08:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b07      	cmp	r3, #7
 8007d14:	d011      	beq.n	8007d3a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d1e:	2b81      	cmp	r3, #129	@ 0x81
 8007d20:	d103      	bne.n	8007d2a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7f8 ff44 	bl	8000bb0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007d28:	e007      	b.n	8007d3a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	691a      	ldr	r2, [r3, #16]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0208 	orr.w	r2, r2, #8
 8007d38:	611a      	str	r2, [r3, #16]
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d4e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff ffbf 	bl	8007cd4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7fa fa09 	bl	8002184 <HAL_DMA_GetError>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d011      	beq.n	8007d9c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f82d 	bl	8007dd8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d84:	f043 0210 	orr.w	r2, r3, #16
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7f8 ff20 	bl	8000bdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007db0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7f8 ff06 	bl	8000bdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007dd0:	bf00      	nop
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0210 	orr.w	r2, r2, #16
 8007e06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0201 	bic.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007e3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d014      	beq.n	8007e72 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00f      	beq.n	8007e72 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f042 0220 	orr.w	r2, r2, #32
 8007e70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d014      	beq.n	8007ea8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00f      	beq.n	8007ea8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e8e:	f043 0204 	orr.w	r2, r3, #4
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ea6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00f      	beq.n	8007ed2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eb8:	f043 0201 	orr.w	r2, r3, #1
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	699a      	ldr	r2, [r3, #24]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ed0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00f      	beq.n	8007efc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ee2:	f043 0208 	orr.w	r2, r3, #8
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007efa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007f0c:	bf00      	nop
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	4613      	mov	r3, r2
 8007f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007f28:	e010      	b.n	8007f4c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f2a:	f7f9 fc97 	bl	800185c <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d803      	bhi.n	8007f42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f40:	d102      	bne.n	8007f48 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e00f      	b.n	8007f6c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4013      	ands	r3, r2
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2301      	moveq	r3, #1
 8007f5e:	2300      	movne	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d0df      	beq.n	8007f2a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	3307      	adds	r3, #7
 8007f92:	08db      	lsrs	r3, r3, #3
 8007f94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d12e      	bne.n	800801e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e028      	b.n	8008020 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0201 	bic.w	r2, r2, #1
 8007fec:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007ffa:	ea42 0103 	orr.w	r1, r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	e000      	b.n	8008020 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
  }
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e049      	b.n	80080d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f841 	bl	80080da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f000 fa58 	bl	8008520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d001      	beq.n	8008108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e072      	b.n	80081ee <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a35      	ldr	r2, [pc, #212]	@ (80081fc <HAL_TIM_Base_Start_IT+0x10c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d040      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a34      	ldr	r2, [pc, #208]	@ (8008200 <HAL_TIM_Base_Start_IT+0x110>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d03b      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813c:	d036      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008146:	d031      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a2d      	ldr	r2, [pc, #180]	@ (8008204 <HAL_TIM_Base_Start_IT+0x114>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d02c      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a2c      	ldr	r2, [pc, #176]	@ (8008208 <HAL_TIM_Base_Start_IT+0x118>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d027      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a2a      	ldr	r2, [pc, #168]	@ (800820c <HAL_TIM_Base_Start_IT+0x11c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d022      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a29      	ldr	r2, [pc, #164]	@ (8008210 <HAL_TIM_Base_Start_IT+0x120>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d01d      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a27      	ldr	r2, [pc, #156]	@ (8008214 <HAL_TIM_Base_Start_IT+0x124>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d018      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a26      	ldr	r2, [pc, #152]	@ (8008218 <HAL_TIM_Base_Start_IT+0x128>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a24      	ldr	r2, [pc, #144]	@ (800821c <HAL_TIM_Base_Start_IT+0x12c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00e      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a23      	ldr	r2, [pc, #140]	@ (8008220 <HAL_TIM_Base_Start_IT+0x130>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d009      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a21      	ldr	r2, [pc, #132]	@ (8008224 <HAL_TIM_Base_Start_IT+0x134>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_TIM_Base_Start_IT+0xbc>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a20      	ldr	r2, [pc, #128]	@ (8008228 <HAL_TIM_Base_Start_IT+0x138>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d115      	bne.n	80081d8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	4b1e      	ldr	r3, [pc, #120]	@ (800822c <HAL_TIM_Base_Start_IT+0x13c>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b06      	cmp	r3, #6
 80081bc:	d015      	beq.n	80081ea <HAL_TIM_Base_Start_IT+0xfa>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081c4:	d011      	beq.n	80081ea <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0201 	orr.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d6:	e008      	b.n	80081ea <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e000      	b.n	80081ec <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	50012c00 	.word	0x50012c00
 8008204:	40000400 	.word	0x40000400
 8008208:	50000400 	.word	0x50000400
 800820c:	40000800 	.word	0x40000800
 8008210:	50000800 	.word	0x50000800
 8008214:	40000c00 	.word	0x40000c00
 8008218:	50000c00 	.word	0x50000c00
 800821c:	40013400 	.word	0x40013400
 8008220:	50013400 	.word	0x50013400
 8008224:	40014000 	.word	0x40014000
 8008228:	50014000 	.word	0x50014000
 800822c:	00010007 	.word	0x00010007

08008230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d020      	beq.n	8008294 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01b      	beq.n	8008294 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0202 	mvn.w	r2, #2
 8008264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f931 	bl	80084e2 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f923 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f934 	bl	80084f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	d020      	beq.n	80082e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01b      	beq.n	80082e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f06f 0204 	mvn.w	r2, #4
 80082b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2202      	movs	r2, #2
 80082b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f90b 	bl	80084e2 <HAL_TIM_IC_CaptureCallback>
 80082cc:	e005      	b.n	80082da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f8fd 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f90e 	bl	80084f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d020      	beq.n	800832c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01b      	beq.n	800832c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0208 	mvn.w	r2, #8
 80082fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2204      	movs	r2, #4
 8008302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f8e5 	bl	80084e2 <HAL_TIM_IC_CaptureCallback>
 8008318:	e005      	b.n	8008326 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8d7 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8e8 	bl	80084f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f003 0310 	and.w	r3, r3, #16
 8008332:	2b00      	cmp	r3, #0
 8008334:	d020      	beq.n	8008378 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f003 0310 	and.w	r3, r3, #16
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01b      	beq.n	8008378 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0210 	mvn.w	r2, #16
 8008348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2208      	movs	r2, #8
 800834e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f8bf 	bl	80084e2 <HAL_TIM_IC_CaptureCallback>
 8008364:	e005      	b.n	8008372 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f8b1 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f8c2 	bl	80084f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00c      	beq.n	800839c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0201 	mvn.w	r2, #1
 8008394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7f8 fe18 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80083c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f9b5 	bl	8008734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00c      	beq.n	80083ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d007      	beq.n	80083ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f9ad 	bl	8008748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00c      	beq.n	8008412 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800840a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f87c 	bl	800850a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f003 0320 	and.w	r3, r3, #32
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00c      	beq.n	8008436 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d007      	beq.n	8008436 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f06f 0220 	mvn.w	r2, #32
 800842e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f975 	bl	8008720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f981 	bl	800875c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00c      	beq.n	800847e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f979 	bl	8008770 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00c      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800849a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f971 	bl	8008784 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00c      	beq.n	80084c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80084be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f969 	bl	8008798 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084c6:	bf00      	nop
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ea:	bf00      	nop
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a6b      	ldr	r2, [pc, #428]	@ (80086e0 <TIM_Base_SetConfig+0x1c0>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d02b      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a6a      	ldr	r2, [pc, #424]	@ (80086e4 <TIM_Base_SetConfig+0x1c4>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d027      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008546:	d023      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800854e:	d01f      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a65      	ldr	r2, [pc, #404]	@ (80086e8 <TIM_Base_SetConfig+0x1c8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d01b      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a64      	ldr	r2, [pc, #400]	@ (80086ec <TIM_Base_SetConfig+0x1cc>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d017      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a63      	ldr	r2, [pc, #396]	@ (80086f0 <TIM_Base_SetConfig+0x1d0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d013      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a62      	ldr	r2, [pc, #392]	@ (80086f4 <TIM_Base_SetConfig+0x1d4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00f      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a61      	ldr	r2, [pc, #388]	@ (80086f8 <TIM_Base_SetConfig+0x1d8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00b      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a60      	ldr	r2, [pc, #384]	@ (80086fc <TIM_Base_SetConfig+0x1dc>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d007      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a5f      	ldr	r2, [pc, #380]	@ (8008700 <TIM_Base_SetConfig+0x1e0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d003      	beq.n	8008590 <TIM_Base_SetConfig+0x70>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a5e      	ldr	r2, [pc, #376]	@ (8008704 <TIM_Base_SetConfig+0x1e4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d108      	bne.n	80085a2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a4e      	ldr	r2, [pc, #312]	@ (80086e0 <TIM_Base_SetConfig+0x1c0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d043      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a4d      	ldr	r2, [pc, #308]	@ (80086e4 <TIM_Base_SetConfig+0x1c4>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d03f      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085b8:	d03b      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085c0:	d037      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a48      	ldr	r2, [pc, #288]	@ (80086e8 <TIM_Base_SetConfig+0x1c8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d033      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a47      	ldr	r2, [pc, #284]	@ (80086ec <TIM_Base_SetConfig+0x1cc>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d02f      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a46      	ldr	r2, [pc, #280]	@ (80086f0 <TIM_Base_SetConfig+0x1d0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d02b      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a45      	ldr	r2, [pc, #276]	@ (80086f4 <TIM_Base_SetConfig+0x1d4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d027      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a44      	ldr	r2, [pc, #272]	@ (80086f8 <TIM_Base_SetConfig+0x1d8>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d023      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a43      	ldr	r2, [pc, #268]	@ (80086fc <TIM_Base_SetConfig+0x1dc>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d01f      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a42      	ldr	r2, [pc, #264]	@ (8008700 <TIM_Base_SetConfig+0x1e0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d01b      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a41      	ldr	r2, [pc, #260]	@ (8008704 <TIM_Base_SetConfig+0x1e4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d017      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a40      	ldr	r2, [pc, #256]	@ (8008708 <TIM_Base_SetConfig+0x1e8>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d013      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a3f      	ldr	r2, [pc, #252]	@ (800870c <TIM_Base_SetConfig+0x1ec>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d00f      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a3e      	ldr	r2, [pc, #248]	@ (8008710 <TIM_Base_SetConfig+0x1f0>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d00b      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a3d      	ldr	r2, [pc, #244]	@ (8008714 <TIM_Base_SetConfig+0x1f4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d007      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a3c      	ldr	r2, [pc, #240]	@ (8008718 <TIM_Base_SetConfig+0x1f8>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d003      	beq.n	8008632 <TIM_Base_SetConfig+0x112>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a3b      	ldr	r2, [pc, #236]	@ (800871c <TIM_Base_SetConfig+0x1fc>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d108      	bne.n	8008644 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a1e      	ldr	r2, [pc, #120]	@ (80086e0 <TIM_Base_SetConfig+0x1c0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d023      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a1d      	ldr	r2, [pc, #116]	@ (80086e4 <TIM_Base_SetConfig+0x1c4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d01f      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a22      	ldr	r2, [pc, #136]	@ (8008700 <TIM_Base_SetConfig+0x1e0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d01b      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a21      	ldr	r2, [pc, #132]	@ (8008704 <TIM_Base_SetConfig+0x1e4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d017      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a20      	ldr	r2, [pc, #128]	@ (8008708 <TIM_Base_SetConfig+0x1e8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1f      	ldr	r2, [pc, #124]	@ (800870c <TIM_Base_SetConfig+0x1ec>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00f      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a1e      	ldr	r2, [pc, #120]	@ (8008710 <TIM_Base_SetConfig+0x1f0>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00b      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a1d      	ldr	r2, [pc, #116]	@ (8008714 <TIM_Base_SetConfig+0x1f4>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d007      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008718 <TIM_Base_SetConfig+0x1f8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d003      	beq.n	80086b2 <TIM_Base_SetConfig+0x192>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a1b      	ldr	r2, [pc, #108]	@ (800871c <TIM_Base_SetConfig+0x1fc>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d103      	bne.n	80086ba <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f043 0204 	orr.w	r2, r3, #4
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	601a      	str	r2, [r3, #0]
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40012c00 	.word	0x40012c00
 80086e4:	50012c00 	.word	0x50012c00
 80086e8:	40000400 	.word	0x40000400
 80086ec:	50000400 	.word	0x50000400
 80086f0:	40000800 	.word	0x40000800
 80086f4:	50000800 	.word	0x50000800
 80086f8:	40000c00 	.word	0x40000c00
 80086fc:	50000c00 	.word	0x50000c00
 8008700:	40013400 	.word	0x40013400
 8008704:	50013400 	.word	0x50013400
 8008708:	40014000 	.word	0x40014000
 800870c:	50014000 	.word	0x50014000
 8008710:	40014400 	.word	0x40014400
 8008714:	50014400 	.word	0x50014400
 8008718:	40014800 	.word	0x40014800
 800871c:	50014800 	.word	0x50014800

08008720 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e042      	b.n	8008844 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f83b 	bl	800884c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2224      	movs	r2, #36	@ 0x24
 80087da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f022 0201 	bic.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f9d4 	bl	8008ba4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f82f 	bl	8008860 <UART_SetConfig>
 8008802:	4603      	mov	r3, r0
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e01b      	b.n	8008844 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800881a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800882a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0201 	orr.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fa53 	bl	8008ce8 <UART_CheckIdleState>
 8008842:	4603      	mov	r3, r0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008864:	b094      	sub	sp, #80	@ 0x50
 8008866:	af00      	add	r7, sp, #0
 8008868:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	4b7e      	ldr	r3, [pc, #504]	@ (8008a70 <UART_SetConfig+0x210>)
 8008876:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	431a      	orrs	r2, r3
 8008882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	431a      	orrs	r2, r3
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	4313      	orrs	r3, r2
 800888e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4977      	ldr	r1, [pc, #476]	@ (8008a74 <UART_SetConfig+0x214>)
 8008898:	4019      	ands	r1, r3
 800889a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a0:	430b      	orrs	r3, r1
 80088a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	68d9      	ldr	r1, [r3, #12]
 80088b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	ea40 0301 	orr.w	r3, r0, r1
 80088ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008a70 <UART_SetConfig+0x210>)
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d009      	beq.n	80088e0 <UART_SetConfig+0x80>
 80088cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b69      	ldr	r3, [pc, #420]	@ (8008a78 <UART_SetConfig+0x218>)
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d004      	beq.n	80088e0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d8:	6a1a      	ldr	r2, [r3, #32]
 80088da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088dc:	4313      	orrs	r3, r2
 80088de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80088ea:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f4:	430b      	orrs	r3, r1
 80088f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fe:	f023 000f 	bic.w	r0, r3, #15
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008904:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	ea40 0301 	orr.w	r3, r0, r1
 800890e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	4b59      	ldr	r3, [pc, #356]	@ (8008a7c <UART_SetConfig+0x21c>)
 8008916:	429a      	cmp	r2, r3
 8008918:	d102      	bne.n	8008920 <UART_SetConfig+0xc0>
 800891a:	2301      	movs	r3, #1
 800891c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800891e:	e029      	b.n	8008974 <UART_SetConfig+0x114>
 8008920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	4b56      	ldr	r3, [pc, #344]	@ (8008a80 <UART_SetConfig+0x220>)
 8008926:	429a      	cmp	r2, r3
 8008928:	d102      	bne.n	8008930 <UART_SetConfig+0xd0>
 800892a:	2302      	movs	r3, #2
 800892c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800892e:	e021      	b.n	8008974 <UART_SetConfig+0x114>
 8008930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	4b53      	ldr	r3, [pc, #332]	@ (8008a84 <UART_SetConfig+0x224>)
 8008936:	429a      	cmp	r2, r3
 8008938:	d102      	bne.n	8008940 <UART_SetConfig+0xe0>
 800893a:	2304      	movs	r3, #4
 800893c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800893e:	e019      	b.n	8008974 <UART_SetConfig+0x114>
 8008940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	4b50      	ldr	r3, [pc, #320]	@ (8008a88 <UART_SetConfig+0x228>)
 8008946:	429a      	cmp	r2, r3
 8008948:	d102      	bne.n	8008950 <UART_SetConfig+0xf0>
 800894a:	2308      	movs	r3, #8
 800894c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800894e:	e011      	b.n	8008974 <UART_SetConfig+0x114>
 8008950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4b4d      	ldr	r3, [pc, #308]	@ (8008a8c <UART_SetConfig+0x22c>)
 8008956:	429a      	cmp	r2, r3
 8008958:	d102      	bne.n	8008960 <UART_SetConfig+0x100>
 800895a:	2310      	movs	r3, #16
 800895c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800895e:	e009      	b.n	8008974 <UART_SetConfig+0x114>
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	4b42      	ldr	r3, [pc, #264]	@ (8008a70 <UART_SetConfig+0x210>)
 8008966:	429a      	cmp	r2, r3
 8008968:	d102      	bne.n	8008970 <UART_SetConfig+0x110>
 800896a:	2320      	movs	r3, #32
 800896c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800896e:	e001      	b.n	8008974 <UART_SetConfig+0x114>
 8008970:	2300      	movs	r3, #0
 8008972:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	4b3d      	ldr	r3, [pc, #244]	@ (8008a70 <UART_SetConfig+0x210>)
 800897a:	429a      	cmp	r2, r3
 800897c:	d005      	beq.n	800898a <UART_SetConfig+0x12a>
 800897e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b3d      	ldr	r3, [pc, #244]	@ (8008a78 <UART_SetConfig+0x218>)
 8008984:	429a      	cmp	r2, r3
 8008986:	f040 8085 	bne.w	8008a94 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800898a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800898c:	2200      	movs	r2, #0
 800898e:	623b      	str	r3, [r7, #32]
 8008990:	627a      	str	r2, [r7, #36]	@ 0x24
 8008992:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008996:	f7fc ffe9 	bl	800596c <HAL_RCCEx_GetPeriphCLKFreq>
 800899a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800899c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 80e8 	beq.w	8008b74 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a8:	4a39      	ldr	r2, [pc, #228]	@ (8008a90 <UART_SetConfig+0x230>)
 80089aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ae:	461a      	mov	r2, r3
 80089b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	4613      	mov	r3, r2
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	4413      	add	r3, r2
 80089c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d305      	bcc.n	80089d4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80089da:	e048      	b.n	8008a6e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089de:	2200      	movs	r2, #0
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	61fa      	str	r2, [r7, #28]
 80089e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e8:	4a29      	ldr	r2, [pc, #164]	@ (8008a90 <UART_SetConfig+0x230>)
 80089ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2200      	movs	r2, #0
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	617a      	str	r2, [r7, #20]
 80089f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80089fe:	f7f7 fc3b 	bl	8000278 <__aeabi_uldivmod>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4610      	mov	r0, r2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f04f 0200 	mov.w	r2, #0
 8008a0e:	f04f 0300 	mov.w	r3, #0
 8008a12:	020b      	lsls	r3, r1, #8
 8008a14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a18:	0202      	lsls	r2, r0, #8
 8008a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1c:	6849      	ldr	r1, [r1, #4]
 8008a1e:	0849      	lsrs	r1, r1, #1
 8008a20:	2000      	movs	r0, #0
 8008a22:	460c      	mov	r4, r1
 8008a24:	4605      	mov	r5, r0
 8008a26:	eb12 0804 	adds.w	r8, r2, r4
 8008a2a:	eb43 0905 	adc.w	r9, r3, r5
 8008a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	60fa      	str	r2, [r7, #12]
 8008a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	4649      	mov	r1, r9
 8008a40:	f7f7 fc1a 	bl	8000278 <__aeabi_uldivmod>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4613      	mov	r3, r2
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a52:	d308      	bcc.n	8008a66 <UART_SetConfig+0x206>
 8008a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a5a:	d204      	bcs.n	8008a66 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a62:	60da      	str	r2, [r3, #12]
 8008a64:	e003      	b.n	8008a6e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008a6c:	e082      	b.n	8008b74 <UART_SetConfig+0x314>
 8008a6e:	e081      	b.n	8008b74 <UART_SetConfig+0x314>
 8008a70:	46002400 	.word	0x46002400
 8008a74:	cfff69f3 	.word	0xcfff69f3
 8008a78:	56002400 	.word	0x56002400
 8008a7c:	40013800 	.word	0x40013800
 8008a80:	40004400 	.word	0x40004400
 8008a84:	40004800 	.word	0x40004800
 8008a88:	40004c00 	.word	0x40004c00
 8008a8c:	40005000 	.word	0x40005000
 8008a90:	08009138 	.word	0x08009138
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a9c:	d13c      	bne.n	8008b18 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	607a      	str	r2, [r7, #4]
 8008aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aaa:	f7fc ff5f 	bl	800596c <HAL_RCCEx_GetPeriphCLKFreq>
 8008aae:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d05e      	beq.n	8008b74 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aba:	4a39      	ldr	r2, [pc, #228]	@ (8008ba0 <UART_SetConfig+0x340>)
 8008abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ac8:	005a      	lsls	r2, r3, #1
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	085b      	lsrs	r3, r3, #1
 8008ad0:	441a      	add	r2, r3
 8008ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ade:	2b0f      	cmp	r3, #15
 8008ae0:	d916      	bls.n	8008b10 <UART_SetConfig+0x2b0>
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae8:	d212      	bcs.n	8008b10 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	f023 030f 	bic.w	r3, r3, #15
 8008af2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008b02:	4313      	orrs	r3, r2
 8008b04:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008b0c:	60da      	str	r2, [r3, #12]
 8008b0e:	e031      	b.n	8008b74 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008b16:	e02d      	b.n	8008b74 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	469a      	mov	sl, r3
 8008b1e:	4693      	mov	fp, r2
 8008b20:	4650      	mov	r0, sl
 8008b22:	4659      	mov	r1, fp
 8008b24:	f7fc ff22 	bl	800596c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b28:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d021      	beq.n	8008b74 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b34:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba0 <UART_SetConfig+0x340>)
 8008b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	441a      	add	r2, r3
 8008b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b56:	2b0f      	cmp	r3, #15
 8008b58:	d909      	bls.n	8008b6e <UART_SetConfig+0x30e>
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b60:	d205      	bcs.n	8008b6e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60da      	str	r2, [r3, #12]
 8008b6c:	e002      	b.n	8008b74 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b76:	2201      	movs	r2, #1
 8008b78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b86:	2200      	movs	r2, #0
 8008b88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3750      	adds	r7, #80	@ 0x50
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b9e:	bf00      	nop
 8008ba0:	08009138 	.word	0x08009138

08008ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb0:	f003 0308 	and.w	r3, r3, #8
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00a      	beq.n	8008bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00a      	beq.n	8008c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c16:	f003 0304 	and.w	r3, r3, #4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00a      	beq.n	8008c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01a      	beq.n	8008cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ca2:	d10a      	bne.n	8008cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00a      	beq.n	8008cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	605a      	str	r2, [r3, #4]
  }
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b098      	sub	sp, #96	@ 0x60
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cf8:	f7f8 fdb0 	bl	800185c <HAL_GetTick>
 8008cfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d12f      	bne.n	8008d6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d14:	2200      	movs	r2, #0
 8008d16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f88e 	bl	8008e3c <UART_WaitOnFlagUntilTimeout>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d022      	beq.n	8008d6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e6      	bne.n	8008d26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e063      	b.n	8008e34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d149      	bne.n	8008e0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d82:	2200      	movs	r2, #0
 8008d84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f857 	bl	8008e3c <UART_WaitOnFlagUntilTimeout>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d03c      	beq.n	8008e0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	623b      	str	r3, [r7, #32]
   return(result);
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e6      	bne.n	8008d94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008de6:	61fa      	str	r2, [r7, #28]
 8008de8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	69b9      	ldr	r1, [r7, #24]
 8008dec:	69fa      	ldr	r2, [r7, #28]
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	617b      	str	r3, [r7, #20]
   return(result);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e5      	bne.n	8008dc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e012      	b.n	8008e34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3758      	adds	r7, #88	@ 0x58
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e4c:	e04f      	b.n	8008eee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e54:	d04b      	beq.n	8008eee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e56:	f7f8 fd01 	bl	800185c <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d302      	bcc.n	8008e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e04e      	b.n	8008f0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0304 	and.w	r3, r3, #4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d037      	beq.n	8008eee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b80      	cmp	r3, #128	@ 0x80
 8008e82:	d034      	beq.n	8008eee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b40      	cmp	r3, #64	@ 0x40
 8008e88:	d031      	beq.n	8008eee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	f003 0308 	and.w	r3, r3, #8
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d110      	bne.n	8008eba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2208      	movs	r2, #8
 8008e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 f838 	bl	8008f16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2208      	movs	r2, #8
 8008eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e029      	b.n	8008f0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ec4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ec8:	d111      	bne.n	8008eee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ed2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 f81e 	bl	8008f16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e00f      	b.n	8008f0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69da      	ldr	r2, [r3, #28]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	bf0c      	ite	eq
 8008efe:	2301      	moveq	r3, #1
 8008f00:	2300      	movne	r3, #0
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	461a      	mov	r2, r3
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d0a0      	beq.n	8008e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b095      	sub	sp, #84	@ 0x54
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e6      	bne.n	8008f1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3308      	adds	r3, #8
 8008f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3308      	adds	r3, #8
 8008f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e3      	bne.n	8008f50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d118      	bne.n	8008fc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f023 0310 	bic.w	r3, r3, #16
 8008fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fae:	61bb      	str	r3, [r7, #24]
 8008fb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6979      	ldr	r1, [r7, #20]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	613b      	str	r3, [r7, #16]
   return(result);
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e6      	bne.n	8008f90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fd6:	bf00      	nop
 8008fd8:	3754      	adds	r7, #84	@ 0x54
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <memset>:
 8008fe2:	4402      	add	r2, r0
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d100      	bne.n	8008fec <memset+0xa>
 8008fea:	4770      	bx	lr
 8008fec:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff0:	e7f9      	b.n	8008fe6 <memset+0x4>
	...

08008ff4 <__libc_init_array>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	4d0d      	ldr	r5, [pc, #52]	@ (800902c <__libc_init_array+0x38>)
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	4c0d      	ldr	r4, [pc, #52]	@ (8009030 <__libc_init_array+0x3c>)
 8008ffc:	1b64      	subs	r4, r4, r5
 8008ffe:	10a4      	asrs	r4, r4, #2
 8009000:	42a6      	cmp	r6, r4
 8009002:	d109      	bne.n	8009018 <__libc_init_array+0x24>
 8009004:	4d0b      	ldr	r5, [pc, #44]	@ (8009034 <__libc_init_array+0x40>)
 8009006:	2600      	movs	r6, #0
 8009008:	4c0b      	ldr	r4, [pc, #44]	@ (8009038 <__libc_init_array+0x44>)
 800900a:	f000 f817 	bl	800903c <_init>
 800900e:	1b64      	subs	r4, r4, r5
 8009010:	10a4      	asrs	r4, r4, #2
 8009012:	42a6      	cmp	r6, r4
 8009014:	d105      	bne.n	8009022 <__libc_init_array+0x2e>
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	f855 3b04 	ldr.w	r3, [r5], #4
 800901c:	3601      	adds	r6, #1
 800901e:	4798      	blx	r3
 8009020:	e7ee      	b.n	8009000 <__libc_init_array+0xc>
 8009022:	f855 3b04 	ldr.w	r3, [r5], #4
 8009026:	3601      	adds	r6, #1
 8009028:	4798      	blx	r3
 800902a:	e7f2      	b.n	8009012 <__libc_init_array+0x1e>
 800902c:	08009158 	.word	0x08009158
 8009030:	08009158 	.word	0x08009158
 8009034:	08009158 	.word	0x08009158
 8009038:	0800915c 	.word	0x0800915c

0800903c <_init>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr

08009048 <_fini>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr
