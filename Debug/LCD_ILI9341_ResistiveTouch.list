
LCD_ILI9341_ResistiveTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009250  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08009488  08009488  0000a488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097b4  080097b4  0000a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097bc  080097bc  0000a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080097c0  080097c0  0000a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000031  20000000  080097c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000224  20000034  080097f5  0000b034  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000258  080097f5  0000b258  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b031  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d00c  00000000  00000000  0000b067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003607  00000000  00000000  00028073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017d0  00000000  00000000  0002b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003423b  00000000  00000000  0002ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ec3b  00000000  00000000  0006108b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014af7b  00000000  00000000  0007fcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001cac41  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00001298  00000000  00000000  001cac84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000065a4  00000000  00000000  001cbf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001d24c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000034 	.word	0x20000034
 8000254:	00000000 	.word	0x00000000
 8000258:	08009470 	.word	0x08009470

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000038 	.word	0x20000038
 8000274:	08009470 	.word	0x08009470

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <ILI9341_SPI_Tx>:
static volatile uint8_t spi_dma_tx_completed = 1;

// --- 底层硬件操作函数 ---

// SPI发送单个字节
static void ILI9341_SPI_Tx(uint8_t data) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(ILI9341_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2201      	movs	r2, #1
 8000606:	4803      	ldr	r0, [pc, #12]	@ (8000614 <ILI9341_SPI_Tx+0x20>)
 8000608:	f006 ffc6 	bl	8007598 <HAL_SPI_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000060 	.word	0x20000060

08000618 <ILI9341_SPI_Wait_DMA_Completed>:

//// SPI发送多个字节
//static void ILI9341_SPI_TxBuffer(uint8_t* buffer, uint16_t len) {
//    HAL_SPI_Transmit(ILI9341_SPI_HANDLE, buffer, len, HAL_MAX_DELAY);
//}
static void ILI9341_SPI_Wait_DMA_Completed(void) {
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
    while (!spi_dma_tx_completed);
 800061c:	bf00      	nop
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <ILI9341_SPI_Wait_DMA_Completed+0x1c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0fa      	beq.n	800061e <ILI9341_SPI_Wait_DMA_Completed+0x6>
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000008 	.word	0x20000008

08000638 <ILI9341_WriteCommand>:
//	// 启动DMA传输
//    HAL_SPI_Transmit_DMA(ILI9341_SPI_HANDLE, buffer, len);
//}

// 发送命令
static void ILI9341_WriteCommand(uint8_t cmd) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	ILI9341_SPI_Wait_DMA_Completed();
 8000642:	f7ff ffe9 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET); // DC拉低，表示命令
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800064e:	f002 fdcd 	bl	80031ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET); // CS拉低，选中芯片
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800065a:	f002 fdc7 	bl	80031ec <HAL_GPIO_WritePin>
    ILI9341_SPI_Tx(cmd);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffc7 	bl	80005f4 <ILI9341_SPI_Tx>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);   // CS拉高，取消选中
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800066e:	f002 fdbd 	bl	80031ec <HAL_GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	42020c00 	.word	0x42020c00

08000680 <ILI9341_WriteData>:

// 发送数据
static void ILI9341_WriteData(uint8_t data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	ILI9341_SPI_Wait_DMA_Completed();
 800068a:	f7ff ffc5 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);   // DC拉高，表示数据
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000694:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <ILI9341_WriteData+0x44>)
 8000696:	f002 fda9 	bl	80031ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET); // CS拉低，选中芯片
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a0:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <ILI9341_WriteData+0x44>)
 80006a2:	f002 fda3 	bl	80031ec <HAL_GPIO_WritePin>
    ILI9341_SPI_Tx(data);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa3 	bl	80005f4 <ILI9341_SPI_Tx>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);   // CS拉高，取消选中
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <ILI9341_WriteData+0x44>)
 80006b6:	f002 fd99 	bl	80031ec <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	42020c00 	.word	0x42020c00

080006c8 <ILI9341_Reset>:

// 硬件复位
static void ILI9341_Reset(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d2:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <ILI9341_Reset+0x2c>)
 80006d4:	f002 fd8a 	bl	80031ec <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80006d8:	2014      	movs	r0, #20
 80006da:	f001 fae5 	bl	8001ca8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <ILI9341_Reset+0x2c>)
 80006e6:	f002 fd81 	bl	80031ec <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80006ea:	2064      	movs	r0, #100	@ 0x64
 80006ec:	f001 fadc 	bl	8001ca8 <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	42021400 	.word	0x42021400

080006f8 <ILI9341_SetAddressWindow>:

// 设置绘图窗口
void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4604      	mov	r4, r0
 8000700:	4608      	mov	r0, r1
 8000702:	4611      	mov	r1, r2
 8000704:	461a      	mov	r2, r3
 8000706:	4623      	mov	r3, r4
 8000708:	80fb      	strh	r3, [r7, #6]
 800070a:	4603      	mov	r3, r0
 800070c:	80bb      	strh	r3, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	807b      	strh	r3, [r7, #2]
 8000712:	4613      	mov	r3, r2
 8000714:	803b      	strh	r3, [r7, #0]
    // Column Address Set
    ILI9341_WriteCommand(0x2A);
 8000716:	202a      	movs	r0, #42	@ 0x2a
 8000718:	f7ff ff8e 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(x0 >> 8);
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffab 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x0 & 0xFF);
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffa6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x1 >> 8);
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b29b      	uxth	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff9f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x1 & 0xFF);
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <ILI9341_WriteData>

    // Page Address Set
    ILI9341_WriteCommand(0x2B);
 800074c:	202b      	movs	r0, #43	@ 0x2b
 800074e:	f7ff ff73 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(y0 >> 8);
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff90 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y0 & 0xFF);
 8000760:	88bb      	ldrh	r3, [r7, #4]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff8b 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y1 >> 8);
 800076a:	883b      	ldrh	r3, [r7, #0]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	b29b      	uxth	r3, r3
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff84 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y1 & 0xFF);
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff7f 	bl	8000680 <ILI9341_WriteData>

    // Memory Write
    ILI9341_WriteCommand(0x2C);
 8000782:	202c      	movs	r0, #44	@ 0x2c
 8000784:	f7ff ff58 	bl	8000638 <ILI9341_WriteCommand>
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bd90      	pop	{r4, r7, pc}

08000790 <ILI9341_Init>:


// --- 高层绘图函数 ---

// 初始化序列
void ILI9341_Init(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 8000794:	f7ff ff98 	bl	80006c8 <ILI9341_Reset>

    ILI9341_WriteCommand(0xCF); // Power control B
 8000798:	20cf      	movs	r0, #207	@ 0xcf
 800079a:	f7ff ff4d 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff6e 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xC1);
 80007a4:	20c1      	movs	r0, #193	@ 0xc1
 80007a6:	f7ff ff6b 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x30);
 80007aa:	2030      	movs	r0, #48	@ 0x30
 80007ac:	f7ff ff68 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xED); // Power on sequence control
 80007b0:	20ed      	movs	r0, #237	@ 0xed
 80007b2:	f7ff ff41 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x64);
 80007b6:	2064      	movs	r0, #100	@ 0x64
 80007b8:	f7ff ff62 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 80007bc:	2003      	movs	r0, #3
 80007be:	f7ff ff5f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x12);
 80007c2:	2012      	movs	r0, #18
 80007c4:	f7ff ff5c 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x81);
 80007c8:	2081      	movs	r0, #129	@ 0x81
 80007ca:	f7ff ff59 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE8); // Driver timing control A
 80007ce:	20e8      	movs	r0, #232	@ 0xe8
 80007d0:	f7ff ff32 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x85);
 80007d4:	2085      	movs	r0, #133	@ 0x85
 80007d6:	f7ff ff53 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff50 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x78);
 80007e0:	2078      	movs	r0, #120	@ 0x78
 80007e2:	f7ff ff4d 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xCB); // Power control A
 80007e6:	20cb      	movs	r0, #203	@ 0xcb
 80007e8:	f7ff ff26 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x39);
 80007ec:	2039      	movs	r0, #57	@ 0x39
 80007ee:	f7ff ff47 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x2C);
 80007f2:	202c      	movs	r0, #44	@ 0x2c
 80007f4:	f7ff ff44 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff ff41 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x34);
 80007fe:	2034      	movs	r0, #52	@ 0x34
 8000800:	f7ff ff3e 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x02);
 8000804:	2002      	movs	r0, #2
 8000806:	f7ff ff3b 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xF7); // Pump ratio control
 800080a:	20f7      	movs	r0, #247	@ 0xf7
 800080c:	f7ff ff14 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x20);
 8000810:	2020      	movs	r0, #32
 8000812:	f7ff ff35 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xEA); // Driver timing control B
 8000816:	20ea      	movs	r0, #234	@ 0xea
 8000818:	f7ff ff0e 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ff2f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff ff2c 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC0); // Power Control 1
 8000828:	20c0      	movs	r0, #192	@ 0xc0
 800082a:	f7ff ff05 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x23);
 800082e:	2023      	movs	r0, #35	@ 0x23
 8000830:	f7ff ff26 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC1); // Power Control 2
 8000834:	20c1      	movs	r0, #193	@ 0xc1
 8000836:	f7ff feff 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x10);
 800083a:	2010      	movs	r0, #16
 800083c:	f7ff ff20 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC5); // VCM control 1
 8000840:	20c5      	movs	r0, #197	@ 0xc5
 8000842:	f7ff fef9 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x3E);
 8000846:	203e      	movs	r0, #62	@ 0x3e
 8000848:	f7ff ff1a 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x28);
 800084c:	2028      	movs	r0, #40	@ 0x28
 800084e:	f7ff ff17 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC7); // VCM control 2
 8000852:	20c7      	movs	r0, #199	@ 0xc7
 8000854:	f7ff fef0 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x86);
 8000858:	2086      	movs	r0, #134	@ 0x86
 800085a:	f7ff ff11 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x36); // Memory Access Control (MADCTL): MX, MY, RGB order
 800085e:	2036      	movs	r0, #54	@ 0x36
 8000860:	f7ff feea 	bl	8000638 <ILI9341_WriteCommand>
//    ILI9341_WriteData(0x48);
    ILI9341_WriteData(0x28); 	// landscape
 8000864:	2028      	movs	r0, #40	@ 0x28
 8000866:	f7ff ff0b 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x3A); // Pixel Format Set
 800086a:	203a      	movs	r0, #58	@ 0x3a
 800086c:	f7ff fee4 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x55);    // 16 bits per pixel
 8000870:	2055      	movs	r0, #85	@ 0x55
 8000872:	f7ff ff05 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xB1); // Frame Rate Control
 8000876:	20b1      	movs	r0, #177	@ 0xb1
 8000878:	f7ff fede 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff feff 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x18);
 8000882:	2018      	movs	r0, #24
 8000884:	f7ff fefc 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xB6); // Display Function Control
 8000888:	20b6      	movs	r0, #182	@ 0xb6
 800088a:	f7ff fed5 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x08);
 800088e:	2008      	movs	r0, #8
 8000890:	f7ff fef6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x82);
 8000894:	2082      	movs	r0, #130	@ 0x82
 8000896:	f7ff fef3 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x27);
 800089a:	2027      	movs	r0, #39	@ 0x27
 800089c:	f7ff fef0 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xF2); // 3Gamma Function Disable
 80008a0:	20f2      	movs	r0, #242	@ 0xf2
 80008a2:	f7ff fec9 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff feea 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x26); // Gamma curve selected
 80008ac:	2026      	movs	r0, #38	@ 0x26
 80008ae:	f7ff fec3 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x01);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fee4 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE0); // Set Gamma
 80008b8:	20e0      	movs	r0, #224	@ 0xe0
 80008ba:	f7ff febd 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x0F);
 80008be:	200f      	movs	r0, #15
 80008c0:	f7ff fede 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 80008c4:	2031      	movs	r0, #49	@ 0x31
 80008c6:	f7ff fedb 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x2B);
 80008ca:	202b      	movs	r0, #43	@ 0x2b
 80008cc:	f7ff fed8 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0C);
 80008d0:	200c      	movs	r0, #12
 80008d2:	f7ff fed5 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 80008d6:	200e      	movs	r0, #14
 80008d8:	f7ff fed2 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x08);
 80008dc:	2008      	movs	r0, #8
 80008de:	f7ff fecf 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x4E);
 80008e2:	204e      	movs	r0, #78	@ 0x4e
 80008e4:	f7ff fecc 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xF1);
 80008e8:	20f1      	movs	r0, #241	@ 0xf1
 80008ea:	f7ff fec9 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x37);
 80008ee:	2037      	movs	r0, #55	@ 0x37
 80008f0:	f7ff fec6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x07);
 80008f4:	2007      	movs	r0, #7
 80008f6:	f7ff fec3 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x10);
 80008fa:	2010      	movs	r0, #16
 80008fc:	f7ff fec0 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 8000900:	2003      	movs	r0, #3
 8000902:	f7ff febd 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 8000906:	200e      	movs	r0, #14
 8000908:	f7ff feba 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x09);
 800090c:	2009      	movs	r0, #9
 800090e:	f7ff feb7 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff feb4 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE1); // Set Gamma
 8000918:	20e1      	movs	r0, #225	@ 0xe1
 800091a:	f7ff fe8d 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff feae 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 8000924:	200e      	movs	r0, #14
 8000926:	f7ff feab 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x14);
 800092a:	2014      	movs	r0, #20
 800092c:	f7ff fea8 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 8000930:	2003      	movs	r0, #3
 8000932:	f7ff fea5 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x11);
 8000936:	2011      	movs	r0, #17
 8000938:	f7ff fea2 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x07);
 800093c:	2007      	movs	r0, #7
 800093e:	f7ff fe9f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 8000942:	2031      	movs	r0, #49	@ 0x31
 8000944:	f7ff fe9c 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xC1);
 8000948:	20c1      	movs	r0, #193	@ 0xc1
 800094a:	f7ff fe99 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x48);
 800094e:	2048      	movs	r0, #72	@ 0x48
 8000950:	f7ff fe96 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x08);
 8000954:	2008      	movs	r0, #8
 8000956:	f7ff fe93 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0F);
 800095a:	200f      	movs	r0, #15
 800095c:	f7ff fe90 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0C);
 8000960:	200c      	movs	r0, #12
 8000962:	f7ff fe8d 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 8000966:	2031      	movs	r0, #49	@ 0x31
 8000968:	f7ff fe8a 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x36);
 800096c:	2036      	movs	r0, #54	@ 0x36
 800096e:	f7ff fe87 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0F);
 8000972:	200f      	movs	r0, #15
 8000974:	f7ff fe84 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x11); // Exit Sleep
 8000978:	2011      	movs	r0, #17
 800097a:	f7ff fe5d 	bl	8000638 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800097e:	2078      	movs	r0, #120	@ 0x78
 8000980:	f001 f992 	bl	8001ca8 <HAL_Delay>

    ILI9341_WriteCommand(0x29); // Display on
 8000984:	2029      	movs	r0, #41	@ 0x29
 8000986:	f7ff fe57 	bl	8000638 <ILI9341_WriteCommand>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <ILI9341_FillScreen>:


void ILI9341_FillScreen(uint16_t color) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af02      	add	r7, sp, #8
 8000994:	4603      	mov	r3, r0
 8000996:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle_DMA(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	23f0      	movs	r3, #240	@ 0xf0
 800099e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009a2:	2100      	movs	r1, #0
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f849 	bl	8000a3c <ILI9341_FillRectangle_DMA>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	460b      	mov	r3, r1
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	807b      	strh	r3, [r7, #2]
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009cc:	d22d      	bcs.n	8000a2a <ILI9341_DrawPixel+0x76>
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	2bef      	cmp	r3, #239	@ 0xef
 80009d2:	d82a      	bhi.n	8000a2a <ILI9341_DrawPixel+0x76>

    ILI9341_SetAddressWindow(x, y, x, y);
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	88b9      	ldrh	r1, [r7, #4]
 80009da:	88f8      	ldrh	r0, [r7, #6]
 80009dc:	f7ff fe8c 	bl	80006f8 <ILI9341_SetAddressWindow>
    uint8_t data[] = {color >> 8, color & 0xFF};
 80009e0:	887b      	ldrh	r3, [r7, #2]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	733b      	strb	r3, [r7, #12]
 80009ea:	887b      	ldrh	r3, [r7, #2]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	737b      	strb	r3, [r7, #13]

    // 等待DMA空闲
    ILI9341_SPI_Wait_DMA_Completed();
 80009f0:	f7ff fe12 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <ILI9341_DrawPixel+0x80>)
 80009fc:	f002 fbf6 	bl	80031ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a06:	480b      	ldr	r0, [pc, #44]	@ (8000a34 <ILI9341_DrawPixel+0x80>)
 8000a08:	f002 fbf0 	bl	80031ec <HAL_GPIO_WritePin>
    // 只发送一个像素，使用阻塞模式更简单高效
    HAL_SPI_Transmit(ILI9341_SPI_HANDLE, data, 2, HAL_MAX_DELAY);
 8000a0c:	f107 010c 	add.w	r1, r7, #12
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	2202      	movs	r2, #2
 8000a16:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <ILI9341_DrawPixel+0x84>)
 8000a18:	f006 fdbe 	bl	8007598 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a22:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <ILI9341_DrawPixel+0x80>)
 8000a24:	f002 fbe2 	bl	80031ec <HAL_GPIO_WritePin>
 8000a28:	e000      	b.n	8000a2c <ILI9341_DrawPixel+0x78>
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a2a:	bf00      	nop
}
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	42020c00 	.word	0x42020c00
 8000a38:	20000060 	.word	0x20000060

08000a3c <ILI9341_FillRectangle_DMA>:
//    }
//
//    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
//}
// ** 优化后的填充矩形函数 **
void ILI9341_FillRectangle_DMA(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4605      	mov	r5, r0
 8000a46:	460c      	mov	r4, r1
 8000a48:	4610      	mov	r0, r2
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000a50:	f2a3 238a 	subw	r3, r3, #650	@ 0x28a
 8000a54:	462a      	mov	r2, r5
 8000a56:	801a      	strh	r2, [r3, #0]
 8000a58:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000a5c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000a60:	4622      	mov	r2, r4
 8000a62:	801a      	strh	r2, [r3, #0]
 8000a64:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000a68:	f2a3 238e 	subw	r3, r3, #654	@ 0x28e
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	801a      	strh	r2, [r3, #0]
 8000a70:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000a74:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000a78:	460a      	mov	r2, r1
 8000a7a:	801a      	strh	r2, [r3, #0]
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a7c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000a80:	f2a3 238a 	subw	r3, r3, #650	@ 0x28a
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a8a:	f080 80cb 	bcs.w	8000c24 <ILI9341_FillRectangle_DMA+0x1e8>
 8000a8e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000a92:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	2bef      	cmp	r3, #239	@ 0xef
 8000a9a:	f200 80c3 	bhi.w	8000c24 <ILI9341_FillRectangle_DMA+0x1e8>
    if ((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000a9e:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000aa2:	f2a3 238a 	subw	r3, r3, #650	@ 0x28a
 8000aa6:	881a      	ldrh	r2, [r3, #0]
 8000aa8:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000aac:	f2a3 238e 	subw	r3, r3, #654	@ 0x28e
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ab8:	dd0b      	ble.n	8000ad2 <ILI9341_FillRectangle_DMA+0x96>
 8000aba:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000abe:	f2a3 238e 	subw	r3, r3, #654	@ 0x28e
 8000ac2:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8000ac6:	f2a2 228a 	subw	r2, r2, #650	@ 0x28a
 8000aca:	8812      	ldrh	r2, [r2, #0]
 8000acc:	f5c2 72a0 	rsb	r2, r2, #320	@ 0x140
 8000ad0:	801a      	strh	r2, [r3, #0]
    if ((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000ad2:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000ad6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000ada:	881a      	ldrh	r2, [r3, #0]
 8000adc:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000ae0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	2bf0      	cmp	r3, #240	@ 0xf0
 8000aea:	dd0b      	ble.n	8000b04 <ILI9341_FillRectangle_DMA+0xc8>
 8000aec:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000af0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000af4:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8000af8:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 8000afc:	8812      	ldrh	r2, [r2, #0]
 8000afe:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
 8000b02:	801a      	strh	r2, [r3, #0]

    ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000b04:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000b08:	f2a3 228a 	subw	r2, r3, #650	@ 0x28a
 8000b0c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000b10:	f2a3 238e 	subw	r3, r3, #654	@ 0x28e
 8000b14:	8812      	ldrh	r2, [r2, #0]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	b29c      	uxth	r4, r3
 8000b20:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000b24:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8000b28:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000b2c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000b30:	8812      	ldrh	r2, [r2, #0]
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000b40:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000b44:	8819      	ldrh	r1, [r3, #0]
 8000b46:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000b4a:	f2a3 238a 	subw	r3, r3, #650	@ 0x28a
 8000b4e:	8818      	ldrh	r0, [r3, #0]
 8000b50:	4613      	mov	r3, r2
 8000b52:	4622      	mov	r2, r4
 8000b54:	f7ff fdd0 	bl	80006f8 <ILI9341_SetAddressWindow>

    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b5e:	4834      	ldr	r0, [pc, #208]	@ (8000c30 <ILI9341_FillRectangle_DMA+0x1f4>)
 8000b60:	f002 fb44 	bl	80031ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b6a:	4831      	ldr	r0, [pc, #196]	@ (8000c30 <ILI9341_FillRectangle_DMA+0x1f4>)
 8000b6c:	f002 fb3e 	bl	80031ec <HAL_GPIO_WritePin>

    // 使用最大可能的行缓冲区
	uint8_t row_buffer[ILI9341_WIDTH * 2];
	uint16_t row_size_bytes = w * 2;
 8000b70:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000b74:	f2a3 238e 	subw	r3, r3, #654	@ 0x28e
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	f8a7 328a 	strh.w	r3, [r7, #650]	@ 0x28a

	// 填充缓冲区为指定颜色
	for (uint16_t i = 0; i < row_size_bytes; i += 2) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8a7 328e 	strh.w	r3, [r7, #654]	@ 0x28e
 8000b86:	e01b      	b.n	8000bc0 <ILI9341_FillRectangle_DMA+0x184>
		row_buffer[i] = color >> 8;
 8000b88:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	f8b7 328e 	ldrh.w	r3, [r7, #654]	@ 0x28e
 8000b94:	b2d1      	uxtb	r1, r2
 8000b96:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8000b9a:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8000b9e:	54d1      	strb	r1, [r2, r3]
		row_buffer[i+1] = color & 0xFF;
 8000ba0:	f8b7 328e 	ldrh.w	r3, [r7, #654]	@ 0x28e
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 8000baa:	b2d1      	uxtb	r1, r2
 8000bac:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8000bb0:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8000bb4:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < row_size_bytes; i += 2) {
 8000bb6:	f8b7 328e 	ldrh.w	r3, [r7, #654]	@ 0x28e
 8000bba:	3302      	adds	r3, #2
 8000bbc:	f8a7 328e 	strh.w	r3, [r7, #654]	@ 0x28e
 8000bc0:	f8b7 228e 	ldrh.w	r2, [r7, #654]	@ 0x28e
 8000bc4:	f8b7 328a 	ldrh.w	r3, [r7, #650]	@ 0x28a
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d3dd      	bcc.n	8000b88 <ILI9341_FillRectangle_DMA+0x14c>
	}

	// 逐行发送，每次发送都等待上一次完成
	for (uint16_t i = 0; i < h; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8a7 328c 	strh.w	r3, [r7, #652]	@ 0x28c
 8000bd2:	e015      	b.n	8000c00 <ILI9341_FillRectangle_DMA+0x1c4>
		while (!spi_dma_tx_completed); // 等待
 8000bd4:	bf00      	nop
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <ILI9341_FillRectangle_DMA+0x1f8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0fa      	beq.n	8000bd6 <ILI9341_FillRectangle_DMA+0x19a>
		spi_dma_tx_completed = 0;      // 清零
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <ILI9341_FillRectangle_DMA+0x1f8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(ILI9341_SPI_HANDLE, row_buffer, row_size_bytes); // 启动
 8000be6:	f8b7 228a 	ldrh.w	r2, [r7, #650]	@ 0x28a
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4811      	ldr	r0, [pc, #68]	@ (8000c38 <ILI9341_FillRectangle_DMA+0x1fc>)
 8000bf2:	f006 fee5 	bl	80079c0 <HAL_SPI_Transmit_DMA>
	for (uint16_t i = 0; i < h; i++) {
 8000bf6:	f8b7 328c 	ldrh.w	r3, [r7, #652]	@ 0x28c
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f8a7 328c 	strh.w	r3, [r7, #652]	@ 0x28c
 8000c00:	f507 7324 	add.w	r3, r7, #656	@ 0x290
 8000c04:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000c08:	f8b7 228c 	ldrh.w	r2, [r7, #652]	@ 0x28c
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d3e0      	bcc.n	8000bd4 <ILI9341_FillRectangle_DMA+0x198>
	}


	// 等待最后一次DMA传输完成
	ILI9341_SPI_Wait_DMA_Completed();
 8000c12:	f7ff fd01 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <ILI9341_FillRectangle_DMA+0x1f4>)
 8000c1e:	f002 fae5 	bl	80031ec <HAL_GPIO_WritePin>
 8000c22:	e000      	b.n	8000c26 <ILI9341_FillRectangle_DMA+0x1ea>
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000c24:	bf00      	nop
}
 8000c26:	f507 7724 	add.w	r7, r7, #656	@ 0x290
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	42020c00 	.word	0x42020c00
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000060 	.word	0x20000060

08000c3c <ILI9341_FillRectangle_Slow>:

// *** 新增：一个简单的、基于DrawPixel的矩形填充函数 ***
// 这个函数专门给DrawChar用于字符放大，我们不把它在.h中声明，作为内部函数
static void ILI9341_FillRectangle_Slow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	80fb      	strh	r3, [r7, #6]
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80bb      	strh	r3, [r7, #4]
 8000c52:	460b      	mov	r3, r1
 8000c54:	807b      	strh	r3, [r7, #2]
 8000c56:	4613      	mov	r3, r2
 8000c58:	803b      	strh	r3, [r7, #0]
    for (uint16_t j = 0; j < h; j++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	81fb      	strh	r3, [r7, #14]
 8000c5e:	e018      	b.n	8000c92 <ILI9341_FillRectangle_Slow+0x56>
        for (uint16_t i = 0; i < w; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	81bb      	strh	r3, [r7, #12]
 8000c64:	e00e      	b.n	8000c84 <ILI9341_FillRectangle_Slow+0x48>
            ILI9341_DrawPixel(x + i, y + j, color);
 8000c66:	88fa      	ldrh	r2, [r7, #6]
 8000c68:	89bb      	ldrh	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	88ba      	ldrh	r2, [r7, #4]
 8000c70:	89fb      	ldrh	r3, [r7, #14]
 8000c72:	4413      	add	r3, r2
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	8c3a      	ldrh	r2, [r7, #32]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f7ff fe9b 	bl	80009b4 <ILI9341_DrawPixel>
        for (uint16_t i = 0; i < w; i++) {
 8000c7e:	89bb      	ldrh	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	81bb      	strh	r3, [r7, #12]
 8000c84:	89ba      	ldrh	r2, [r7, #12]
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d3ec      	bcc.n	8000c66 <ILI9341_FillRectangle_Slow+0x2a>
    for (uint16_t j = 0; j < h; j++) {
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	81fb      	strh	r3, [r7, #14]
 8000c92:	89fa      	ldrh	r2, [r7, #14]
 8000c94:	883b      	ldrh	r3, [r7, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3e2      	bcc.n	8000c60 <ILI9341_FillRectangle_Slow+0x24>
        }
    }
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <ILI9341_DrawChar>:

// *** 基于Adafruit GFX逻辑的字符绘制函数 ***
// 这个函数现在会调用我们内部的慢速填充函数
void ILI9341_DrawChar(uint16_t x, uint16_t y, char c, sFont* font, uint16_t color, uint16_t bg, uint8_t size) {
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	4603      	mov	r3, r0
 8000cae:	81fb      	strh	r3, [r7, #14]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	81bb      	strh	r3, [r7, #12]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	72fb      	strb	r3, [r7, #11]
    if (size == 0) size = 1;
 8000cb8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <ILI9341_DrawChar+0x22>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT) ||
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ccc:	f080 80d0 	bcs.w	8000e70 <ILI9341_DrawChar+0x1cc>
 8000cd0:	89bb      	ldrh	r3, [r7, #12]
 8000cd2:	2bef      	cmp	r3, #239	@ 0xef
 8000cd4:	f200 80cc 	bhi.w	8000e70 <ILI9341_DrawChar+0x1cc>
        ((x + font->Width * size - 1) < 0) || ((y + font->Height * size - 1) < 0))
 8000cd8:	89fa      	ldrh	r2, [r7, #14]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	889b      	ldrh	r3, [r3, #4]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ce4:	fb01 f303 	mul.w	r3, r1, r3
 8000ce8:	4413      	add	r3, r2
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT) ||
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f340 80c0 	ble.w	8000e70 <ILI9341_DrawChar+0x1cc>
        ((x + font->Width * size - 1) < 0) || ((y + font->Height * size - 1) < 0))
 8000cf0:	89ba      	ldrh	r2, [r7, #12]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	88db      	ldrh	r3, [r3, #6]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000cfc:	fb01 f303 	mul.w	r3, r1, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f340 80b4 	ble.w	8000e70 <ILI9341_DrawChar+0x1cc>
        return;

    if (c < ' ' || c > '~') c = ' ';
 8000d08:	7afb      	ldrb	r3, [r7, #11]
 8000d0a:	2b1f      	cmp	r3, #31
 8000d0c:	d902      	bls.n	8000d14 <ILI9341_DrawChar+0x70>
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
 8000d10:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d12:	d901      	bls.n	8000d18 <ILI9341_DrawChar+0x74>
 8000d14:	2320      	movs	r3, #32
 8000d16:	72fb      	strb	r3, [r7, #11]

    for (int8_t i = 0; i < font->Width; i++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	75fb      	strb	r3, [r7, #23]
 8000d1c:	e0a0      	b.n	8000e60 <ILI9341_DrawChar+0x1bc>
        uint8_t line = font->table[(c - ' ') * font->Width + i];
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	7afa      	ldrb	r2, [r7, #11]
 8000d24:	3a20      	subs	r2, #32
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	8889      	ldrh	r1, [r1, #4]
 8000d2a:	fb02 f101 	mul.w	r1, r2, r1
 8000d2e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000d32:	440a      	add	r2, r1
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	75bb      	strb	r3, [r7, #22]
        for (int8_t j = 0; j < font->Height; j++, line >>= 1) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	757b      	strb	r3, [r7, #21]
 8000d3e:	e082      	b.n	8000e46 <ILI9341_DrawChar+0x1a2>
            if (line & 0x01) {
 8000d40:	7dbb      	ldrb	r3, [r7, #22]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d038      	beq.n	8000dbc <ILI9341_DrawChar+0x118>
                if (size == 1)
 8000d4a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d110      	bne.n	8000d74 <ILI9341_DrawChar+0xd0>
                    ILI9341_DrawPixel(x + i, y + j, color);
 8000d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	89fb      	ldrh	r3, [r7, #14]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b298      	uxth	r0, r3
 8000d5e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	89bb      	ldrh	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f7ff fe21 	bl	80009b4 <ILI9341_DrawPixel>
 8000d72:	e05f      	b.n	8000e34 <ILI9341_DrawChar+0x190>
                else
                    // *** 调用慢速版 ***
                    ILI9341_FillRectangle_Slow(x + i * size, y + j * size, size, size, color);
 8000d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	fb12 f303 	smulbb	r3, r2, r3
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	89fb      	ldrh	r3, [r7, #14]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b298      	uxth	r0, r3
 8000d8c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	fb12 f303 	smulbb	r3, r2, r3
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	89bb      	ldrh	r3, [r7, #12]
 8000da0:	4413      	add	r3, r2
 8000da2:	b299      	uxth	r1, r3
 8000da4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dae:	b29c      	uxth	r4, r3
 8000db0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	4623      	mov	r3, r4
 8000db6:	f7ff ff41 	bl	8000c3c <ILI9341_FillRectangle_Slow>
 8000dba:	e03b      	b.n	8000e34 <ILI9341_DrawChar+0x190>
            } else if (bg != color) {
 8000dbc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d037      	beq.n	8000e34 <ILI9341_DrawChar+0x190>
                if (size == 1)
 8000dc4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d110      	bne.n	8000dee <ILI9341_DrawChar+0x14a>
                    ILI9341_DrawPixel(x + i, y + j, bg);
 8000dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	89fb      	ldrh	r3, [r7, #14]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b298      	uxth	r0, r3
 8000dd8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	89bb      	ldrh	r3, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	f7ff fde4 	bl	80009b4 <ILI9341_DrawPixel>
 8000dec:	e022      	b.n	8000e34 <ILI9341_DrawChar+0x190>
                else
                    // *** 调用慢速版 ***
                    ILI9341_FillRectangle_Slow(x + i * size, y + j * size, size, size, bg);
 8000dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	fb12 f303 	smulbb	r3, r2, r3
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	4413      	add	r3, r2
 8000e04:	b298      	uxth	r0, r3
 8000e06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	fb12 f303 	smulbb	r3, r2, r3
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b299      	uxth	r1, r3
 8000e1e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e28:	b29c      	uxth	r4, r3
 8000e2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	4623      	mov	r3, r4
 8000e30:	f7ff ff04 	bl	8000c3c <ILI9341_FillRectangle_Slow>
        for (int8_t j = 0; j < font->Height; j++, line >>= 1) {
 8000e34:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	757b      	strb	r3, [r7, #21]
 8000e40:	7dbb      	ldrb	r3, [r7, #22]
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	75bb      	strb	r3, [r7, #22]
 8000e46:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	88d2      	ldrh	r2, [r2, #6]
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	f6ff af76 	blt.w	8000d40 <ILI9341_DrawChar+0x9c>
    for (int8_t i = 0; i < font->Width; i++) {
 8000e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	75fb      	strb	r3, [r7, #23]
 8000e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	8892      	ldrh	r2, [r2, #4]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	f6ff af58 	blt.w	8000d1e <ILI9341_DrawChar+0x7a>
 8000e6e:	e000      	b.n	8000e72 <ILI9341_DrawChar+0x1ce>
        return;
 8000e70:	bf00      	nop
            }
        }
    }
}
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd90      	pop	{r4, r7, pc}

08000e78 <ILI9341_DrawString>:

void ILI9341_DrawString(uint16_t x, uint16_t y, const char* str, sFont* font, uint16_t color, uint16_t bg, uint8_t size) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af04      	add	r7, sp, #16
 8000e7e:	60ba      	str	r2, [r7, #8]
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4603      	mov	r3, r0
 8000e84:	81fb      	strh	r3, [r7, #14]
 8000e86:	460b      	mov	r3, r1
 8000e88:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 8000e8a:	e03c      	b.n	8000f06 <ILI9341_DrawString+0x8e>
    	uint16_t char_width = (font->Width + 1) * size;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	889b      	ldrh	r3, [r3, #4]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	fb12 f303 	smulbb	r3, r2, r3
 8000e9e:	82fb      	strh	r3, [r7, #22]
        if (x + char_width >= ILI9341_WIDTH) {
 8000ea0:	89fa      	ldrh	r2, [r7, #14]
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000eaa:	db17      	blt.n	8000edc <ILI9341_DrawString+0x64>
            x = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	81fb      	strh	r3, [r7, #14]
            y += font->Height * size;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	88da      	ldrh	r2, [r3, #6]
 8000eb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	fb12 f303 	smulbb	r3, r2, r3
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	81bb      	strh	r3, [r7, #12]
            if (y + font->Height * size >= ILI9341_HEIGHT) break;
 8000ec6:	89ba      	ldrh	r2, [r7, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	88db      	ldrh	r3, [r3, #6]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ed2:	fb01 f303 	mul.w	r3, r1, r3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	2bef      	cmp	r3, #239	@ 0xef
 8000eda:	dc19      	bgt.n	8000f10 <ILI9341_DrawString+0x98>
        }
        ILI9341_DrawChar(x, y, *str, font, color, bg, size);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	89b9      	ldrh	r1, [r7, #12]
 8000ee2:	89f8      	ldrh	r0, [r7, #14]
 8000ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	8c3b      	ldrh	r3, [r7, #32]
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f7ff fed6 	bl	8000ca4 <ILI9341_DrawChar>
        x += char_width;
 8000ef8:	89fa      	ldrh	r2, [r7, #14]
 8000efa:	8afb      	ldrh	r3, [r7, #22]
 8000efc:	4413      	add	r3, r2
 8000efe:	81fb      	strh	r3, [r7, #14]
        str++;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1be      	bne.n	8000e8c <ILI9341_DrawString+0x14>
    }
}
 8000f0e:	e000      	b.n	8000f12 <ILI9341_DrawString+0x9a>
            if (y + font->Height * size >= ILI9341_HEIGHT) break;
 8000f10:	bf00      	nop
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_SPI_TxCpltCallback>:

// --- SPI DMA传输完成回调函数 ---
// 当DMA完成SPI发送后，硬件会自动调用这个函数
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    // 检查是否是我们正在使用的SPI1
    if (hspi->Instance == SPI1) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <HAL_SPI_TxCpltCallback+0x24>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d102      	bne.n	8000f34 <HAL_SPI_TxCpltCallback+0x18>
        // 设置标志位，表示传输已完成
        spi_dma_tx_completed = 1;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_SPI_TxCpltCallback+0x28>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
    }
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40013000 	.word	0x40013000
 8000f44:	20000008 	.word	0x20000008

08000f48 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    // 在这里设置第二个断点 (断点2)
    // 如果程序停在这里，就说明DMA出错了！
    __NOP(); // 这是一条空指令，方便设置断点
 8000f50:	bf00      	nop
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f66:	f000 fe4f 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000f6a:	f000 f90d 	bl	8001188 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f8af 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 f9bb 	bl	80012ec <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f76:	f000 f915 	bl	80011a4 <MX_GPDMA1_Init>
  MX_SPI1_Init();
 8000f7a:	f000 f947 	bl	800120c <MX_SPI1_Init>
  MX_ICACHE_Init();
 8000f7e:	f000 f931 	bl	80011e4 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  // 初始化TFT显示屏
  ILI9341_Init();
 8000f82:	f7ff fc05 	bl	8000790 <ILI9341_Init>

  ILI9341_FillScreen(ILI9341_BLACK);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fd01 	bl	800098e <ILI9341_FillScreen>
//  ILI9341_FillRectangle(50, 50, 140, 30, ILI9341_RED);
//  ILI9341_FillRectangle(50, 150, 140, 30, ILI9341_GREEN);
  // --- 文字显示测试 ---
  ILI9341_DrawString(10, 10, "Hello World!", &Font_5x7, ILI9341_WHITE, ILI9341_BLACK, 1);
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2300      	movs	r3, #0
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4b47      	ldr	r3, [pc, #284]	@ (80010b8 <main+0x158>)
 8000f9c:	4a47      	ldr	r2, [pc, #284]	@ (80010bc <main+0x15c>)
 8000f9e:	210a      	movs	r1, #10
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f7ff ff69 	bl	8000e78 <ILI9341_DrawString>
    ILI9341_DrawString(10, 30, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", &Font_5x7, ILI9341_RED, ILI9341_BLACK, 2);
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	4b40      	ldr	r3, [pc, #256]	@ (80010b8 <main+0x158>)
 8000fb6:	4a42      	ldr	r2, [pc, #264]	@ (80010c0 <main+0x160>)
 8000fb8:	211e      	movs	r1, #30
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f7ff ff5c 	bl	8000e78 <ILI9341_DrawString>
    ILI9341_DrawString(10, 50, "abcdefghijklmnopqrstuvwxyz", &Font_5x7, ILI9341_GREEN, ILI9341_BLACK, 3);
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4b3a      	ldr	r3, [pc, #232]	@ (80010b8 <main+0x158>)
 8000fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80010c4 <main+0x164>)
 8000fd2:	2132      	movs	r1, #50	@ 0x32
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f7ff ff4f 	bl	8000e78 <ILI9341_DrawString>
    ILI9341_DrawString(10, 70, "0123456789", &Font_5x7, ILI9341_BLUE, ILI9341_BLACK, 4);
 8000fda:	2304      	movs	r3, #4
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <main+0x158>)
 8000fe8:	4a37      	ldr	r2, [pc, #220]	@ (80010c8 <main+0x168>)
 8000fea:	2146      	movs	r1, #70	@ 0x46
 8000fec:	200a      	movs	r0, #10
 8000fee:	f7ff ff43 	bl	8000e78 <ILI9341_DrawString>
    char display_str[2] = {0}; // 创建一个长度为2的字符串，用于存放单个字符和结束符'\0'
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	80bb      	strh	r3, [r7, #4]
      uint16_t x_pos = 10;       // 初始X坐标
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	81fb      	strh	r3, [r7, #14]
      uint16_t y_pos = 150;       // 初始Y坐标
 8000ffa:	2396      	movs	r3, #150	@ 0x96
 8000ffc:	81bb      	strh	r3, [r7, #12]
      uint16_t text_color = ILI9341_WHITE;
 8000ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001002:	813b      	strh	r3, [r7, #8]
      uint16_t bg_color = ILI9341_BLACK;
 8001004:	2300      	movs	r3, #0
 8001006:	80fb      	strh	r3, [r7, #6]

      // 4. 循环打印所有可见的ASCII字符 (从32号的空格 ' ' 到 126号的 '~')
      for (char c = 32; c <= 126; c++) {
 8001008:	2320      	movs	r3, #32
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	e027      	b.n	800105e <main+0xfe>
          // 将当前字符放入字符串中
          display_str[0] = c;
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	713b      	strb	r3, [r7, #4]

          // 检查是否需要换行
          // 加上字宽和一点边距，判断是否会超出屏幕右边界
          if (x_pos + Font_5x7.Width > ILI9341_WIDTH - 10) {
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	4a28      	ldr	r2, [pc, #160]	@ (80010b8 <main+0x158>)
 8001016:	8892      	ldrh	r2, [r2, #4]
 8001018:	4413      	add	r3, r2
 800101a:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800101e:	dd08      	ble.n	8001032 <main+0xd2>
              x_pos = 10; // X坐标回到最左边
 8001020:	230a      	movs	r3, #10
 8001022:	81fb      	strh	r3, [r7, #14]
              y_pos += Font_5x7.Height + 4; // Y坐标下移一行 (字体高度 + 4像素行间距)
 8001024:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <main+0x158>)
 8001026:	88da      	ldrh	r2, [r3, #6]
 8001028:	89bb      	ldrh	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	3304      	adds	r3, #4
 8001030:	81bb      	strh	r3, [r7, #12]
          }

          // 在屏幕上绘制当前字符
          ILI9341_DrawString(x_pos, y_pos, display_str, &Font_5x7, text_color, bg_color, 1);
 8001032:	1d3a      	adds	r2, r7, #4
 8001034:	89b9      	ldrh	r1, [r7, #12]
 8001036:	89f8      	ldrh	r0, [r7, #14]
 8001038:	2301      	movs	r3, #1
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	893b      	ldrh	r3, [r7, #8]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <main+0x158>)
 8001046:	f7ff ff17 	bl	8000e78 <ILI9341_DrawString>

          // 更新下一个字符的X坐标
          x_pos += Font_5x7.Width + 4; // X坐标右移 (字体宽度 + 4像素字间距)
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <main+0x158>)
 800104c:	889a      	ldrh	r2, [r3, #4]
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	4413      	add	r3, r2
 8001052:	b29b      	uxth	r3, r3
 8001054:	3304      	adds	r3, #4
 8001056:	81fb      	strh	r3, [r7, #14]
      for (char c = 32; c <= 126; c++) {
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	3301      	adds	r3, #1
 800105c:	72fb      	strb	r3, [r7, #11]
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	2b7e      	cmp	r3, #126	@ 0x7e
 8001062:	d9d4      	bls.n	800100e <main+0xae>
      }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fbe1 	bl	800182c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800106a:	2001      	movs	r0, #1
 800106c:	f000 fbde 	bl	800182c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001070:	2002      	movs	r0, #2
 8001072:	f000 fbdb 	bl	800182c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001076:	2101      	movs	r1, #1
 8001078:	2000      	movs	r0, #0
 800107a:	f000 fc67 	bl	800194c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <main+0x16c>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001084:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <main+0x16c>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <main+0x16c>)
 800108e:	2200      	movs	r2, #0
 8001090:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <main+0x16c>)
 8001094:	2200      	movs	r2, #0
 8001096:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <main+0x16c>)
 800109a:	2200      	movs	r2, #0
 800109c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800109e:	490b      	ldr	r1, [pc, #44]	@ (80010cc <main+0x16c>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fced 	bl	8001a80 <BSP_COM_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <main+0x152>
  {
    Error_Handler();
 80010ac:	f000 f9ba 	bl	8001424 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	e7fd      	b.n	80010b2 <main+0x152>
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000
 80010bc:	08009488 	.word	0x08009488
 80010c0:	08009498 	.word	0x08009498
 80010c4:	080094b4 	.word	0x080094b4
 80010c8:	080094d0 	.word	0x080094d0
 80010cc:	20000050 	.word	0x20000050

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09e      	sub	sp, #120	@ 0x78
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	2260      	movs	r2, #96	@ 0x60
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f008 f999 	bl	8009416 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010f4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80010f8:	f002 f8c0 	bl	800327c <HAL_PWREx_ControlVoltageScaling>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001102:	f000 f98f 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001106:	2310      	movs	r3, #16
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800110a:	2301      	movs	r3, #1
 800110c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800110e:	2310      	movs	r3, #16
 8001110:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800111a:	2301      	movs	r3, #1
 800111c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800111e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001122:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001124:	2303      	movs	r3, #3
 8001126:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001128:	230a      	movs	r3, #10
 800112a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800112c:	2302      	movs	r3, #2
 800112e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001138:	230c      	movs	r3, #12
 800113a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4618      	mov	r0, r3
 8001146:	f002 f995 	bl	8003474 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001150:	f000 f968 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	231f      	movs	r3, #31
 8001156:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2303      	movs	r3, #3
 800115a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2104      	movs	r1, #4
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f85b 	bl	800422c <HAL_RCC_ClockConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800117c:	f000 f952 	bl	8001424 <Error_Handler>
  }
}
 8001180:	bf00      	nop
 8001182:	3778      	adds	r7, #120	@ 0x78
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800118c:	f002 f962 	bl	8003454 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001190:	2002      	movs	r0, #2
 8001192:	f002 f8ff 	bl	8003394 <HAL_PWREx_ConfigSupply>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800119c:	f000 f942 	bl	8001424 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <MX_GPDMA1_Init+0x3c>)
 80011ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b0:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <MX_GPDMA1_Init+0x3c>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_GPDMA1_Init+0x3c>)
 80011bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	201d      	movs	r0, #29
 80011ce:	f000 fe47 	bl	8001e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80011d2:	201d      	movs	r0, #29
 80011d4:	f000 fe5e 	bl	8001e94 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	46020c00 	.word	0x46020c00

080011e4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80011e8:	2000      	movs	r0, #0
 80011ea:	f002 f817 	bl	800321c <HAL_ICACHE_ConfigAssociativityMode>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80011f4:	f000 f916 	bl	8001424 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80011f8:	f002 f830 	bl	800325c <HAL_ICACHE_Enable>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001202:	f000 f90f 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800121c:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800121e:	4a32      	ldr	r2, [pc, #200]	@ (80012e8 <MX_SPI1_Init+0xdc>)
 8001220:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001222:	4b30      	ldr	r3, [pc, #192]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001224:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001228:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122a:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001230:	4b2c      	ldr	r3, [pc, #176]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001232:	2207      	movs	r2, #7
 8001234:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001236:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001242:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001244:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001248:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800124a:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800124c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001250:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001252:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001266:	2207      	movs	r2, #7
 8001268:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800126c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001270:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001278:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800127c:	2200      	movs	r2, #0
 800127e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001282:	2200      	movs	r2, #0
 8001284:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001288:	2200      	movs	r2, #0
 800128a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800128e:	2200      	movs	r2, #0
 8001290:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 8001294:	2200      	movs	r2, #0
 8001296:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 800129a:	2200      	movs	r2, #0
 800129c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 80012ac:	f006 f85e 	bl	800736c <HAL_SPI_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80012b6:	f000 f8b5 	bl	8001424 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80012be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012c2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_SPI1_Init+0xd8>)
 80012ce:	f007 f886 	bl	80083de <HAL_SPIEx_SetConfigAutonomousMode>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 80012d8:	f000 f8a4 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000060 	.word	0x20000060
 80012e8:	40013000 	.word	0x40013000

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	4b3c      	ldr	r3, [pc, #240]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001308:	4a3a      	ldr	r2, [pc, #232]	@ (80013f4 <MX_GPIO_Init+0x108>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001312:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b34      	ldr	r3, [pc, #208]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001326:	4a33      	ldr	r2, [pc, #204]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001330:	4b30      	ldr	r3, [pc, #192]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800133e:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001344:	4a2b      	ldr	r2, [pc, #172]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001346:	f043 0320 	orr.w	r3, r3, #32
 800134a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001354:	f003 0320 	and.w	r3, r3, #32
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <MX_GPIO_Init+0x108>)
 800135e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001362:	4a24      	ldr	r2, [pc, #144]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800136c:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_GPIO_Init+0x108>)
 800136e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_GPIO_Init+0x108>)
 800137c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001380:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <MX_GPIO_Init+0x108>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <MX_GPIO_Init+0x108>)
 800138c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800139e:	4816      	ldr	r0, [pc, #88]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 80013a0:	f001 ff24 	bl	80031ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80013aa:	4814      	ldr	r0, [pc, #80]	@ (80013fc <MX_GPIO_Init+0x110>)
 80013ac:	f001 ff1e 	bl	80031ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 80013b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <MX_GPIO_Init+0x10c>)
 80013ca:	f001 fd2f 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin;
 80013ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_GPIO_Init+0x110>)
 80013e8:	f001 fd20 	bl	8002e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	46020c00 	.word	0x46020c00
 80013f8:	42021400 	.word	0x42021400
 80013fc:	42020c00 	.word	0x42020c00

08001400 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001412:	f000 fc29 	bl	8001c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40014800 	.word	0x40014800

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_MspInit+0x34>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_MspInit+0x34>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <HAL_MspInit+0x34>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001454:	2004      	movs	r0, #4
 8001456:	f000 fcf8 	bl	8001e4a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	46020c00 	.word	0x46020c00

08001468 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b0ba      	sub	sp, #232	@ 0xe8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	22c0      	movs	r2, #192	@ 0xc0
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f007 ffc4 	bl	8009416 <memset>
  if(hspi->Instance==SPI1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a4d      	ldr	r2, [pc, #308]	@ (80015c8 <HAL_SPI_MspInit+0x160>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f040 8092 	bne.w	80015be <HAL_SPI_MspInit+0x156>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800149a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80014a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fac2 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_SPI_MspInit+0x5a>
    {
      Error_Handler();
 80014be:	f7ff ffb1 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c2:	4b42      	ldr	r3, [pc, #264]	@ (80015cc <HAL_SPI_MspInit+0x164>)
 80014c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014c8:	4a40      	ldr	r2, [pc, #256]	@ (80015cc <HAL_SPI_MspInit+0x164>)
 80014ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ce:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014d2:	4b3e      	ldr	r3, [pc, #248]	@ (80015cc <HAL_SPI_MspInit+0x164>)
 80014d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <HAL_SPI_MspInit+0x164>)
 80014e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e6:	4a39      	ldr	r2, [pc, #228]	@ (80015cc <HAL_SPI_MspInit+0x164>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f0:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <HAL_SPI_MspInit+0x164>)
 80014f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014fe:	23e0      	movs	r3, #224	@ 0xe0
 8001500:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001516:	2305      	movs	r3, #5
 8001518:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001520:	4619      	mov	r1, r3
 8001522:	482b      	ldr	r0, [pc, #172]	@ (80015d0 <HAL_SPI_MspInit+0x168>)
 8001524:	f001 fc82 	bl	8002e2c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001528:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 800152a:	4a2b      	ldr	r2, [pc, #172]	@ (80015d8 <HAL_SPI_MspInit+0x170>)
 800152c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 800152e:	4b29      	ldr	r3, [pc, #164]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001530:	2207      	movs	r2, #7
 8001532:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001534:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800153a:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 800153c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001540:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001542:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001544:	2208      	movs	r2, #8
 8001546:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001562:	2201      	movs	r2, #1
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001568:	2201      	movs	r2, #1
 800156a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001574:	2200      	movs	r2, #0
 8001576:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001578:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 800157a:	2200      	movs	r2, #0
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800157e:	4815      	ldr	r0, [pc, #84]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001580:	f000 fcee 	bl	8001f60 <HAL_DMA_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 800158a:	f7ff ff4b 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel0);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001592:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800159c:	2110      	movs	r1, #16
 800159e:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <HAL_SPI_MspInit+0x16c>)
 80015a0:	f001 f816 	bl	80025d0 <HAL_DMA_ConfigChannelAttributes>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 80015aa:	f7ff ff3b 	bl	8001424 <Error_Handler>
    }

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	203b      	movs	r0, #59	@ 0x3b
 80015b4:	f000 fc54 	bl	8001e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015b8:	203b      	movs	r0, #59	@ 0x3b
 80015ba:	f000 fc6b 	bl	8001e94 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015be:	bf00      	nop
 80015c0:	37e8      	adds	r7, #232	@ 0xe8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40013000 	.word	0x40013000
 80015cc:	46020c00 	.word	0x46020c00
 80015d0:	42020000 	.word	0x42020000
 80015d4:	200000f0 	.word	0x200000f0
 80015d8:	40020050 	.word	0x40020050

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	@ 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80015ec:	4b2e      	ldr	r3, [pc, #184]	@ (80016a8 <HAL_InitTick+0xcc>)
 80015ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015f2:	4a2d      	ldr	r2, [pc, #180]	@ (80016a8 <HAL_InitTick+0xcc>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015fc:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <HAL_InitTick+0xcc>)
 80015fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800160a:	f107 0210 	add.w	r2, r7, #16
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f003 f953 	bl	80048c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800161a:	f003 f929 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 800161e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001622:	4a22      	ldr	r2, [pc, #136]	@ (80016ac <HAL_InitTick+0xd0>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9b      	lsrs	r3, r3, #18
 800162a:	3b01      	subs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <HAL_InitTick+0xd4>)
 8001630:	4a20      	ldr	r2, [pc, #128]	@ (80016b4 <HAL_InitTick+0xd8>)
 8001632:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001634:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <HAL_InitTick+0xd4>)
 8001636:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800163a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800163c:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <HAL_InitTick+0xd4>)
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001640:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_InitTick+0xd4>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <HAL_InitTick+0xd4>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800164e:	4818      	ldr	r0, [pc, #96]	@ (80016b0 <HAL_InitTick+0xd4>)
 8001650:	f006 ff06 	bl	8008460 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800165a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001662:	4813      	ldr	r0, [pc, #76]	@ (80016b0 <HAL_InitTick+0xd4>)
 8001664:	f006 ff5e 	bl	8008524 <HAL_TIM_Base_Start_IT>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800166e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10e      	bne.n	8001694 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d808      	bhi.n	800168e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2047      	movs	r0, #71	@ 0x47
 8001682:	f000 fbed 	bl	8001e60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001686:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_InitTick+0xdc>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e002      	b.n	8001694 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001694:	2047      	movs	r0, #71	@ 0x47
 8001696:	f000 fbfd 	bl	8001e94 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800169a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3738      	adds	r7, #56	@ 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	46020c00 	.word	0x46020c00
 80016ac:	431bde83 	.word	0x431bde83
 80016b0:	20000168 	.word	0x20000168
 80016b4:	40014800 	.word	0x40014800
 80016b8:	2000002c 	.word	0x2000002c

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <NMI_Handler+0x4>

080016c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <MemManage_Handler+0x4>

080016d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001720:	2000      	movs	r0, #0
 8001722:	f000 f98b 	bl	8001a3c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001732:	f000 fde0 	bl	80022f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000f0 	.word	0x200000f0

08001740 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <SPI1_IRQHandler+0x10>)
 8001746:	f006 faf7 	bl	8007d38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000060 	.word	0x20000060

08001754 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <TIM17_IRQHandler+0x10>)
 800175a:	f006 ff83 	bl	8008664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000168 	.word	0x20000168

08001768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <SystemInit+0x68>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001772:	4a17      	ldr	r2, [pc, #92]	@ (80017d0 <SystemInit+0x68>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <SystemInit+0x6c>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <SystemInit+0x6c>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <SystemInit+0x6c>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <SystemInit+0x6c>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001794:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <SystemInit+0x6c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <SystemInit+0x6c>)
 800179a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800179e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80017a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <SystemInit+0x6c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <SystemInit+0x6c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <SystemInit+0x6c>)
 80017b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <SystemInit+0x6c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SystemInit+0x68>)
 80017be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017c2:	609a      	str	r2, [r3, #8]
  #endif
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	46020c00 	.word	0x46020c00

080017d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017dc:	f7ff ffc4 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017e2:	e003      	b.n	80017ec <LoopCopyDataInit>

080017e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017ea:	3104      	adds	r1, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017ec:	480a      	ldr	r0, [pc, #40]	@ (8001818 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <LoopForever+0xe>)
	adds	r2, r0, r1
 80017f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017f4:	d3f6      	bcc.n	80017e4 <CopyDataInit>
	ldr	r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017f8:	e002      	b.n	8001800 <LoopFillZerobss>

080017fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017fc:	f842 3b04 	str.w	r3, [r2], #4

08001800 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <LoopForever+0x16>)
	cmp	r2, r3
 8001802:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001804:	d3f9      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f007 fe0f 	bl	8009428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180a:	f7ff fba9 	bl	8000f60 <main>

0800180e <LoopForever>:

LoopForever:
    b LoopForever
 800180e:	e7fe      	b.n	800180e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001810:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001814:	080097c4 	.word	0x080097c4
	ldr	r0, =_sdata
 8001818:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800181c:	20000031 	.word	0x20000031
	ldr	r2, =_sbss
 8001820:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 8001824:	20000258 	.word	0x20000258

08001828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_IRQHandler>
	...

0800182c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08e      	sub	sp, #56	@ 0x38
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001836:	2300      	movs	r3, #0
 8001838:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d009      	beq.n	8001858 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <BSP_LED_Init+0x2c>
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d003      	beq.n	8001858 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001850:	f06f 0301 	mvn.w	r3, #1
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
 8001856:	e06e      	b.n	8001936 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10f      	bne.n	800187e <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <BSP_LED_Init+0x114>)
 8001860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001864:	4a36      	ldr	r2, [pc, #216]	@ (8001940 <BSP_LED_Init+0x114>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800186e:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <BSP_LED_Init+0x114>)
 8001870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	e046      	b.n	800190c <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10f      	bne.n	80018a4 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001884:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <BSP_LED_Init+0x114>)
 8001886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188a:	4a2d      	ldr	r2, [pc, #180]	@ (8001940 <BSP_LED_Init+0x114>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001894:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <BSP_LED_Init+0x114>)
 8001896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	e033      	b.n	800190c <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a4:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <BSP_LED_Init+0x114>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d110      	bne.n	80018d4 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <BSP_LED_Init+0x114>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b8:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <BSP_LED_Init+0x114>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80018c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <BSP_LED_Init+0x114>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 80018d0:	2301      	movs	r3, #1
 80018d2:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 80018d4:	f001 fdae 	bl	8003434 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 80018d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018de:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <BSP_LED_Init+0x114>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e4:	4a16      	ldr	r2, [pc, #88]	@ (8001940 <BSP_LED_Init+0x114>)
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 80018ee:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <BSP_LED_Init+0x114>)
 80018f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <BSP_LED_Init+0x114>)
 80018f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <BSP_LED_Init+0x114>)
 8001900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <BSP_LED_Init+0x118>)
 8001910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001914:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4a08      	ldr	r2, [pc, #32]	@ (8001948 <BSP_LED_Init+0x11c>)
 8001926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192a:	f107 021c 	add.w	r2, r7, #28
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fa7b 	bl	8002e2c <HAL_GPIO_Init>
  }

  return ret;
 8001936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001938:	4618      	mov	r0, r3
 800193a:	3738      	adds	r7, #56	@ 0x38
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	46020c00 	.word	0x46020c00
 8001944:	08009710 	.word	0x08009710
 8001948:	20000014 	.word	0x20000014

0800194c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800195c:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <BSP_PB_Init+0xd4>)
 800195e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001962:	4a2f      	ldr	r2, [pc, #188]	@ (8001a20 <BSP_PB_Init+0xd4>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800196c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <BSP_PB_Init+0xd4>)
 800196e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800197a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800197e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001980:	2302      	movs	r3, #2
 8001982:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <BSP_PB_Init+0xd8>)
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	f107 020c 	add.w	r2, r7, #12
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fa43 	bl	8002e2c <HAL_GPIO_Init>
 80019a6:	e036      	b.n	8001a16 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <BSP_PB_Init+0xdc>)
 80019aa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001a24 <BSP_PB_Init+0xd8>)
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	f107 020c 	add.w	r2, r7, #12
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fa36 	bl	8002e2c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80019c0:	79fa      	ldrb	r2, [r7, #7]
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4a18      	ldr	r2, [pc, #96]	@ (8001a2c <BSP_PB_Init+0xe0>)
 80019cc:	441a      	add	r2, r3
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4917      	ldr	r1, [pc, #92]	@ (8001a30 <BSP_PB_Init+0xe4>)
 80019d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f001 f9cb 	bl	8002d74 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <BSP_PB_Init+0xe0>)
 80019ea:	1898      	adds	r0, r3, r2
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4a11      	ldr	r2, [pc, #68]	@ (8001a34 <BSP_PB_Init+0xe8>)
 80019f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f4:	461a      	mov	r2, r3
 80019f6:	2100      	movs	r1, #0
 80019f8:	f001 f990 	bl	8002d1c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80019fc:	2018      	movs	r0, #24
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <BSP_PB_Init+0xec>)
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	2200      	movs	r2, #0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f000 fa29 	bl	8001e60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a0e:	2318      	movs	r3, #24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fa3f 	bl	8001e94 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	46020c00 	.word	0x46020c00
 8001a24:	20000020 	.word	0x20000020
 8001a28:	10110000 	.word	0x10110000
 8001a2c:	200001b4 	.word	0x200001b4
 8001a30:	08009718 	.word	0x08009718
 8001a34:	20000024 	.word	0x20000024
 8001a38:	20000028 	.word	0x20000028

08001a3c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <BSP_PB_IRQHandler+0x28>)
 8001a52:	4413      	add	r3, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 f9a1 	bl	8002d9c <HAL_EXTI_IRQHandler>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001b4 	.word	0x200001b4

08001a68 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a96:	f06f 0301 	mvn.w	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e018      	b.n	8001ad0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2294      	movs	r2, #148	@ 0x94
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <BSP_COM_Init+0x5c>)
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f854 	bl	8001b58 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	2294      	movs	r2, #148	@ 0x94
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <BSP_COM_Init+0x5c>)
 8001aba:	4413      	add	r3, r2
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f80e 	bl	8001ae0 <MX_USART1_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001aca:	f06f 0303 	mvn.w	r3, #3
 8001ace:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200001c0 	.word	0x200001c0

08001ae0 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <MX_USART1_Init+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220c      	movs	r2, #12
 8001afe:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	895b      	ldrh	r3, [r3, #10]
 8001b04:	461a      	mov	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	891b      	ldrh	r3, [r3, #8]
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	899b      	ldrh	r3, [r3, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b2c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f007 f853 	bl	8008be0 <HAL_UART_Init>
 8001b3a:	4603      	mov	r3, r0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000010 	.word	0x20000010

08001b48 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff ff8b 	bl	8001a68 <BSP_PB_Callback>
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	@ 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001b60:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b66:	4a26      	ldr	r2, [pc, #152]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b70:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b84:	4a1e      	ldr	r2, [pc, #120]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b9c:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001b9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ba2:	4a17      	ldr	r2, [pc, #92]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <COM1_MspInit+0xa8>)
 8001bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bbe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480b      	ldr	r0, [pc, #44]	@ (8001c04 <COM1_MspInit+0xac>)
 8001bd8:	f001 f928 	bl	8002e2c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001be6:	2307      	movs	r3, #7
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <COM1_MspInit+0xac>)
 8001bf2:	f001 f91b 	bl	8002e2c <HAL_GPIO_Init>
}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	@ 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	46020c00 	.word	0x46020c00
 8001c04:	42020000 	.word	0x42020000

08001c08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_Init+0x50>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a11      	ldr	r2, [pc, #68]	@ (8001c58 <HAL_Init+0x50>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f000 f916 	bl	8001e4a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c1e:	f002 fcf7 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_Init+0x54>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <HAL_Init+0x58>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	4a0b      	ldr	r2, [pc, #44]	@ (8001c64 <HAL_Init+0x5c>)
 8001c36:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c38:	2004      	movs	r0, #4
 8001c3a:	f000 f939 	bl	8001eb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3e:	2007      	movs	r0, #7
 8001c40:	f7ff fccc 	bl	80015dc <HAL_InitTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e002      	b.n	8001c54 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4e:	f7ff fbef 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	46020c00 	.word	0x46020c00
 8001c60:	080096b8 	.word	0x080096b8
 8001c64:	2000000c 	.word	0x2000000c

08001c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000030 	.word	0x20000030
 8001c8c:	20000254 	.word	0x20000254

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000254 	.word	0x20000254

08001ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff ffee 	bl	8001c90 <HAL_GetTick>
 8001cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d005      	beq.n	8001cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_Delay+0x44>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cce:	bf00      	nop
 8001cd0:	f7ff ffde 	bl	8001c90 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d8f7      	bhi.n	8001cd0 <HAL_Delay+0x28>
  {
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000030 	.word	0x20000030

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4907      	ldr	r1, [pc, #28]	@ (8001d8c <__NVIC_EnableIRQ+0x38>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	@ (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	@ (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	@ 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	@ 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ff4c 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6e:	f7ff ff63 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001e72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	6978      	ldr	r0, [r7, #20]
 8001e7a:	f7ff ffb3 	bl	8001de4 <NVIC_EncodePriority>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff82 	bl	8001d90 <__NVIC_SetPriority>
}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff56 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d844      	bhi.n	8001f48 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ee7 	.word	0x08001ee7
 8001ec8:	08001f05 	.word	0x08001f05
 8001ecc:	08001f27 	.word	0x08001f27
 8001ed0:	08001f49 	.word	0x08001f49
 8001ed4:	08001ed9 	.word	0x08001ed9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6013      	str	r3, [r2, #0]
      break;
 8001ee4:	e031      	b.n	8001f4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef8:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001efa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f02:	e022      	b.n	8001f4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f1a:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f24:	e011      	b.n	8001f4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f3c:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f48:	bf00      	nop
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010
 8001f5c:	46020c00 	.word	0x46020c00

08001f60 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fe92 	bl	8001c90 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0f0      	b.n	800215a <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a79      	ldr	r2, [pc, #484]	@ (8002164 <HAL_DMA_Init+0x204>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f000 809f 	beq.w	80020c2 <HAL_DMA_Init+0x162>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a77      	ldr	r2, [pc, #476]	@ (8002168 <HAL_DMA_Init+0x208>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f000 8099 	beq.w	80020c2 <HAL_DMA_Init+0x162>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a75      	ldr	r2, [pc, #468]	@ (800216c <HAL_DMA_Init+0x20c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	f000 8093 	beq.w	80020c2 <HAL_DMA_Init+0x162>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a73      	ldr	r2, [pc, #460]	@ (8002170 <HAL_DMA_Init+0x210>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	f000 808d 	beq.w	80020c2 <HAL_DMA_Init+0x162>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a71      	ldr	r2, [pc, #452]	@ (8002174 <HAL_DMA_Init+0x214>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_DMA_Init+0x162>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6f      	ldr	r2, [pc, #444]	@ (8002178 <HAL_DMA_Init+0x218>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	f000 8081 	beq.w	80020c2 <HAL_DMA_Init+0x162>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6d      	ldr	r2, [pc, #436]	@ (800217c <HAL_DMA_Init+0x21c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d07b      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6c      	ldr	r2, [pc, #432]	@ (8002180 <HAL_DMA_Init+0x220>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d076      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <HAL_DMA_Init+0x224>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d071      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a69      	ldr	r2, [pc, #420]	@ (8002188 <HAL_DMA_Init+0x228>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d06c      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a67      	ldr	r2, [pc, #412]	@ (800218c <HAL_DMA_Init+0x22c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d067      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a66      	ldr	r2, [pc, #408]	@ (8002190 <HAL_DMA_Init+0x230>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d062      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a64      	ldr	r2, [pc, #400]	@ (8002194 <HAL_DMA_Init+0x234>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d05d      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a63      	ldr	r2, [pc, #396]	@ (8002198 <HAL_DMA_Init+0x238>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d058      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a61      	ldr	r2, [pc, #388]	@ (800219c <HAL_DMA_Init+0x23c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d053      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a60      	ldr	r2, [pc, #384]	@ (80021a0 <HAL_DMA_Init+0x240>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04e      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5e      	ldr	r2, [pc, #376]	@ (80021a4 <HAL_DMA_Init+0x244>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d049      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5d      	ldr	r2, [pc, #372]	@ (80021a8 <HAL_DMA_Init+0x248>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d044      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a5b      	ldr	r2, [pc, #364]	@ (80021ac <HAL_DMA_Init+0x24c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d03f      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a5a      	ldr	r2, [pc, #360]	@ (80021b0 <HAL_DMA_Init+0x250>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d03a      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a58      	ldr	r2, [pc, #352]	@ (80021b4 <HAL_DMA_Init+0x254>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d035      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a57      	ldr	r2, [pc, #348]	@ (80021b8 <HAL_DMA_Init+0x258>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d030      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a55      	ldr	r2, [pc, #340]	@ (80021bc <HAL_DMA_Init+0x25c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02b      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a54      	ldr	r2, [pc, #336]	@ (80021c0 <HAL_DMA_Init+0x260>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d026      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <HAL_DMA_Init+0x264>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d021      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a51      	ldr	r2, [pc, #324]	@ (80021c8 <HAL_DMA_Init+0x268>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01c      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a4f      	ldr	r2, [pc, #316]	@ (80021cc <HAL_DMA_Init+0x26c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d017      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a4e      	ldr	r2, [pc, #312]	@ (80021d0 <HAL_DMA_Init+0x270>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d012      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	@ (80021d4 <HAL_DMA_Init+0x274>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a4b      	ldr	r2, [pc, #300]	@ (80021d8 <HAL_DMA_Init+0x278>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d008      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <HAL_DMA_Init+0x27c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d003      	beq.n	80020c2 <HAL_DMA_Init+0x162>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a48      	ldr	r2, [pc, #288]	@ (80021e0 <HAL_DMA_Init+0x280>)
 80020c0:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10e      	bne.n	80020f4 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0206 	orr.w	r2, r2, #6
 800210a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800210c:	e00f      	b.n	800212e <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800210e:	f7ff fdbf 	bl	8001c90 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b05      	cmp	r3, #5
 800211a:	d908      	bls.n	800212e <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2210      	movs	r2, #16
 8002120:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2203      	movs	r2, #3
 8002126:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e015      	b.n	800215a <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e8      	bne.n	800210e <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 faa9 	bl	8002694 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40020050 	.word	0x40020050
 8002168:	50020050 	.word	0x50020050
 800216c:	400200d0 	.word	0x400200d0
 8002170:	500200d0 	.word	0x500200d0
 8002174:	40020150 	.word	0x40020150
 8002178:	50020150 	.word	0x50020150
 800217c:	400201d0 	.word	0x400201d0
 8002180:	500201d0 	.word	0x500201d0
 8002184:	40020250 	.word	0x40020250
 8002188:	50020250 	.word	0x50020250
 800218c:	400202d0 	.word	0x400202d0
 8002190:	500202d0 	.word	0x500202d0
 8002194:	40020350 	.word	0x40020350
 8002198:	50020350 	.word	0x50020350
 800219c:	400203d0 	.word	0x400203d0
 80021a0:	500203d0 	.word	0x500203d0
 80021a4:	40020450 	.word	0x40020450
 80021a8:	50020450 	.word	0x50020450
 80021ac:	400204d0 	.word	0x400204d0
 80021b0:	500204d0 	.word	0x500204d0
 80021b4:	40020550 	.word	0x40020550
 80021b8:	50020550 	.word	0x50020550
 80021bc:	400205d0 	.word	0x400205d0
 80021c0:	500205d0 	.word	0x500205d0
 80021c4:	40020650 	.word	0x40020650
 80021c8:	50020650 	.word	0x50020650
 80021cc:	400206d0 	.word	0x400206d0
 80021d0:	500206d0 	.word	0x500206d0
 80021d4:	40020750 	.word	0x40020750
 80021d8:	50020750 	.word	0x50020750
 80021dc:	400207d0 	.word	0x400207d0
 80021e0:	500207d0 	.word	0x500207d0

080021e4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e04f      	b.n	800229c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_DMA_Start_IT+0x26>
 8002206:	2302      	movs	r3, #2
 8002208:	e048      	b.n	800229c <HAL_DMA_Start_IT+0xb8>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d136      	bne.n	800228c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa08 	bl	8002648 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002246:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800225e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002276:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e007      	b.n	800229c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2240      	movs	r2, #64	@ 0x40
 8002290:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e019      	b.n	80022ea <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d004      	beq.n	80022cc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e00e      	b.n	80022ea <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2204      	movs	r2, #4
 80022d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002306:	f023 030f 	bic.w	r3, r3, #15
 800230a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	3b50      	subs	r3, #80	@ 0x50
 8002316:	09db      	lsrs	r3, r3, #7
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2201      	movs	r2, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 813b 	beq.w	80025ac <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d011      	beq.n	8002368 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800235a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002372:	2b00      	cmp	r3, #0
 8002374:	d011      	beq.n	800239a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800238c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d011      	beq.n	80023cc <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023be:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c4:	f043 0204 	orr.w	r2, r3, #4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d011      	beq.n	80023fe <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023f0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	f043 0208 	orr.w	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002422:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d04c      	beq.n	80024dc <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d045      	beq.n	80024dc <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002458:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b04      	cmp	r3, #4
 8002464:	d12e      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002474:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0202 	orr.w	r2, r2, #2
 8002484:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249e:	2201      	movs	r2, #1
 80024a0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d07a      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
        }

        return;
 80024c2:	e075      	b.n	80025b0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2205      	movs	r2, #5
 80024c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d039      	beq.n	800255e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d032      	beq.n	800255e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800250a:	2b00      	cmp	r3, #0
 800250c:	d116      	bne.n	800253c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002524:	2201      	movs	r2, #1
 8002526:	731a      	strb	r2, [r3, #12]
 8002528:	e008      	b.n	800253c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002544:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002562:	2b00      	cmp	r3, #0
 8002564:	d025      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0202 	orr.w	r2, r2, #2
 8002574:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258e:	2201      	movs	r2, #1
 8002590:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
 80025aa:	e002      	b.n	80025b2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80025ac:	bf00      	nop
 80025ae:	e000      	b.n	80025b2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80025b0:	bf00      	nop
    }
  }
}
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e02b      	b.n	800263c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80025ec:	f023 030f 	bic.w	r3, r3, #15
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	3b50      	subs	r3, #80	@ 0x50
 80025fc:	09db      	lsrs	r3, r3, #7
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2201      	movs	r2, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f003 0311 	and.w	r3, r3, #17
 800261a:	2b11      	cmp	r3, #17
 800261c:	d106      	bne.n	800262c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e006      	b.n	800263a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	b291      	uxth	r1, r2
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002674:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a53      	ldr	r2, [pc, #332]	@ (8002820 <DMA_Init+0x18c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f000 80a0 	beq.w	800281a <DMA_Init+0x186>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a51      	ldr	r2, [pc, #324]	@ (8002824 <DMA_Init+0x190>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	f000 809a 	beq.w	800281a <DMA_Init+0x186>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002828 <DMA_Init+0x194>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f000 8094 	beq.w	800281a <DMA_Init+0x186>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a4d      	ldr	r2, [pc, #308]	@ (800282c <DMA_Init+0x198>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	f000 808e 	beq.w	800281a <DMA_Init+0x186>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4b      	ldr	r2, [pc, #300]	@ (8002830 <DMA_Init+0x19c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	f000 8088 	beq.w	800281a <DMA_Init+0x186>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a49      	ldr	r2, [pc, #292]	@ (8002834 <DMA_Init+0x1a0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	f000 8082 	beq.w	800281a <DMA_Init+0x186>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a47      	ldr	r2, [pc, #284]	@ (8002838 <DMA_Init+0x1a4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d07c      	beq.n	800281a <DMA_Init+0x186>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a45      	ldr	r2, [pc, #276]	@ (800283c <DMA_Init+0x1a8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d077      	beq.n	800281a <DMA_Init+0x186>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a44      	ldr	r2, [pc, #272]	@ (8002840 <DMA_Init+0x1ac>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d072      	beq.n	800281a <DMA_Init+0x186>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a42      	ldr	r2, [pc, #264]	@ (8002844 <DMA_Init+0x1b0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d06d      	beq.n	800281a <DMA_Init+0x186>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a41      	ldr	r2, [pc, #260]	@ (8002848 <DMA_Init+0x1b4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d068      	beq.n	800281a <DMA_Init+0x186>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3f      	ldr	r2, [pc, #252]	@ (800284c <DMA_Init+0x1b8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d063      	beq.n	800281a <DMA_Init+0x186>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a3e      	ldr	r2, [pc, #248]	@ (8002850 <DMA_Init+0x1bc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d05e      	beq.n	800281a <DMA_Init+0x186>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a3c      	ldr	r2, [pc, #240]	@ (8002854 <DMA_Init+0x1c0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d059      	beq.n	800281a <DMA_Init+0x186>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a3b      	ldr	r2, [pc, #236]	@ (8002858 <DMA_Init+0x1c4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d054      	beq.n	800281a <DMA_Init+0x186>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a39      	ldr	r2, [pc, #228]	@ (800285c <DMA_Init+0x1c8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d04f      	beq.n	800281a <DMA_Init+0x186>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a38      	ldr	r2, [pc, #224]	@ (8002860 <DMA_Init+0x1cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04a      	beq.n	800281a <DMA_Init+0x186>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a36      	ldr	r2, [pc, #216]	@ (8002864 <DMA_Init+0x1d0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d045      	beq.n	800281a <DMA_Init+0x186>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a35      	ldr	r2, [pc, #212]	@ (8002868 <DMA_Init+0x1d4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <DMA_Init+0x186>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a33      	ldr	r2, [pc, #204]	@ (800286c <DMA_Init+0x1d8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03b      	beq.n	800281a <DMA_Init+0x186>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a32      	ldr	r2, [pc, #200]	@ (8002870 <DMA_Init+0x1dc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d036      	beq.n	800281a <DMA_Init+0x186>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a30      	ldr	r2, [pc, #192]	@ (8002874 <DMA_Init+0x1e0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <DMA_Init+0x186>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002878 <DMA_Init+0x1e4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <DMA_Init+0x186>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2d      	ldr	r2, [pc, #180]	@ (800287c <DMA_Init+0x1e8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d027      	beq.n	800281a <DMA_Init+0x186>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002880 <DMA_Init+0x1ec>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <DMA_Init+0x186>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002884 <DMA_Init+0x1f0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <DMA_Init+0x186>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a29      	ldr	r2, [pc, #164]	@ (8002888 <DMA_Init+0x1f4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <DMA_Init+0x186>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a27      	ldr	r2, [pc, #156]	@ (800288c <DMA_Init+0x1f8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <DMA_Init+0x186>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a26      	ldr	r2, [pc, #152]	@ (8002890 <DMA_Init+0x1fc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <DMA_Init+0x186>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a24      	ldr	r2, [pc, #144]	@ (8002894 <DMA_Init+0x200>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <DMA_Init+0x186>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <DMA_Init+0x204>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <DMA_Init+0x186>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a21      	ldr	r2, [pc, #132]	@ (800289c <DMA_Init+0x208>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d142      	bne.n	80028a0 <DMA_Init+0x20c>
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <DMA_Init+0x20e>
 800281e:	bf00      	nop
 8002820:	40020050 	.word	0x40020050
 8002824:	50020050 	.word	0x50020050
 8002828:	400200d0 	.word	0x400200d0
 800282c:	500200d0 	.word	0x500200d0
 8002830:	40020150 	.word	0x40020150
 8002834:	50020150 	.word	0x50020150
 8002838:	400201d0 	.word	0x400201d0
 800283c:	500201d0 	.word	0x500201d0
 8002840:	40020250 	.word	0x40020250
 8002844:	50020250 	.word	0x50020250
 8002848:	400202d0 	.word	0x400202d0
 800284c:	500202d0 	.word	0x500202d0
 8002850:	40020350 	.word	0x40020350
 8002854:	50020350 	.word	0x50020350
 8002858:	400203d0 	.word	0x400203d0
 800285c:	500203d0 	.word	0x500203d0
 8002860:	40020450 	.word	0x40020450
 8002864:	50020450 	.word	0x50020450
 8002868:	400204d0 	.word	0x400204d0
 800286c:	500204d0 	.word	0x500204d0
 8002870:	40020550 	.word	0x40020550
 8002874:	50020550 	.word	0x50020550
 8002878:	400205d0 	.word	0x400205d0
 800287c:	500205d0 	.word	0x500205d0
 8002880:	40020650 	.word	0x40020650
 8002884:	50020650 	.word	0x50020650
 8002888:	400206d0 	.word	0x400206d0
 800288c:	500206d0 	.word	0x500206d0
 8002890:	40020750 	.word	0x40020750
 8002894:	50020750 	.word	0x50020750
 8002898:	400207d0 	.word	0x400207d0
 800289c:	500207d0 	.word	0x500207d0
 80028a0:	2300      	movs	r3, #0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	051b      	lsls	r3, r3, #20
 80028b2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80028b6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	3b01      	subs	r3, #1
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80028c4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	430a      	orrs	r2, r1
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fe:	f040 80b0 	bne.w	8002a62 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a82      	ldr	r2, [pc, #520]	@ (8002b10 <DMA_Init+0x47c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	f000 80a0 	beq.w	8002a4e <DMA_Init+0x3ba>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a80      	ldr	r2, [pc, #512]	@ (8002b14 <DMA_Init+0x480>)
 8002914:	4293      	cmp	r3, r2
 8002916:	f000 809a 	beq.w	8002a4e <DMA_Init+0x3ba>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b18 <DMA_Init+0x484>)
 8002920:	4293      	cmp	r3, r2
 8002922:	f000 8094 	beq.w	8002a4e <DMA_Init+0x3ba>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b1c <DMA_Init+0x488>)
 800292c:	4293      	cmp	r3, r2
 800292e:	f000 808e 	beq.w	8002a4e <DMA_Init+0x3ba>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7a      	ldr	r2, [pc, #488]	@ (8002b20 <DMA_Init+0x48c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	f000 8088 	beq.w	8002a4e <DMA_Init+0x3ba>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a78      	ldr	r2, [pc, #480]	@ (8002b24 <DMA_Init+0x490>)
 8002944:	4293      	cmp	r3, r2
 8002946:	f000 8082 	beq.w	8002a4e <DMA_Init+0x3ba>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a76      	ldr	r2, [pc, #472]	@ (8002b28 <DMA_Init+0x494>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d07c      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a74      	ldr	r2, [pc, #464]	@ (8002b2c <DMA_Init+0x498>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d077      	beq.n	8002a4e <DMA_Init+0x3ba>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a73      	ldr	r2, [pc, #460]	@ (8002b30 <DMA_Init+0x49c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d072      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a71      	ldr	r2, [pc, #452]	@ (8002b34 <DMA_Init+0x4a0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d06d      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a70      	ldr	r2, [pc, #448]	@ (8002b38 <DMA_Init+0x4a4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d068      	beq.n	8002a4e <DMA_Init+0x3ba>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6e      	ldr	r2, [pc, #440]	@ (8002b3c <DMA_Init+0x4a8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d063      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6d      	ldr	r2, [pc, #436]	@ (8002b40 <DMA_Init+0x4ac>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d05e      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6b      	ldr	r2, [pc, #428]	@ (8002b44 <DMA_Init+0x4b0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d059      	beq.n	8002a4e <DMA_Init+0x3ba>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6a      	ldr	r2, [pc, #424]	@ (8002b48 <DMA_Init+0x4b4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d054      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a68      	ldr	r2, [pc, #416]	@ (8002b4c <DMA_Init+0x4b8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d04f      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a67      	ldr	r2, [pc, #412]	@ (8002b50 <DMA_Init+0x4bc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04a      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a65      	ldr	r2, [pc, #404]	@ (8002b54 <DMA_Init+0x4c0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d045      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a64      	ldr	r2, [pc, #400]	@ (8002b58 <DMA_Init+0x4c4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a62      	ldr	r2, [pc, #392]	@ (8002b5c <DMA_Init+0x4c8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d03b      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a61      	ldr	r2, [pc, #388]	@ (8002b60 <DMA_Init+0x4cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d036      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a5f      	ldr	r2, [pc, #380]	@ (8002b64 <DMA_Init+0x4d0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d031      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002b68 <DMA_Init+0x4d4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d02c      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5c      	ldr	r2, [pc, #368]	@ (8002b6c <DMA_Init+0x4d8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d027      	beq.n	8002a4e <DMA_Init+0x3ba>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5b      	ldr	r2, [pc, #364]	@ (8002b70 <DMA_Init+0x4dc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d022      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a59      	ldr	r2, [pc, #356]	@ (8002b74 <DMA_Init+0x4e0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a58      	ldr	r2, [pc, #352]	@ (8002b78 <DMA_Init+0x4e4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d018      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a56      	ldr	r2, [pc, #344]	@ (8002b7c <DMA_Init+0x4e8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a55      	ldr	r2, [pc, #340]	@ (8002b80 <DMA_Init+0x4ec>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a53      	ldr	r2, [pc, #332]	@ (8002b84 <DMA_Init+0x4f0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a52      	ldr	r2, [pc, #328]	@ (8002b88 <DMA_Init+0x4f4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <DMA_Init+0x3ba>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a50      	ldr	r2, [pc, #320]	@ (8002b8c <DMA_Init+0x4f8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <DMA_Init+0x3be>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <DMA_Init+0x3c0>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e008      	b.n	8002a74 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a6a:	d103      	bne.n	8002a74 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a72:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a7a:	4b45      	ldr	r3, [pc, #276]	@ (8002b90 <DMA_Init+0x4fc>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a36      	ldr	r2, [pc, #216]	@ (8002b70 <DMA_Init+0x4dc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <DMA_Init+0x44c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a35      	ldr	r2, [pc, #212]	@ (8002b74 <DMA_Init+0x4e0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <DMA_Init+0x44c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a33      	ldr	r2, [pc, #204]	@ (8002b78 <DMA_Init+0x4e4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <DMA_Init+0x44c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a32      	ldr	r2, [pc, #200]	@ (8002b7c <DMA_Init+0x4e8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <DMA_Init+0x44c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a30      	ldr	r2, [pc, #192]	@ (8002b80 <DMA_Init+0x4ec>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <DMA_Init+0x44c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b84 <DMA_Init+0x4f0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <DMA_Init+0x44c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <DMA_Init+0x4f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <DMA_Init+0x44c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2c      	ldr	r2, [pc, #176]	@ (8002b8c <DMA_Init+0x4f8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <DMA_Init+0x450>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <DMA_Init+0x452>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40020050 	.word	0x40020050
 8002b14:	50020050 	.word	0x50020050
 8002b18:	400200d0 	.word	0x400200d0
 8002b1c:	500200d0 	.word	0x500200d0
 8002b20:	40020150 	.word	0x40020150
 8002b24:	50020150 	.word	0x50020150
 8002b28:	400201d0 	.word	0x400201d0
 8002b2c:	500201d0 	.word	0x500201d0
 8002b30:	40020250 	.word	0x40020250
 8002b34:	50020250 	.word	0x50020250
 8002b38:	400202d0 	.word	0x400202d0
 8002b3c:	500202d0 	.word	0x500202d0
 8002b40:	40020350 	.word	0x40020350
 8002b44:	50020350 	.word	0x50020350
 8002b48:	400203d0 	.word	0x400203d0
 8002b4c:	500203d0 	.word	0x500203d0
 8002b50:	40020450 	.word	0x40020450
 8002b54:	50020450 	.word	0x50020450
 8002b58:	400204d0 	.word	0x400204d0
 8002b5c:	500204d0 	.word	0x500204d0
 8002b60:	40020550 	.word	0x40020550
 8002b64:	50020550 	.word	0x50020550
 8002b68:	400205d0 	.word	0x400205d0
 8002b6c:	500205d0 	.word	0x500205d0
 8002b70:	40020650 	.word	0x40020650
 8002b74:	50020650 	.word	0x50020650
 8002b78:	400206d0 	.word	0x400206d0
 8002b7c:	500206d0 	.word	0x500206d0
 8002b80:	40020750 	.word	0x40020750
 8002b84:	50020750 	.word	0x50020750
 8002b88:	400207d0 	.word	0x400207d0
 8002b8c:	500207d0 	.word	0x500207d0
 8002b90:	3cc03180 	.word	0x3cc03180

08002b94 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_DMAEx_List_Start_IT+0x16>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e082      	b.n	8002cb4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bb4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d005      	beq.n	8002bd4 <HAL_DMAEx_List_Start_IT+0x40>
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d16a      	bne.n	8002ca4 <HAL_DMAEx_List_Start_IT+0x110>
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d067      	beq.n	8002ca4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d157      	bne.n	8002c90 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_DMAEx_List_Start_IT+0x5a>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e062      	b.n	8002cb4 <HAL_DMAEx_List_Start_IT+0x120>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c02:	2202      	movs	r2, #2
 8002c04:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002c22:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c52:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f107 010c 	add.w	r1, r7, #12
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f82b 	bl	8002cbc <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	0c0b      	lsrs	r3, r1, #16
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002c84:	4013      	ands	r3, r2
 8002c86:	68f9      	ldr	r1, [r7, #12]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e007      	b.n	8002cb4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2240      	movs	r2, #64	@ 0x40
 8002ca8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <DMA_List_GetCLLRNodeInfo+0x58>)
 8002cde:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00f      	beq.n	8002d06 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002cec:	e00b      	b.n	8002d06 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4a08      	ldr	r2, [pc, #32]	@ (8002d18 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002cf8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2205      	movs	r2, #5
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	fe010000 	.word	0xfe010000
 8002d18:	f8010000 	.word	0xf8010000

08002d1c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	460b      	mov	r3, r1
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d011      	beq.n	8002d58 <HAL_EXTI_RegisterCallback+0x3c>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	dc13      	bgt.n	8002d60 <HAL_EXTI_RegisterCallback+0x44>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_EXTI_RegisterCallback+0x26>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d007      	beq.n	8002d50 <HAL_EXTI_RegisterCallback+0x34>
 8002d40:	e00e      	b.n	8002d60 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
      break;
 8002d4e:	e00a      	b.n	8002d66 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	605a      	str	r2, [r3, #4]
      break;
 8002d56:	e006      	b.n	8002d66 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]
      break;
 8002d64:	bf00      	nop
  }

  return status;
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e003      	b.n	8002d90 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2201      	movs	r2, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <HAL_EXTI_IRQHandler+0x88>)
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <HAL_EXTI_IRQHandler+0x8c>)
 8002df4:	4413      	add	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	4798      	blx	r3
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	4602200c 	.word	0x4602200c
 8002e28:	46022010 	.word	0x46022010

08002e2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e3e:	e1c2      	b.n	80031c6 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 81b2 	beq.w	80031c0 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a55      	ldr	r2, [pc, #340]	@ (8002fb4 <HAL_GPIO_Init+0x188>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d15d      	bne.n	8002f20 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0201 	and.w	r2, r3, #1
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002e94:	4a48      	ldr	r2, [pc, #288]	@ (8002fb8 <HAL_GPIO_Init+0x18c>)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e9c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002e9e:	4a46      	ldr	r2, [pc, #280]	@ (8002fb8 <HAL_GPIO_Init+0x18c>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	220b      	movs	r2, #11
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	08da      	lsrs	r2, r3, #3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	3208      	adds	r2, #8
 8002eea:	69f9      	ldr	r1, [r7, #28]
 8002eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e067      	b.n	8002ff0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x104>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	d145      	bne.n	8002fbc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	08da      	lsrs	r2, r3, #3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3208      	adds	r2, #8
 8002f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	69f9      	ldr	r1, [r7, #28]
 8002f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e01e      	b.n	8002ff0 <HAL_GPIO_Init+0x1c4>
 8002fb2:	bf00      	nop
 8002fb4:	46020000 	.word	0x46020000
 8002fb8:	0800971c 	.word	0x0800971c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d00b      	beq.n	8003010 <HAL_GPIO_Init+0x1e4>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d007      	beq.n	8003010 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003004:	2b11      	cmp	r3, #17
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b12      	cmp	r3, #18
 800300e:	d130      	bne.n	8003072 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	4013      	ands	r3, r2
 8003026:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	4313      	orrs	r3, r2
 8003038:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003046:	2201      	movs	r2, #1
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	4013      	ands	r3, r2
 8003054:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 0201 	and.w	r2, r3, #1
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	4313      	orrs	r3, r2
 800306a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d107      	bne.n	800308a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800307e:	2b03      	cmp	r3, #3
 8003080:	d11b      	bne.n	80030ba <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d017      	beq.n	80030ba <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	4013      	ands	r3, r2
 80030a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d07c      	beq.n	80031c0 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80030c6:	4a47      	ldr	r2, [pc, #284]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3318      	adds	r3, #24
 80030ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0a9a      	lsrs	r2, r3, #10
 80030ee:	4b3e      	ldr	r3, [pc, #248]	@ (80031e8 <HAL_GPIO_Init+0x3bc>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	f002 0203 	and.w	r2, r2, #3
 80030f8:	00d2      	lsls	r2, r2, #3
 80030fa:	4093      	lsls	r3, r2
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003102:	4938      	ldr	r1, [pc, #224]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3318      	adds	r3, #24
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003110:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	4013      	ands	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003134:	4a2b      	ldr	r2, [pc, #172]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800313a:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	4013      	ands	r3, r2
 8003148:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800315e:	4a21      	ldr	r2, [pc, #132]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003164:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 8003166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800316a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43db      	mvns	r3, r3
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	4013      	ands	r3, r2
 8003174:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800318a:	4a16      	ldr	r2, [pc, #88]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003192:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 8003194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003198:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	43db      	mvns	r3, r3
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80031b8:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <HAL_GPIO_Init+0x3b8>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3301      	adds	r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f ae35 	bne.w	8002e40 <HAL_GPIO_Init+0x14>
  }
}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	3724      	adds	r7, #36	@ 0x24
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	46022000 	.word	0x46022000
 80031e8:	002f7f7f 	.word	0x002f7f7f

080031ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]
 80031f8:	4613      	mov	r3, r2
 80031fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031fc:	787b      	ldrb	r3, [r7, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003208:	e002      	b.n	8003210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e007      	b.n	800324a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800323a:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0204 	bic.w	r2, r3, #4
 8003242:	4905      	ldr	r1, [pc, #20]	@ (8003258 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
  }

  return status;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40030400 	.word	0x40030400

0800325c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003260:	4b05      	ldr	r3, [pc, #20]	@ (8003278 <HAL_ICACHE_Enable+0x1c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a04      	ldr	r2, [pc, #16]	@ (8003278 <HAL_ICACHE_Enable+0x1c>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40030400 	.word	0x40030400

0800327c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003284:	4b39      	ldr	r3, [pc, #228]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800328c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d10b      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329c:	d905      	bls.n	80032aa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800329e:	4b33      	ldr	r3, [pc, #204]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	4a32      	ldr	r2, [pc, #200]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032a8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e057      	b.n	800335e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b4:	d90a      	bls.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80032b6:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	4a2a      	ldr	r2, [pc, #168]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032c8:	60d3      	str	r3, [r2, #12]
 80032ca:	e007      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80032cc:	4b27      	ldr	r3, [pc, #156]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80032d4:	4925      	ldr	r1, [pc, #148]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80032dc:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a24      	ldr	r2, [pc, #144]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	2232      	movs	r2, #50	@ 0x32
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	3301      	adds	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80032fa:	e002      	b.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3b01      	subs	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003302:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x98>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f3      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01b      	beq.n	8003352 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800331a:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a15      	ldr	r2, [pc, #84]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	2232      	movs	r2, #50	@ 0x32
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	4a11      	ldr	r2, [pc, #68]	@ (8003374 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	3301      	adds	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003338:	e002      	b.n	8003340 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003340:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f3      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e000      	b.n	800335e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	46020800 	.word	0x46020800
 8003370:	2000000c 	.word	0x2000000c
 8003374:	10624dd3 	.word	0x10624dd3

08003378 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800337c:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <HAL_PWREx_GetVoltageRange+0x18>)
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	46020800 	.word	0x46020800

08003394 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800339c:	4b22      	ldr	r3, [pc, #136]	@ (8003428 <HAL_PWREx_ConfigSupply+0x94>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a22      	ldr	r2, [pc, #136]	@ (800342c <HAL_PWREx_ConfigSupply+0x98>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	2232      	movs	r2, #50	@ 0x32
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	4a1f      	ldr	r2, [pc, #124]	@ (800342c <HAL_PWREx_ConfigSupply+0x98>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d113      	bne.n	80033e8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80033c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <HAL_PWREx_ConfigSupply+0x9c>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003430 <HAL_PWREx_ConfigSupply+0x9c>)
 80033c6:	f023 0302 	bic.w	r3, r3, #2
 80033ca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80033cc:	e002      	b.n	80033d4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80033d4:	4b16      	ldr	r3, [pc, #88]	@ (8003430 <HAL_PWREx_ConfigSupply+0x9c>)
 80033d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d116      	bne.n	800340e <HAL_PWREx_ConfigSupply+0x7a>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f3      	bne.n	80033ce <HAL_PWREx_ConfigSupply+0x3a>
 80033e6:	e012      	b.n	800340e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80033e8:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <HAL_PWREx_ConfigSupply+0x9c>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a10      	ldr	r2, [pc, #64]	@ (8003430 <HAL_PWREx_ConfigSupply+0x9c>)
 80033ee:	f043 0302 	orr.w	r3, r3, #2
 80033f2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80033f4:	e002      	b.n	80033fc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <HAL_PWREx_ConfigSupply+0x9c>)
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <HAL_PWREx_ConfigSupply+0x7a>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f3      	bne.n	80033f6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e000      	b.n	800341a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	2000000c 	.word	0x2000000c
 800342c:	10624dd3 	.word	0x10624dd3
 8003430:	46020800 	.word	0x46020800

08003434 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003438:	4b05      	ldr	r3, [pc, #20]	@ (8003450 <HAL_PWREx_EnableVddIO2+0x1c>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	4a04      	ldr	r2, [pc, #16]	@ (8003450 <HAL_PWREx_EnableVddIO2+0x1c>)
 800343e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003442:	6113      	str	r3, [r2, #16]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	46020800 	.word	0x46020800

08003454 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	4a04      	ldr	r2, [pc, #16]	@ (8003470 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	46020800 	.word	0x46020800

08003474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	@ 0x38
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800347c:	2300      	movs	r3, #0
 800347e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f000 bec8 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348e:	4b99      	ldr	r3, [pc, #612]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003498:	4b96      	ldr	r3, [pc, #600]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 816c 	beq.w	8003788 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_RCC_OscConfig+0x52>
 80034b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	f040 80de 	bne.w	800367a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	f040 80da 	bne.w	800367a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f000 bea5 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d8:	4b86      	ldr	r3, [pc, #536]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_RCC_OscConfig+0x7a>
 80034e4:	4b83      	ldr	r3, [pc, #524]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80034ec:	e005      	b.n	80034fa <HAL_RCC_OscConfig+0x86>
 80034ee:	4b81      	ldr	r3, [pc, #516]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80034f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d255      	bcs.n	80035aa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fa11 	bl	8004930 <RCC_SetFlashLatencyFromMSIRange>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f000 be82 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800351a:	4b76      	ldr	r3, [pc, #472]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4a75      	ldr	r2, [pc, #468]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003520:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003524:	6093      	str	r3, [r2, #8]
 8003526:	4b73      	ldr	r3, [pc, #460]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	4970      	ldr	r1, [pc, #448]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003540:	d309      	bcc.n	8003556 <HAL_RCC_OscConfig+0xe2>
 8003542:	4b6c      	ldr	r3, [pc, #432]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 021f 	bic.w	r2, r3, #31
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4969      	ldr	r1, [pc, #420]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003550:	4313      	orrs	r3, r2
 8003552:	60cb      	str	r3, [r1, #12]
 8003554:	e07e      	b.n	8003654 <HAL_RCC_OscConfig+0x1e0>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	da0a      	bge.n	8003574 <HAL_RCC_OscConfig+0x100>
 800355e:	4b65      	ldr	r3, [pc, #404]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	4961      	ldr	r1, [pc, #388]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 800356e:	4313      	orrs	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
 8003572:	e06f      	b.n	8003654 <HAL_RCC_OscConfig+0x1e0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357c:	d30a      	bcc.n	8003594 <HAL_RCC_OscConfig+0x120>
 800357e:	4b5d      	ldr	r3, [pc, #372]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	029b      	lsls	r3, r3, #10
 800358c:	4959      	ldr	r1, [pc, #356]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 800358e:	4313      	orrs	r3, r2
 8003590:	60cb      	str	r3, [r1, #12]
 8003592:	e05f      	b.n	8003654 <HAL_RCC_OscConfig+0x1e0>
 8003594:	4b57      	ldr	r3, [pc, #348]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	03db      	lsls	r3, r3, #15
 80035a2:	4954      	ldr	r1, [pc, #336]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
 80035a8:	e054      	b.n	8003654 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035aa:	4b52      	ldr	r3, [pc, #328]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4a51      	ldr	r2, [pc, #324]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035b4:	6093      	str	r3, [r2, #8]
 80035b6:	4b4f      	ldr	r3, [pc, #316]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	494c      	ldr	r1, [pc, #304]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80035d0:	d309      	bcc.n	80035e6 <HAL_RCC_OscConfig+0x172>
 80035d2:	4b48      	ldr	r3, [pc, #288]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f023 021f 	bic.w	r2, r3, #31
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4945      	ldr	r1, [pc, #276]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60cb      	str	r3, [r1, #12]
 80035e4:	e028      	b.n	8003638 <HAL_RCC_OscConfig+0x1c4>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da0a      	bge.n	8003604 <HAL_RCC_OscConfig+0x190>
 80035ee:	4b41      	ldr	r3, [pc, #260]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	015b      	lsls	r3, r3, #5
 80035fc:	493d      	ldr	r1, [pc, #244]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	60cb      	str	r3, [r1, #12]
 8003602:	e019      	b.n	8003638 <HAL_RCC_OscConfig+0x1c4>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d30a      	bcc.n	8003624 <HAL_RCC_OscConfig+0x1b0>
 800360e:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	029b      	lsls	r3, r3, #10
 800361c:	4935      	ldr	r1, [pc, #212]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 800361e:	4313      	orrs	r3, r2
 8003620:	60cb      	str	r3, [r1, #12]
 8003622:	e009      	b.n	8003638 <HAL_RCC_OscConfig+0x1c4>
 8003624:	4b33      	ldr	r3, [pc, #204]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	03db      	lsls	r3, r3, #15
 8003632:	4930      	ldr	r1, [pc, #192]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003634:	4313      	orrs	r3, r2
 8003636:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	4618      	mov	r0, r3
 8003644:	f001 f974 	bl	8004930 <RCC_SetFlashLatencyFromMSIRange>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f000 bde5 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003654:	f001 f8de 	bl	8004814 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003658:	4b27      	ldr	r3, [pc, #156]	@ (80036f8 <HAL_RCC_OscConfig+0x284>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd ffbd 	bl	80015dc <HAL_InitTick>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 808a 	beq.w	8003786 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003676:	f000 bdd2 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d066      	beq.n	8003750 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003682:	4b1c      	ldr	r3, [pc, #112]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800368e:	f7fe faff 	bl	8001c90 <HAL_GetTick>
 8003692:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003694:	e009      	b.n	80036aa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003696:	f7fe fafb 	bl	8001c90 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d902      	bls.n	80036aa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	f000 bdba 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ef      	beq.n	8003696 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80036b6:	4b0f      	ldr	r3, [pc, #60]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4a0e      	ldr	r2, [pc, #56]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80036bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036c0:	6093      	str	r3, [r2, #8]
 80036c2:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	4909      	ldr	r1, [pc, #36]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80036dc:	d30e      	bcc.n	80036fc <HAL_RCC_OscConfig+0x288>
 80036de:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f023 021f 	bic.w	r2, r3, #31
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	4902      	ldr	r1, [pc, #8]	@ (80036f4 <HAL_RCC_OscConfig+0x280>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60cb      	str	r3, [r1, #12]
 80036f0:	e04a      	b.n	8003788 <HAL_RCC_OscConfig+0x314>
 80036f2:	bf00      	nop
 80036f4:	46020c00 	.word	0x46020c00
 80036f8:	2000002c 	.word	0x2000002c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	da0a      	bge.n	800371a <HAL_RCC_OscConfig+0x2a6>
 8003704:	4b98      	ldr	r3, [pc, #608]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	015b      	lsls	r3, r3, #5
 8003712:	4995      	ldr	r1, [pc, #596]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	60cb      	str	r3, [r1, #12]
 8003718:	e036      	b.n	8003788 <HAL_RCC_OscConfig+0x314>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003722:	d30a      	bcc.n	800373a <HAL_RCC_OscConfig+0x2c6>
 8003724:	4b90      	ldr	r3, [pc, #576]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	029b      	lsls	r3, r3, #10
 8003732:	498d      	ldr	r1, [pc, #564]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	60cb      	str	r3, [r1, #12]
 8003738:	e026      	b.n	8003788 <HAL_RCC_OscConfig+0x314>
 800373a:	4b8b      	ldr	r3, [pc, #556]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	03db      	lsls	r3, r3, #15
 8003748:	4987      	ldr	r1, [pc, #540]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800374a:	4313      	orrs	r3, r2
 800374c:	60cb      	str	r3, [r1, #12]
 800374e:	e01b      	b.n	8003788 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003750:	4b85      	ldr	r3, [pc, #532]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a84      	ldr	r2, [pc, #528]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800375c:	f7fe fa98 	bl	8001c90 <HAL_GetTick>
 8003760:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003762:	e009      	b.n	8003778 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003764:	f7fe fa94 	bl	8001c90 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d902      	bls.n	8003778 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	f000 bd53 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003778:	4b7b      	ldr	r3, [pc, #492]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ef      	bne.n	8003764 <HAL_RCC_OscConfig+0x2f0>
 8003784:	e000      	b.n	8003788 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003786:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 808b 	beq.w	80038ac <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	2b08      	cmp	r3, #8
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_OscConfig+0x334>
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d109      	bne.n	80037b6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d17d      	bne.n	80038ac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f000 bd34 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x35a>
 80037c0:	4b69      	ldr	r3, [pc, #420]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a68      	ldr	r2, [pc, #416]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80037c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	e041      	b.n	8003852 <HAL_RCC_OscConfig+0x3de>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037d6:	d112      	bne.n	80037fe <HAL_RCC_OscConfig+0x38a>
 80037d8:	4b63      	ldr	r3, [pc, #396]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a62      	ldr	r2, [pc, #392]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80037de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b60      	ldr	r3, [pc, #384]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5f      	ldr	r2, [pc, #380]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80037ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a5c      	ldr	r2, [pc, #368]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e029      	b.n	8003852 <HAL_RCC_OscConfig+0x3de>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003806:	d112      	bne.n	800382e <HAL_RCC_OscConfig+0x3ba>
 8003808:	4b57      	ldr	r3, [pc, #348]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a56      	ldr	r2, [pc, #344]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800380e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b54      	ldr	r3, [pc, #336]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a53      	ldr	r2, [pc, #332]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800381a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b51      	ldr	r3, [pc, #324]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a50      	ldr	r2, [pc, #320]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e011      	b.n	8003852 <HAL_RCC_OscConfig+0x3de>
 800382e:	4b4e      	ldr	r3, [pc, #312]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4d      	ldr	r2, [pc, #308]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b4b      	ldr	r3, [pc, #300]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003840:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b48      	ldr	r3, [pc, #288]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a47      	ldr	r2, [pc, #284]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800384c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003850:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800385a:	f7fe fa19 	bl	8001c90 <HAL_GetTick>
 800385e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003860:	e009      	b.n	8003876 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003862:	f7fe fa15 	bl	8001c90 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b64      	cmp	r3, #100	@ 0x64
 800386e:	d902      	bls.n	8003876 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	f000 bcd4 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003876:	4b3c      	ldr	r3, [pc, #240]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ef      	beq.n	8003862 <HAL_RCC_OscConfig+0x3ee>
 8003882:	e013      	b.n	80038ac <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003884:	f7fe fa04 	bl	8001c90 <HAL_GetTick>
 8003888:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388a:	e009      	b.n	80038a0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7fe fa00 	bl	8001c90 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	@ 0x64
 8003898:	d902      	bls.n	80038a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	f000 bcbf 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a0:	4b31      	ldr	r3, [pc, #196]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ef      	bne.n	800388c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05f      	beq.n	8003978 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d005      	beq.n	80038ca <HAL_RCC_OscConfig+0x456>
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	2b0c      	cmp	r3, #12
 80038c2:	d114      	bne.n	80038ee <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d111      	bne.n	80038ee <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f000 bca3 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b23      	ldr	r3, [pc, #140]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	4920      	ldr	r1, [pc, #128]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80038ec:	e044      	b.n	8003978 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d024      	beq.n	8003940 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80038f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003900:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003902:	f7fe f9c5 	bl	8001c90 <HAL_GetTick>
 8003906:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003908:	e009      	b.n	800391e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fe f9c1 	bl	8001c90 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d902      	bls.n	800391e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	f000 bc80 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800391e:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ef      	beq.n	800390a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	490b      	ldr	r1, [pc, #44]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	610b      	str	r3, [r1, #16]
 800393e:	e01b      	b.n	8003978 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003940:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a08      	ldr	r2, [pc, #32]	@ (8003968 <HAL_RCC_OscConfig+0x4f4>)
 8003946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800394a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800394c:	f7fe f9a0 	bl	8001c90 <HAL_GetTick>
 8003950:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003954:	f7fe f99c 	bl	8001c90 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d904      	bls.n	800396c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	f000 bc5b 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
 8003968:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800396c:	4baf      	ldr	r3, [pc, #700]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ed      	bne.n	8003954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80c8 	beq.w	8003b16 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398c:	4ba7      	ldr	r3, [pc, #668]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 800398e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d111      	bne.n	80039be <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	4ba4      	ldr	r3, [pc, #656]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 800399c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a0:	4aa2      	ldr	r2, [pc, #648]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80039aa:	4ba0      	ldr	r3, [pc, #640]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039be:	4b9c      	ldr	r3, [pc, #624]	@ (8003c30 <HAL_RCC_OscConfig+0x7bc>)
 80039c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d119      	bne.n	80039fe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80039ca:	4b99      	ldr	r3, [pc, #612]	@ (8003c30 <HAL_RCC_OscConfig+0x7bc>)
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	4a98      	ldr	r2, [pc, #608]	@ (8003c30 <HAL_RCC_OscConfig+0x7bc>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fe f95b 	bl	8001c90 <HAL_GetTick>
 80039da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039dc:	e009      	b.n	80039f2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fe f957 	bl	8001c90 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d902      	bls.n	80039f2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	f000 bc16 	b.w	800421e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039f2:	4b8f      	ldr	r3, [pc, #572]	@ (8003c30 <HAL_RCC_OscConfig+0x7bc>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0ef      	beq.n	80039de <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d05f      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003a06:	4b89      	ldr	r3, [pc, #548]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a0c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d037      	beq.n	8003a8c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e3f4      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01b      	beq.n	8003a76 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003a3e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a44:	4a79      	ldr	r2, [pc, #484]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003a46:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003a4e:	f7fe f91f 	bl	8001c90 <HAL_GetTick>
 8003a52:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fe f91b 	bl	8001c90 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e3da      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a68:	4b70      	ldr	r3, [pc, #448]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1ef      	bne.n	8003a56 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003a76:	4b6d      	ldr	r3, [pc, #436]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	4969      	ldr	r1, [pc, #420]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003a8c:	4b67      	ldr	r3, [pc, #412]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a92:	4a66      	ldr	r2, [pc, #408]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003a94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003a9c:	f7fe f8f8 	bl	8001c90 <HAL_GetTick>
 8003aa0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fe f8f4 	bl	8001c90 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e3b3      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ef      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x630>
 8003ac4:	e01b      	b.n	8003afe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003ac6:	4b59      	ldr	r3, [pc, #356]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003acc:	4a57      	ldr	r2, [pc, #348]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003ace:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003ad6:	f7fe f8db 	bl	8001c90 <HAL_GetTick>
 8003ada:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ade:	f7fe f8d7 	bl	8001c90 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e396      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003af0:	4b4e      	ldr	r3, [pc, #312]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003af6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ef      	bne.n	8003ade <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b06:	4b49      	ldr	r3, [pc, #292]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0c:	4a47      	ldr	r2, [pc, #284]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003b0e:	f023 0304 	bic.w	r3, r3, #4
 8003b12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8111 	beq.w	8003d46 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2a:	4b40      	ldr	r3, [pc, #256]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d111      	bne.n	8003b5c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4b3c      	ldr	r3, [pc, #240]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003b48:	4b38      	ldr	r3, [pc, #224]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b5c:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <HAL_RCC_OscConfig+0x7bc>)
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d118      	bne.n	8003b9a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003b68:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <HAL_RCC_OscConfig+0x7bc>)
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	4a30      	ldr	r2, [pc, #192]	@ (8003c30 <HAL_RCC_OscConfig+0x7bc>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b74:	f7fe f88c 	bl	8001c90 <HAL_GetTick>
 8003b78:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fe f888 	bl	8001c90 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e347      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b8e:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <HAL_RCC_OscConfig+0x7bc>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01f      	beq.n	8003be6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d010      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bc8:	4a18      	ldr	r2, [pc, #96]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bd2:	e018      	b.n	8003c06 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bd4:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bda:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003be4:	e00f      	b.n	8003c06 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003be6:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bec:	4a0f      	ldr	r2, [pc, #60]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003c2c <HAL_RCC_OscConfig+0x7b8>)
 8003bfe:	f023 0304 	bic.w	r3, r3, #4
 8003c02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d057      	beq.n	8003cbe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f83f 	bl	8001c90 <HAL_GetTick>
 8003c12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c14:	e00e      	b.n	8003c34 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fe f83b 	bl	8001c90 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d905      	bls.n	8003c34 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e2f8      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
 8003c2c:	46020c00 	.word	0x46020c00
 8003c30:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c34:	4b9c      	ldr	r3, [pc, #624]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0e9      	beq.n	8003c16 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01b      	beq.n	8003c86 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c4e:	4b96      	ldr	r3, [pc, #600]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c54:	4a94      	ldr	r2, [pc, #592]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fe f816 	bl	8001c90 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e2d3      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c76:	4b8c      	ldr	r3, [pc, #560]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ed      	beq.n	8003c60 <HAL_RCC_OscConfig+0x7ec>
 8003c84:	e053      	b.n	8003d2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c86:	4b88      	ldr	r3, [pc, #544]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c8c:	4a86      	ldr	r2, [pc, #536]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c98:	f7fd fffa 	bl	8001c90 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e2b7      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003cae:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ed      	bne.n	8003c98 <HAL_RCC_OscConfig+0x824>
 8003cbc:	e037      	b.n	8003d2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003cbe:	f7fd ffe7 	bl	8001c90 <HAL_GetTick>
 8003cc2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd ffe3 	bl	8001c90 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e2a0      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cdc:	4b72      	ldr	r3, [pc, #456]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ed      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003cea:	4b6f      	ldr	r3, [pc, #444]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01a      	beq.n	8003d2e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cf8:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cfe:	4a6a      	ldr	r2, [pc, #424]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d08:	e00a      	b.n	8003d20 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0a:	f7fd ffc1 	bl	8001c90 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e27e      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d20:	4b61      	ldr	r3, [pc, #388]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ed      	bne.n	8003d0a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d3e:	f023 0304 	bic.w	r3, r3, #4
 8003d42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d036      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d019      	beq.n	8003d8e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003d5a:	4b53      	ldr	r3, [pc, #332]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a52      	ldr	r2, [pc, #328]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d64:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d66:	f7fd ff93 	bl	8001c90 <HAL_GetTick>
 8003d6a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d6e:	f7fd ff8f 	bl	8001c90 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e24e      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d80:	4b49      	ldr	r3, [pc, #292]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x8fa>
 8003d8c:	e018      	b.n	8003dc0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003d8e:	4b46      	ldr	r3, [pc, #280]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a45      	ldr	r2, [pc, #276]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003d94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d98:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d9a:	f7fd ff79 	bl	8001c90 <HAL_GetTick>
 8003d9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003da2:	f7fd ff75 	bl	8001c90 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e234      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003db4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d036      	beq.n	8003e3a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d019      	beq.n	8003e08 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003dd4:	4b34      	ldr	r3, [pc, #208]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003de0:	f7fd ff56 	bl	8001c90 <HAL_GetTick>
 8003de4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003de8:	f7fd ff52 	bl	8001c90 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e211      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x974>
 8003e06:	e018      	b.n	8003e3a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003e08:	4b27      	ldr	r3, [pc, #156]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e14:	f7fd ff3c 	bl	8001c90 <HAL_GetTick>
 8003e18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003e1c:	f7fd ff38 	bl	8001c90 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e1f7      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d07f      	beq.n	8003f46 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d062      	beq.n	8003f14 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003e4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e58:	6093      	str	r3, [r2, #8]
 8003e5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e66:	4910      	ldr	r1, [pc, #64]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e74:	d309      	bcc.n	8003e8a <HAL_RCC_OscConfig+0xa16>
 8003e76:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f023 021f 	bic.w	r2, r3, #31
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4909      	ldr	r1, [pc, #36]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60cb      	str	r3, [r1, #12]
 8003e88:	e02a      	b.n	8003ee0 <HAL_RCC_OscConfig+0xa6c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da0c      	bge.n	8003eac <HAL_RCC_OscConfig+0xa38>
 8003e92:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	015b      	lsls	r3, r3, #5
 8003ea0:	4901      	ldr	r1, [pc, #4]	@ (8003ea8 <HAL_RCC_OscConfig+0xa34>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60cb      	str	r3, [r1, #12]
 8003ea6:	e01b      	b.n	8003ee0 <HAL_RCC_OscConfig+0xa6c>
 8003ea8:	46020c00 	.word	0x46020c00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d30a      	bcc.n	8003ecc <HAL_RCC_OscConfig+0xa58>
 8003eb6:	4ba1      	ldr	r3, [pc, #644]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	499d      	ldr	r1, [pc, #628]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60cb      	str	r3, [r1, #12]
 8003eca:	e009      	b.n	8003ee0 <HAL_RCC_OscConfig+0xa6c>
 8003ecc:	4b9b      	ldr	r3, [pc, #620]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	03db      	lsls	r3, r3, #15
 8003eda:	4998      	ldr	r1, [pc, #608]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003ee0:	4b96      	ldr	r3, [pc, #600]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a95      	ldr	r2, [pc, #596]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003ee6:	f043 0310 	orr.w	r3, r3, #16
 8003eea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003eec:	f7fd fed0 	bl	8001c90 <HAL_GetTick>
 8003ef0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003ef4:	f7fd fecc 	bl	8001c90 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e18b      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003f06:	4b8d      	ldr	r3, [pc, #564]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xa80>
 8003f12:	e018      	b.n	8003f46 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003f14:	4b89      	ldr	r3, [pc, #548]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a88      	ldr	r2, [pc, #544]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003f1a:	f023 0310 	bic.w	r3, r3, #16
 8003f1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f20:	f7fd feb6 	bl	8001c90 <HAL_GetTick>
 8003f24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003f28:	f7fd feb2 	bl	8001c90 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e171      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003f3a:	4b80      	ldr	r3, [pc, #512]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8166 	beq.w	800421c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f56:	4b79      	ldr	r3, [pc, #484]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	f000 80f2 	beq.w	8004148 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	f040 80c5 	bne.w	80040f8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b73      	ldr	r3, [pc, #460]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a72      	ldr	r2, [pc, #456]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003f74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f7a:	f7fd fe89 	bl	8001c90 <HAL_GetTick>
 8003f7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fd fe85 	bl	8001c90 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e144      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f94:	4b69      	ldr	r3, [pc, #420]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa0:	4b66      	ldr	r3, [pc, #408]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d111      	bne.n	8003fd2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	4b63      	ldr	r3, [pc, #396]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb4:	4a61      	ldr	r2, [pc, #388]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003fb6:	f043 0304 	orr.w	r3, r3, #4
 8003fba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003fbe:	4b5f      	ldr	r3, [pc, #380]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004140 <HAL_RCC_OscConfig+0xccc>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003fe6:	4b56      	ldr	r3, [pc, #344]	@ (8004140 <HAL_RCC_OscConfig+0xccc>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4a55      	ldr	r2, [pc, #340]	@ (8004140 <HAL_RCC_OscConfig+0xccc>)
 8003fec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ff0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003ff2:	4b52      	ldr	r3, [pc, #328]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004006:	3a01      	subs	r2, #1
 8004008:	0212      	lsls	r2, r2, #8
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004010:	430a      	orrs	r2, r1
 8004012:	494a      	ldr	r1, [pc, #296]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8004014:	4313      	orrs	r3, r2
 8004016:	628b      	str	r3, [r1, #40]	@ 0x28
 8004018:	4b48      	ldr	r3, [pc, #288]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 800401a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800401c:	4b49      	ldr	r3, [pc, #292]	@ (8004144 <HAL_RCC_OscConfig+0xcd0>)
 800401e:	4013      	ands	r3, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004024:	3a01      	subs	r2, #1
 8004026:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800402e:	3a01      	subs	r2, #1
 8004030:	0252      	lsls	r2, r2, #9
 8004032:	b292      	uxth	r2, r2
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800403a:	3a01      	subs	r2, #1
 800403c:	0412      	lsls	r2, r2, #16
 800403e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004042:	4311      	orrs	r1, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004048:	3a01      	subs	r2, #1
 800404a:	0612      	lsls	r2, r2, #24
 800404c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004050:	430a      	orrs	r2, r1
 8004052:	493a      	ldr	r1, [pc, #232]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8004054:	4313      	orrs	r3, r2
 8004056:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004058:	4b38      	ldr	r3, [pc, #224]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	4a37      	ldr	r2, [pc, #220]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 800405e:	f023 0310 	bic.w	r3, r3, #16
 8004062:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	4a34      	ldr	r2, [pc, #208]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800406e:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	4a32      	ldr	r2, [pc, #200]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8004074:	f043 0310 	orr.w	r3, r3, #16
 8004078:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800407a:	4b30      	ldr	r3, [pc, #192]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 800407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407e:	f023 020c 	bic.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004086:	492d      	ldr	r1, [pc, #180]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8004088:	4313      	orrs	r3, r2
 800408a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800408c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004094:	4b2a      	ldr	r3, [pc, #168]	@ (8004140 <HAL_RCC_OscConfig+0xccc>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a29      	ldr	r2, [pc, #164]	@ (8004140 <HAL_RCC_OscConfig+0xccc>)
 800409a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800409e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80040a0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4b24      	ldr	r3, [pc, #144]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ae:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80040b8:	4b20      	ldr	r3, [pc, #128]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040c4:	f7fd fde4 	bl	8001c90 <HAL_GetTick>
 80040c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fd fde0 	bl	8001c90 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e09f      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040de:	4b17      	ldr	r3, [pc, #92]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040ea:	4b14      	ldr	r3, [pc, #80]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	4a13      	ldr	r2, [pc, #76]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040f4:	6293      	str	r3, [r2, #40]	@ 0x28
 80040f6:	e091      	b.n	800421c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b10      	ldr	r3, [pc, #64]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0f      	ldr	r2, [pc, #60]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004104:	f7fd fdc4 	bl	8001c90 <HAL_GetTick>
 8004108:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd fdc0 	bl	8001c90 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e07f      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800411e:	4b07      	ldr	r3, [pc, #28]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800412a:	4b04      	ldr	r3, [pc, #16]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	4a03      	ldr	r2, [pc, #12]	@ (800413c <HAL_RCC_OscConfig+0xcc8>)
 8004130:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	6293      	str	r3, [r2, #40]	@ 0x28
 800413a:	e06f      	b.n	800421c <HAL_RCC_OscConfig+0xda8>
 800413c:	46020c00 	.word	0x46020c00
 8004140:	46020800 	.word	0x46020800
 8004144:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004148:	4b37      	ldr	r3, [pc, #220]	@ (8004228 <HAL_RCC_OscConfig+0xdb4>)
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800414e:	4b36      	ldr	r3, [pc, #216]	@ (8004228 <HAL_RCC_OscConfig+0xdb4>)
 8004150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004152:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	2b01      	cmp	r3, #1
 800415a:	d039      	beq.n	80041d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0203 	and.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d132      	bne.n	80041d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d129      	bne.n	80041d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d122      	bne.n	80041d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004194:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d11a      	bne.n	80041d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d111      	bne.n	80041d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	0c1b      	lsrs	r3, r3, #16
 80041b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d108      	bne.n	80041d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	0e1b      	lsrs	r3, r3, #24
 80041c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e024      	b.n	800421e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80041d4:	4b14      	ldr	r3, [pc, #80]	@ (8004228 <HAL_RCC_OscConfig+0xdb4>)
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d01a      	beq.n	800421c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <HAL_RCC_OscConfig+0xdb4>)
 80041e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <HAL_RCC_OscConfig+0xdb4>)
 80041ec:	f023 0310 	bic.w	r3, r3, #16
 80041f0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fd fd4d 	bl	8001c90 <HAL_GetTick>
 80041f6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80041f8:	bf00      	nop
 80041fa:	f7fd fd49 	bl	8001c90 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	4293      	cmp	r3, r2
 8004204:	d0f9      	beq.n	80041fa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420a:	4a07      	ldr	r2, [pc, #28]	@ (8004228 <HAL_RCC_OscConfig+0xdb4>)
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_RCC_OscConfig+0xdb4>)
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	4a04      	ldr	r2, [pc, #16]	@ (8004228 <HAL_RCC_OscConfig+0xdb4>)
 8004216:	f043 0310 	orr.w	r3, r3, #16
 800421a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3738      	adds	r7, #56	@ 0x38
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	46020c00 	.word	0x46020c00

0800422c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e1d9      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b9b      	ldr	r3, [pc, #620]	@ (80044b0 <HAL_RCC_ClockConfig+0x284>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d910      	bls.n	8004270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b98      	ldr	r3, [pc, #608]	@ (80044b0 <HAL_RCC_ClockConfig+0x284>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 020f 	bic.w	r2, r3, #15
 8004256:	4996      	ldr	r1, [pc, #600]	@ (80044b0 <HAL_RCC_ClockConfig+0x284>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b94      	ldr	r3, [pc, #592]	@ (80044b0 <HAL_RCC_ClockConfig+0x284>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e1c1      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	4b8c      	ldr	r3, [pc, #560]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004288:	429a      	cmp	r2, r3
 800428a:	d908      	bls.n	800429e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800428c:	4b89      	ldr	r3, [pc, #548]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	4986      	ldr	r1, [pc, #536]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 800429a:	4313      	orrs	r3, r2
 800429c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d012      	beq.n	80042d0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	4b81      	ldr	r3, [pc, #516]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d909      	bls.n	80042d0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80042bc:	4b7d      	ldr	r3, [pc, #500]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	497a      	ldr	r1, [pc, #488]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	4b74      	ldr	r3, [pc, #464]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d908      	bls.n	80042fe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b71      	ldr	r3, [pc, #452]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	496e      	ldr	r1, [pc, #440]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d010      	beq.n	800432c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	4b69      	ldr	r3, [pc, #420]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	429a      	cmp	r2, r3
 8004318:	d908      	bls.n	800432c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800431a:	4b66      	ldr	r3, [pc, #408]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f023 020f 	bic.w	r2, r3, #15
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	4963      	ldr	r1, [pc, #396]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004328:	4313      	orrs	r3, r2
 800432a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80d2 	beq.w	80044de <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d143      	bne.n	80043ce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004346:	4b5b      	ldr	r3, [pc, #364]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d110      	bne.n	8004376 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004354:	4b57      	ldr	r3, [pc, #348]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435a:	4a56      	ldr	r2, [pc, #344]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004364:	4b53      	ldr	r3, [pc, #332]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004372:	2301      	movs	r3, #1
 8004374:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004376:	f7fd fc8b 	bl	8001c90 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800437c:	4b4e      	ldr	r3, [pc, #312]	@ (80044b8 <HAL_RCC_ClockConfig+0x28c>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00f      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800438a:	f7fd fc81 	bl	8001c90 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e12b      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800439c:	4b46      	ldr	r3, [pc, #280]	@ (80044b8 <HAL_RCC_ClockConfig+0x28c>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043ae:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80043b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b4:	4a3f      	ldr	r2, [pc, #252]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80043b6:	f023 0304 	bic.w	r3, r3, #4
 80043ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043be:	4b3d      	ldr	r3, [pc, #244]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d121      	bne.n	800440e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e112      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d107      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d115      	bne.n	800440e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e106      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80043ee:	4b31      	ldr	r3, [pc, #196]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0fa      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fe:	4b2d      	ldr	r3, [pc, #180]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0f2      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800440e:	4b29      	ldr	r3, [pc, #164]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f023 0203 	bic.w	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4926      	ldr	r1, [pc, #152]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 800441c:	4313      	orrs	r3, r2
 800441e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004420:	f7fd fc36 	bl	8001c90 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d112      	bne.n	8004454 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004430:	f7fd fc2e 	bl	8001c90 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0d6      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004446:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d1ee      	bne.n	8004430 <HAL_RCC_ClockConfig+0x204>
 8004452:	e044      	b.n	80044de <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d112      	bne.n	8004482 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445e:	f7fd fc17 	bl	8001c90 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0bf      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004474:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d1ee      	bne.n	800445e <HAL_RCC_ClockConfig+0x232>
 8004480:	e02d      	b.n	80044de <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d123      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f7fd fc00 	bl	8001c90 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0a8      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044a2:	4b04      	ldr	r3, [pc, #16]	@ (80044b4 <HAL_RCC_ClockConfig+0x288>)
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1ee      	bne.n	800448c <HAL_RCC_ClockConfig+0x260>
 80044ae:	e016      	b.n	80044de <HAL_RCC_ClockConfig+0x2b2>
 80044b0:	40022000 	.word	0x40022000
 80044b4:	46020c00 	.word	0x46020c00
 80044b8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044bc:	f7fd fbe8 	bl	8001c90 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e090      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80044d2:	4b4a      	ldr	r3, [pc, #296]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d1ee      	bne.n	80044bc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d010      	beq.n	800450c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	4b43      	ldr	r3, [pc, #268]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d208      	bcs.n	800450c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80044fa:	4b40      	ldr	r3, [pc, #256]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 020f 	bic.w	r2, r3, #15
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	493d      	ldr	r1, [pc, #244]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b3c      	ldr	r3, [pc, #240]	@ (8004600 <HAL_RCC_ClockConfig+0x3d4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d210      	bcs.n	800453c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b39      	ldr	r3, [pc, #228]	@ (8004600 <HAL_RCC_ClockConfig+0x3d4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 020f 	bic.w	r2, r3, #15
 8004522:	4937      	ldr	r1, [pc, #220]	@ (8004600 <HAL_RCC_ClockConfig+0x3d4>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b35      	ldr	r3, [pc, #212]	@ (8004600 <HAL_RCC_ClockConfig+0x3d4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e05b      	b.n	80045f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	4b2b      	ldr	r3, [pc, #172]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004554:	429a      	cmp	r2, r3
 8004556:	d208      	bcs.n	800456a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004558:	4b28      	ldr	r3, [pc, #160]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4925      	ldr	r1, [pc, #148]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 8004566:	4313      	orrs	r3, r2
 8004568:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d012      	beq.n	800459c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	4b20      	ldr	r3, [pc, #128]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004584:	429a      	cmp	r2, r3
 8004586:	d209      	bcs.n	800459c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004588:	4b1c      	ldr	r3, [pc, #112]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4919      	ldr	r1, [pc, #100]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 8004598:	4313      	orrs	r3, r2
 800459a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	4b13      	ldr	r3, [pc, #76]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d208      	bcs.n	80045ca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80045b8:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	490d      	ldr	r1, [pc, #52]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80045ca:	f000 f821 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <HAL_RCC_ClockConfig+0x3d0>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	490a      	ldr	r1, [pc, #40]	@ (8004604 <HAL_RCC_ClockConfig+0x3d8>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
 80045e0:	4a09      	ldr	r2, [pc, #36]	@ (8004608 <HAL_RCC_ClockConfig+0x3dc>)
 80045e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045e4:	4b09      	ldr	r3, [pc, #36]	@ (800460c <HAL_RCC_ClockConfig+0x3e0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fc fff7 	bl	80015dc <HAL_InitTick>
 80045ee:	4603      	mov	r3, r0
 80045f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	46020c00 	.word	0x46020c00
 8004600:	40022000 	.word	0x40022000
 8004604:	080096b8 	.word	0x080096b8
 8004608:	2000000c 	.word	0x2000000c
 800460c:	2000002c 	.word	0x2000002c

08004610 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	b08b      	sub	sp, #44	@ 0x2c
 8004614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461e:	4b78      	ldr	r3, [pc, #480]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004628:	4b75      	ldr	r3, [pc, #468]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x34>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d121      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d11e      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004644:	4b6e      	ldr	r3, [pc, #440]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004650:	4b6b      	ldr	r3, [pc, #428]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004656:	0b1b      	lsrs	r3, r3, #12
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
 800465e:	e005      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004660:	4b67      	ldr	r3, [pc, #412]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	0f1b      	lsrs	r3, r3, #28
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800466c:	4a65      	ldr	r2, [pc, #404]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d110      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004680:	e00d      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004682:	4b5f      	ldr	r3, [pc, #380]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b04      	cmp	r3, #4
 800468c:	d102      	bne.n	8004694 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800468e:	4b5e      	ldr	r3, [pc, #376]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	e004      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d101      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800469a:	4b5b      	ldr	r3, [pc, #364]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800469c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	f040 80a5 	bne.w	80047f0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80046a6:	4b56      	ldr	r3, [pc, #344]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80046b0:	4b53      	ldr	r3, [pc, #332]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80046be:	4b50      	ldr	r3, [pc, #320]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80046ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ce:	08db      	lsrs	r3, r3, #3
 80046d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d003      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0xe4>
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d022      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x128>
 80046f2:	e043      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800480c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004706:	4b3e      	ldr	r3, [pc, #248]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004716:	ed97 6a01 	vldr	s12, [r7, #4]
 800471a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004810 <HAL_RCC_GetSysClockFreq+0x200>
 800471e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004722:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800472a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800472e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004736:	e046      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800480c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474a:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800475a:	ed97 6a01 	vldr	s12, [r7, #4]
 800475e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004810 <HAL_RCC_GetSysClockFreq+0x200>
 8004762:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004766:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800476a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800477a:	e024      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004794:	4b1a      	ldr	r3, [pc, #104]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479c:	ee07 3a90 	vmov	s15, r3
 80047a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047a4:	ed97 6a01 	vldr	s12, [r7, #4]
 80047a8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004810 <HAL_RCC_GetSysClockFreq+0x200>
 80047ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047c4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80047c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ca:	0e1b      	lsrs	r3, r3, #24
 80047cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047d0:	3301      	adds	r3, #1
 80047d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047de:	edd7 6a07 	vldr	s13, [r7, #28]
 80047e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ea:	ee17 3a90 	vmov	r3, s15
 80047ee:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	372c      	adds	r7, #44	@ 0x2c
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	46020c00 	.word	0x46020c00
 8004804:	080096d0 	.word	0x080096d0
 8004808:	00f42400 	.word	0x00f42400
 800480c:	4b742400 	.word	0x4b742400
 8004810:	46000000 	.word	0x46000000

08004814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004818:	f7ff fefa 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b07      	ldr	r3, [pc, #28]	@ (800483c <HAL_RCC_GetHCLKFreq+0x28>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	4906      	ldr	r1, [pc, #24]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	4a05      	ldr	r2, [pc, #20]	@ (8004844 <HAL_RCC_GetHCLKFreq+0x30>)
 8004830:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004832:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <HAL_RCC_GetHCLKFreq+0x30>)
 8004834:	681b      	ldr	r3, [r3, #0]
}
 8004836:	4618      	mov	r0, r3
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	46020c00 	.word	0x46020c00
 8004840:	080096b8 	.word	0x080096b8
 8004844:	2000000c 	.word	0x2000000c

08004848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800484c:	f7ff ffe2 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	@ (800486c <HAL_RCC_GetPCLK1Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	46020c00 	.word	0x46020c00
 800486c:	080096c8 	.word	0x080096c8

08004870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004874:	f7ff ffce 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4903      	ldr	r1, [pc, #12]	@ (8004894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	46020c00 	.word	0x46020c00
 8004894:	080096c8 	.word	0x080096c8

08004898 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800489c:	f7ff ffba 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	@ (80048bc <HAL_RCC_GetPCLK3Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	46020c00 	.word	0x46020c00
 80048bc:	080096c8 	.word	0x080096c8

080048c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	221f      	movs	r2, #31
 80048ce:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80048d0:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <HAL_RCC_GetClockConfig+0x68>)
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f003 0203 	and.w	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80048dc:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_GetClockConfig+0x68>)
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	f003 020f 	and.w	r2, r3, #15
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80048e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004928 <HAL_RCC_GetClockConfig+0x68>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80048f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <HAL_RCC_GetClockConfig+0x68>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004902:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <HAL_RCC_GetClockConfig+0x68>)
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800490e:	4b07      	ldr	r3, [pc, #28]	@ (800492c <HAL_RCC_GetClockConfig+0x6c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 020f 	and.w	r2, r3, #15
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	601a      	str	r2, [r3, #0]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	46020c00 	.word	0x46020c00
 800492c:	40022000 	.word	0x40022000

08004930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004938:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800493a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004946:	f7fe fd17 	bl	8003378 <HAL_PWREx_GetVoltageRange>
 800494a:	6178      	str	r0, [r7, #20]
 800494c:	e019      	b.n	8004982 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	4b39      	ldr	r3, [pc, #228]	@ (8004a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004954:	4a37      	ldr	r2, [pc, #220]	@ (8004a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800495e:	4b35      	ldr	r3, [pc, #212]	@ (8004a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800496c:	f7fe fd04 	bl	8003378 <HAL_PWREx_GetVoltageRange>
 8004970:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004972:	4b30      	ldr	r3, [pc, #192]	@ (8004a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004978:	4a2e      	ldr	r2, [pc, #184]	@ (8004a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800497a:	f023 0304 	bic.w	r3, r3, #4
 800497e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004988:	d003      	beq.n	8004992 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004990:	d109      	bne.n	80049a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004998:	d202      	bcs.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800499a:	2301      	movs	r3, #1
 800499c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800499e:	e033      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80049a4:	e030      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ac:	d208      	bcs.n	80049c0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b4:	d102      	bne.n	80049bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80049b6:	2303      	movs	r3, #3
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e025      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e035      	b.n	8004a2c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049c6:	d90f      	bls.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049d4:	d902      	bls.n	80049dc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	e015      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80049dc:	2301      	movs	r3, #1
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e012      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	e00f      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ee:	d109      	bne.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f6:	d102      	bne.n	80049fe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80049f8:	2301      	movs	r3, #1
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e004      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80049fe:	2302      	movs	r3, #2
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	e001      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004a04:	2301      	movs	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a08:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 020f 	bic.w	r2, r3, #15
 8004a10:	4909      	ldr	r1, [pc, #36]	@ (8004a38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004a18:	4b07      	ldr	r3, [pc, #28]	@ (8004a38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d001      	beq.n	8004a2a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	46020c00 	.word	0x46020c00
 8004a38:	40022000 	.word	0x40022000

08004a3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b0b8      	sub	sp, #224	@ 0xe0
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f002 0401 	and.w	r4, r2, #1
 8004a60:	2500      	movs	r5, #0
 8004a62:	ea54 0305 	orrs.w	r3, r4, r5
 8004a66:	d00b      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004a68:	4bca      	ldr	r3, [pc, #808]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a6e:	f023 0103 	bic.w	r1, r3, #3
 8004a72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a78:	4ac6      	ldr	r2, [pc, #792]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f002 0802 	and.w	r8, r2, #2
 8004a8c:	f04f 0900 	mov.w	r9, #0
 8004a90:	ea58 0309 	orrs.w	r3, r8, r9
 8004a94:	d00b      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004a96:	4bbf      	ldr	r3, [pc, #764]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a9c:	f023 010c 	bic.w	r1, r3, #12
 8004aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa6:	4abb      	ldr	r2, [pc, #748]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f002 0a04 	and.w	sl, r2, #4
 8004aba:	f04f 0b00 	mov.w	fp, #0
 8004abe:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ac2:	d00b      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004ac4:	4bb3      	ldr	r3, [pc, #716]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aca:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad4:	4aaf      	ldr	r2, [pc, #700]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004adc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f002 0308 	and.w	r3, r2, #8
 8004ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004af2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4313      	orrs	r3, r2
 8004afa:	d00b      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004afc:	4ba5      	ldr	r3, [pc, #660]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	4aa1      	ldr	r2, [pc, #644]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f002 0310 	and.w	r3, r2, #16
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	d00b      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004b34:	4b97      	ldr	r3, [pc, #604]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b44:	4a93      	ldr	r2, [pc, #588]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f002 0320 	and.w	r3, r2, #32
 8004b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004b6c:	4b89      	ldr	r3, [pc, #548]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b72:	f023 0107 	bic.w	r1, r3, #7
 8004b76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b7c:	4a85      	ldr	r2, [pc, #532]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b94:	2300      	movs	r3, #0
 8004b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b9a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004baa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004bae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bb4:	4a77      	ldr	r2, [pc, #476]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004bd2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d00b      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004bdc:	4b6d      	ldr	r3, [pc, #436]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bec:	4a69      	ldr	r2, [pc, #420]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c04:	2300      	movs	r3, #0
 8004c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004c14:	4b5f      	ldr	r3, [pc, #380]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c24:	4a5b      	ldr	r2, [pc, #364]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c26:	430b      	orrs	r3, r1
 8004c28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c46:	460b      	mov	r3, r1
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004c4c:	4b51      	ldr	r3, [pc, #324]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c52:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004c56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c7a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004c84:	4b43      	ldr	r3, [pc, #268]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c8a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004c8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c94:	4a3f      	ldr	r2, [pc, #252]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c96:	430b      	orrs	r3, r1
 8004c98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ca8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cb2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004cbc:	4b35      	ldr	r3, [pc, #212]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004cc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ccc:	4a31      	ldr	r2, [pc, #196]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ce6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004cea:	460b      	mov	r3, r1
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d00c      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004cf0:	4b28      	ldr	r3, [pc, #160]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d02:	4a24      	ldr	r2, [pc, #144]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d04:	430b      	orrs	r3, r1
 8004d06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d16:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d18:	2300      	movs	r3, #0
 8004d1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d20:	460b      	mov	r3, r1
 8004d22:	4313      	orrs	r3, r2
 8004d24:	d04f      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	2b80      	cmp	r3, #128	@ 0x80
 8004d30:	d02d      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004d32:	2b80      	cmp	r3, #128	@ 0x80
 8004d34:	d827      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d36:	2b60      	cmp	r3, #96	@ 0x60
 8004d38:	d02e      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004d3a:	2b60      	cmp	r3, #96	@ 0x60
 8004d3c:	d823      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	d006      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004d42:	2b40      	cmp	r3, #64	@ 0x40
 8004d44:	d81f      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d011      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d4e:	e01a      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d50:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d5a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d5c:	e01d      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d62:	3308      	adds	r3, #8
 8004d64:	4618      	mov	r0, r3
 8004d66:	f002 f9d1 	bl	800710c <RCCEx_PLL2_Config>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d70:	e013      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d76:	332c      	adds	r3, #44	@ 0x2c
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f002 fa5f 	bl	800723c <RCCEx_PLL3_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d84:	e009      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d8c:	e005      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004d8e:	bf00      	nop
 8004d90:	e003      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004d92:	bf00      	nop
 8004d94:	46020c00 	.word	0x46020c00
        break;
 8004d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d9a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004da2:	4bb6      	ldr	r3, [pc, #728]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004da4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004da8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	4ab1      	ldr	r2, [pc, #708]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004db6:	430b      	orrs	r3, r1
 8004db8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004dbc:	e003      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004dc2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dd8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4313      	orrs	r3, r2
 8004de0:	d053      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004de2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dee:	d033      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df4:	d82c      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dfa:	d02f      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004dfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e00:	d826      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e06:	d008      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0c:	d820      	bhi.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e16:	d011      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004e18:	e01a      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e1a:	4b98      	ldr	r3, [pc, #608]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	4a97      	ldr	r2, [pc, #604]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e24:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e26:	e01a      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f002 f96c 	bl	800710c <RCCEx_PLL2_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e3a:	e010      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e40:	332c      	adds	r3, #44	@ 0x2c
 8004e42:	4618      	mov	r0, r3
 8004e44:	f002 f9fa 	bl	800723c <RCCEx_PLL3_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e4e:	e006      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004e58:	bf00      	nop
 8004e5a:	e000      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e5e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004e66:	4b85      	ldr	r3, [pc, #532]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e6c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e78:	4a80      	ldr	r2, [pc, #512]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e80:	e003      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e82:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e86:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e96:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e98:	2300      	movs	r3, #0
 8004e9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	d046      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004ea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004eae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004eb2:	d028      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004eb4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004eb8:	d821      	bhi.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004eba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ebe:	d022      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ec4:	d81b      	bhi.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ec6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eca:	d01c      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ecc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ed0:	d815      	bhi.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed6:	d008      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004edc:	d80f      	bhi.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d011      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee6:	d00e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ee8:	e009      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eee:	3308      	adds	r3, #8
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f002 f90b 	bl	800710c <RCCEx_PLL2_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004efc:	e004      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004f04:	e000      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f08:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10d      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004f10:	4b5a      	ldr	r3, [pc, #360]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f16:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f22:	4a56      	ldr	r2, [pc, #344]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f24:	430b      	orrs	r3, r1
 8004f26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f2a:	e003      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f30:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004f40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f42:	2300      	movs	r3, #0
 8004f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	d03f      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d81e      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f64 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004fa3 	.word	0x08004fa3
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f87 	.word	0x08004f87
 8004f70:	08004fa3 	.word	0x08004fa3
 8004f74:	08004fa3 	.word	0x08004fa3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f78:	4b40      	ldr	r3, [pc, #256]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f82:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004f84:	e00e      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f8a:	332c      	adds	r3, #44	@ 0x2c
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f002 f955 	bl	800723c <RCCEx_PLL3_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004f98:	e004      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004fa2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004fa4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10d      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004fac:	4b33      	ldr	r3, [pc, #204]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fb2:	f023 0107 	bic.w	r1, r3, #7
 8004fb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004fc6:	e003      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fcc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004fd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004fdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fde:	2300      	movs	r3, #0
 8004fe0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fe2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	d04d      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ff4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ff8:	d028      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004ffa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ffe:	d821      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005000:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005004:	d024      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005006:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800500a:	d81b      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800500c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005010:	d00e      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005016:	d815      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01b      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005020:	d110      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005022:	4b16      	ldr	r3, [pc, #88]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	4a15      	ldr	r2, [pc, #84]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800502c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800502e:	e012      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005034:	332c      	adds	r3, #44	@ 0x2c
 8005036:	4618      	mov	r0, r3
 8005038:	f002 f900 	bl	800723c <RCCEx_PLL3_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005042:	e008      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800504a:	e004      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800504c:	bf00      	nop
 800504e:	e002      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005050:	bf00      	nop
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005054:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005056:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800505a:	2b00      	cmp	r3, #0
 800505c:	d110      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800505e:	4b07      	ldr	r3, [pc, #28]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005064:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800506c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005070:	4a02      	ldr	r2, [pc, #8]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005072:	430b      	orrs	r3, r1
 8005074:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800507a:	bf00      	nop
 800507c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005084:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005096:	2300      	movs	r3, #0
 8005098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800509a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800509e:	460b      	mov	r3, r1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f000 80b5 	beq.w	8005210 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ac:	4b9d      	ldr	r3, [pc, #628]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d113      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ba:	4b9a      	ldr	r3, [pc, #616]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c0:	4a98      	ldr	r2, [pc, #608]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80050ca:	4b96      	ldr	r3, [pc, #600]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050e2:	4b91      	ldr	r3, [pc, #580]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	4a90      	ldr	r2, [pc, #576]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ee:	f7fc fdcf 	bl	8001c90 <HAL_GetTick>
 80050f2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050f6:	e00b      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f8:	f7fc fdca 	bl	8001c90 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d903      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800510e:	e005      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005110:	4b85      	ldr	r3, [pc, #532]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ed      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800511c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005120:	2b00      	cmp	r3, #0
 8005122:	d165      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005124:	4b7f      	ldr	r3, [pc, #508]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800512a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800512e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005136:	2b00      	cmp	r3, #0
 8005138:	d023      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800513a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800513e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005146:	4293      	cmp	r3, r2
 8005148:	d01b      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800514a:	4b76      	ldr	r3, [pc, #472]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800514c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005154:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005158:	4b72      	ldr	r3, [pc, #456]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800515a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800515e:	4a71      	ldr	r2, [pc, #452]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005164:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005168:	4b6e      	ldr	r3, [pc, #440]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800516a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800516e:	4a6d      	ldr	r2, [pc, #436]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005174:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005178:	4a6a      	ldr	r2, [pc, #424]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800517a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800517e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d019      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518e:	f7fc fd7f 	bl	8001c90 <HAL_GetTick>
 8005192:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005196:	e00d      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7fc fd7a 	bl	8001c90 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d903      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80051b2:	e006      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ea      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80051c2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80051ca:	4b56      	ldr	r3, [pc, #344]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051dc:	4a51      	ldr	r2, [pc, #324]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051de:	430b      	orrs	r3, r1
 80051e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051e4:	e008      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051e6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051ea:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80051ee:	e003      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051f4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051f8:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d107      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005200:	4b48      	ldr	r3, [pc, #288]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005206:	4a47      	ldr	r2, [pc, #284]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005208:	f023 0304 	bic.w	r3, r3, #4
 800520c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800521c:	643b      	str	r3, [r7, #64]	@ 0x40
 800521e:	2300      	movs	r3, #0
 8005220:	647b      	str	r3, [r7, #68]	@ 0x44
 8005222:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005226:	460b      	mov	r3, r1
 8005228:	4313      	orrs	r3, r2
 800522a:	d042      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800522c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005234:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005238:	d022      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800523a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800523e:	d81b      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005244:	d011      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800524a:	d815      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d019      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005254:	d110      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800525a:	3308      	adds	r3, #8
 800525c:	4618      	mov	r0, r3
 800525e:	f001 ff55 	bl	800710c <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005268:	e00d      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526a:	4b2e      	ldr	r3, [pc, #184]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	4a2d      	ldr	r2, [pc, #180]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005274:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005276:	e006      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800527e:	e002      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005280:	bf00      	nop
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005284:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005286:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800528e:	4b25      	ldr	r3, [pc, #148]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005294:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800529c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052a0:	4a20      	ldr	r2, [pc, #128]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052a2:	430b      	orrs	r3, r1
 80052a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052ae:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80052be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80052c8:	460b      	mov	r3, r1
 80052ca:	4313      	orrs	r3, r2
 80052cc:	d032      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80052ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052da:	d00b      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80052dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e0:	d804      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ea:	d007      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052f2:	e004      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052f4:	bf00      	nop
 80052f6:	e002      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052f8:	bf00      	nop
 80052fa:	e000      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052fe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005302:	2b00      	cmp	r3, #0
 8005304:	d112      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005306:	4b07      	ldr	r3, [pc, #28]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800530c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005318:	4a02      	ldr	r2, [pc, #8]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800531a:	430b      	orrs	r3, r1
 800531c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005322:	bf00      	nop
 8005324:	46020c00 	.word	0x46020c00
 8005328:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005330:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005340:	633b      	str	r3, [r7, #48]	@ 0x30
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
 8005346:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800534a:	460b      	mov	r3, r1
 800534c:	4313      	orrs	r3, r2
 800534e:	d019      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800535c:	d105      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800535e:	4b88      	ldr	r3, [pc, #544]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005362:	4a87      	ldr	r2, [pc, #540]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005368:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800536a:	4b85      	ldr	r3, [pc, #532]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800536c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005370:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800537c:	4a80      	ldr	r2, [pc, #512]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800537e:	430b      	orrs	r3, r1
 8005380:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005392:	2300      	movs	r3, #0
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005396:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800539a:	460b      	mov	r3, r1
 800539c:	4313      	orrs	r3, r2
 800539e:	d00c      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80053a0:	4b77      	ldr	r3, [pc, #476]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053b2:	4973      	ldr	r1, [pc, #460]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80053ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	2300      	movs	r3, #0
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80053cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053d0:	460b      	mov	r3, r1
 80053d2:	4313      	orrs	r3, r2
 80053d4:	d00c      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80053d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053e8:	4965      	ldr	r1, [pc, #404]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80053f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005406:	460b      	mov	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	d00c      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800540c:	4b5c      	ldr	r3, [pc, #368]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800540e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005412:	f023 0218 	bic.w	r2, r3, #24
 8005416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800541a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800541e:	4958      	ldr	r1, [pc, #352]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005426:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800543c:	460b      	mov	r3, r1
 800543e:	4313      	orrs	r3, r2
 8005440:	d032      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005442:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800544a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800544e:	d105      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005450:	4b4b      	ldr	r3, [pc, #300]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	4a4a      	ldr	r2, [pc, #296]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800545c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005460:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005464:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005468:	d108      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800546a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800546e:	3308      	adds	r3, #8
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fe4b 	bl	800710c <RCCEx_PLL2_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 800547c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10d      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005484:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005486:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800548e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005492:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005496:	493a      	ldr	r1, [pc, #232]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800549e:	e003      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054a4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80054a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054be:	460b      	mov	r3, r1
 80054c0:	4313      	orrs	r3, r2
 80054c2:	d03a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80054c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054d0:	d00e      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80054d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054d6:	d815      	bhi.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d017      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80054dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054e0:	d110      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e2:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	4a26      	ldr	r2, [pc, #152]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80054ee:	e00e      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054f4:	3308      	adds	r3, #8
 80054f6:	4618      	mov	r0, r3
 80054f8:	f001 fe08 	bl	800710c <RCCEx_PLL2_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005502:	e004      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800550a:	e000      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800550c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800550e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10d      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005516:	4b1a      	ldr	r3, [pc, #104]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800551c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005528:	4915      	ldr	r1, [pc, #84]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005530:	e003      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005532:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005536:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800553a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	2300      	movs	r3, #0
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d00c      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005556:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800555c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005564:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005568:	4905      	ldr	r1, [pc, #20]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005570:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005574:	4618      	mov	r0, r3
 8005576:	37e0      	adds	r7, #224	@ 0xe0
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557e:	bf00      	nop
 8005580:	46020c00 	.word	0x46020c00

08005584 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	@ 0x24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800558c:	4ba6      	ldr	r3, [pc, #664]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800558e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005594:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005596:	4ba4      	ldr	r3, [pc, #656]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80055a0:	4ba1      	ldr	r3, [pc, #644]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	3301      	adds	r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80055ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80055ba:	4b9b      	ldr	r3, [pc, #620]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055be:	08db      	lsrs	r3, r3, #3
 80055c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	fb02 f303 	mul.w	r3, r2, r3
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d062      	beq.n	80056a2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	f200 8081 	bhi.w	80056e6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d024      	beq.n	8005634 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d17a      	bne.n	80056e6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800582c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80055fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005602:	4b89      	ldr	r3, [pc, #548]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005612:	ed97 6a02 	vldr	s12, [r7, #8]
 8005616:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005830 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800561a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800561e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005626:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800562a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005632:	e08f      	b.n	8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005634:	4b7c      	ldr	r3, [pc, #496]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005640:	4b79      	ldr	r3, [pc, #484]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	0f1b      	lsrs	r3, r3, #28
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	e006      	b.n	800565a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800564c:	4b76      	ldr	r3, [pc, #472]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800564e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	0f1b      	lsrs	r3, r3, #28
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	4a76      	ldr	r2, [pc, #472]	@ (8005834 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800565c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005680:	ed97 6a02 	vldr	s12, [r7, #8]
 8005684:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005830 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005694:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056a0:	e058      	b.n	8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800582c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80056b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b4:	4b5c      	ldr	r3, [pc, #368]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005830 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80056cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056e4:	e036      	b.n	8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056e6:	4b50      	ldr	r3, [pc, #320]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80056f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0f1b      	lsrs	r3, r3, #28
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	e006      	b.n	800570c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80056fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	0f1b      	lsrs	r3, r3, #28
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	4a49      	ldr	r2, [pc, #292]	@ (8005834 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	ed97 6a02 	vldr	s12, [r7, #8]
 8005736:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005830 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800573a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005746:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005752:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005754:	4b34      	ldr	r3, [pc, #208]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005760:	4b31      	ldr	r3, [pc, #196]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005764:	0a5b      	lsrs	r3, r3, #9
 8005766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005776:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800577a:	edd7 6a07 	vldr	s13, [r7, #28]
 800577e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005786:	ee17 2a90 	vmov	r2, s15
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e002      	b.n	8005796 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005796:	4b24      	ldr	r3, [pc, #144]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d017      	beq.n	80057d2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057a2:	4b21      	ldr	r3, [pc, #132]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80057b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c8:	ee17 2a90 	vmov	r2, s15
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80057d8:	4b13      	ldr	r3, [pc, #76]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d017      	beq.n	8005814 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057e4:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e8:	0e1b      	lsrs	r3, r3, #24
 80057ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80057f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800580a:	ee17 2a90 	vmov	r2, s15
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005812:	e002      	b.n	800581a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
}
 800581a:	bf00      	nop
 800581c:	3724      	adds	r7, #36	@ 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	46020c00 	.word	0x46020c00
 800582c:	4b742400 	.word	0x4b742400
 8005830:	46000000 	.word	0x46000000
 8005834:	080096d0 	.word	0x080096d0

08005838 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	@ 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005840:	4ba6      	ldr	r3, [pc, #664]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005848:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800584a:	4ba4      	ldr	r3, [pc, #656]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800584c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005854:	4ba1      	ldr	r3, [pc, #644]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	0a1b      	lsrs	r3, r3, #8
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	3301      	adds	r3, #1
 8005860:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005862:	4b9e      	ldr	r3, [pc, #632]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800586e:	4b9b      	ldr	r3, [pc, #620]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005872:	08db      	lsrs	r3, r3, #3
 8005874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d062      	beq.n	8005956 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b03      	cmp	r3, #3
 8005894:	f200 8081 	bhi.w	800599a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d024      	beq.n	80058e8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d17a      	bne.n	800599a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b89      	ldr	r3, [pc, #548]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80058c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ca:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058e6:	e08f      	b.n	8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80058e8:	4b7c      	ldr	r3, [pc, #496]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80058f4:	4b79      	ldr	r3, [pc, #484]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	0f1b      	lsrs	r3, r3, #28
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	e006      	b.n	800590e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005900:	4b76      	ldr	r3, [pc, #472]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	0f1b      	lsrs	r3, r3, #28
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	4a76      	ldr	r2, [pc, #472]	@ (8005ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005914:	ee07 3a90 	vmov	s15, r3
 8005918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005934:	ed97 6a02 	vldr	s12, [r7, #8]
 8005938:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800593c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005940:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005944:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005948:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800594c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005950:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005954:	e058      	b.n	8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	ee07 3a90 	vmov	s15, r3
 800595c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005960:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005968:	4b5c      	ldr	r3, [pc, #368]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800596a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005978:	ed97 6a02 	vldr	s12, [r7, #8]
 800597c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005980:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005984:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005988:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800598c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005994:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005998:	e036      	b.n	8005a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800599a:	4b50      	ldr	r3, [pc, #320]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80059a6:	4b4d      	ldr	r3, [pc, #308]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	0f1b      	lsrs	r3, r3, #28
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	e006      	b.n	80059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80059b2:	4b4a      	ldr	r3, [pc, #296]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	0f1b      	lsrs	r3, r3, #28
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	4a49      	ldr	r2, [pc, #292]	@ (8005ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80059c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ea:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80059fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a06:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005a08:	4b34      	ldr	r3, [pc, #208]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d017      	beq.n	8005a44 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a14:	4b31      	ldr	r3, [pc, #196]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	0a5b      	lsrs	r3, r3, #9
 8005a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3a:	ee17 2a90 	vmov	r2, s15
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e002      	b.n	8005a4a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005a4a:	4b24      	ldr	r3, [pc, #144]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d017      	beq.n	8005a86 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a56:	4b21      	ldr	r3, [pc, #132]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005a68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7c:	ee17 2a90 	vmov	r2, s15
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	e002      	b.n	8005a8c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005a8c:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d017      	beq.n	8005ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a98:	4b10      	ldr	r3, [pc, #64]	@ (8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9c:	0e1b      	lsrs	r3, r3, #24
 8005a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005abe:	ee17 2a90 	vmov	r2, s15
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ac6:	e002      	b.n	8005ace <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
}
 8005ace:	bf00      	nop
 8005ad0:	3724      	adds	r7, #36	@ 0x24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	46020c00 	.word	0x46020c00
 8005ae0:	4b742400 	.word	0x4b742400
 8005ae4:	46000000 	.word	0x46000000
 8005ae8:	080096d0 	.word	0x080096d0

08005aec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b089      	sub	sp, #36	@ 0x24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005af4:	4ba6      	ldr	r3, [pc, #664]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005afe:	4ba4      	ldr	r3, [pc, #656]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005b08:	4ba1      	ldr	r3, [pc, #644]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	0a1b      	lsrs	r3, r3, #8
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	3301      	adds	r3, #1
 8005b14:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005b16:	4b9e      	ldr	r3, [pc, #632]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005b22:	4b9b      	ldr	r3, [pc, #620]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b26:	08db      	lsrs	r3, r3, #3
 8005b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d062      	beq.n	8005c0a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	f200 8081 	bhi.w	8005c4e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d024      	beq.n	8005b9c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d17a      	bne.n	8005c4e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6a:	4b89      	ldr	r3, [pc, #548]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b7e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b96:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005b9a:	e08f      	b.n	8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b9c:	4b7c      	ldr	r3, [pc, #496]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005ba8:	4b79      	ldr	r3, [pc, #484]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	0f1b      	lsrs	r3, r3, #28
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	e006      	b.n	8005bc2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005bb4:	4b76      	ldr	r3, [pc, #472]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	0f1b      	lsrs	r3, r3, #28
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	4a76      	ldr	r2, [pc, #472]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bec:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c08:	e058      	b.n	8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c14:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c30:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c4c:	e036      	b.n	8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c4e:	4b50      	ldr	r3, [pc, #320]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0f1b      	lsrs	r3, r3, #28
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005c66:	4b4a      	ldr	r3, [pc, #296]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	0f1b      	lsrs	r3, r3, #28
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	4a49      	ldr	r2, [pc, #292]	@ (8005d9c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c9e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cba:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005cbc:	4b34      	ldr	r3, [pc, #208]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d017      	beq.n	8005cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cc8:	4b31      	ldr	r3, [pc, #196]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ccc:	0a5b      	lsrs	r3, r3, #9
 8005cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cde:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cee:	ee17 2a90 	vmov	r2, s15
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e002      	b.n	8005cfe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005cfe:	4b24      	ldr	r3, [pc, #144]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d017      	beq.n	8005d3a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d0a:	4b21      	ldr	r3, [pc, #132]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0e:	0c1b      	lsrs	r3, r3, #16
 8005d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005d1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d20:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d30:	ee17 2a90 	vmov	r2, s15
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	605a      	str	r2, [r3, #4]
 8005d38:	e002      	b.n	8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005d40:	4b13      	ldr	r3, [pc, #76]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d017      	beq.n	8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d4c:	4b10      	ldr	r3, [pc, #64]	@ (8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d50:	0e1b      	lsrs	r3, r3, #24
 8005d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d62:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d72:	ee17 2a90 	vmov	r2, s15
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d7a:	e002      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
}
 8005d82:	bf00      	nop
 8005d84:	3724      	adds	r7, #36	@ 0x24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	46020c00 	.word	0x46020c00
 8005d94:	4b742400 	.word	0x4b742400
 8005d98:	46000000 	.word	0x46000000
 8005d9c:	080096d0 	.word	0x080096d0

08005da0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08e      	sub	sp, #56	@ 0x38
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dae:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005db2:	430b      	orrs	r3, r1
 8005db4:	d145      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005db6:	4baa      	ldr	r3, [pc, #680]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005dc2:	4ba7      	ldr	r3, [pc, #668]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d108      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dd6:	d104      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dde:	f001 b987 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005de2:	4b9f      	ldr	r3, [pc, #636]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005df0:	d114      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005df8:	d110      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dfa:	4b99      	ldr	r3, [pc, #612]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e08:	d103      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005e0a:	23fa      	movs	r3, #250	@ 0xfa
 8005e0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e0e:	f001 b96f 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005e12:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e16:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e18:	f001 b96a 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005e1c:	4b90      	ldr	r3, [pc, #576]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e28:	d107      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e30:	d103      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005e32:	4b8c      	ldr	r3, [pc, #560]	@ (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e36:	f001 b95b 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e3e:	f001 b957 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e46:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	d151      	bne.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e4e:	4b84      	ldr	r3, [pc, #528]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e54:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005e58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2b80      	cmp	r3, #128	@ 0x80
 8005e5e:	d035      	beq.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	2b80      	cmp	r3, #128	@ 0x80
 8005e64:	d841      	bhi.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	2b60      	cmp	r3, #96	@ 0x60
 8005e6a:	d02a      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	2b60      	cmp	r3, #96	@ 0x60
 8005e70:	d83b      	bhi.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	2b40      	cmp	r3, #64	@ 0x40
 8005e76:	d009      	beq.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d835      	bhi.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00c      	beq.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d012      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005e8a:	e02e      	b.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fb77 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e9a:	f001 b929 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9e:	f107 0318 	add.w	r3, r7, #24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff fcc8 	bl	8005838 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eac:	f001 b920 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eb0:	f107 030c 	add.w	r3, r7, #12
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fe19 	bl	8005aec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ebe:	f001 b917 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005ec2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005ec6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ec8:	f001 b912 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ecc:	4b64      	ldr	r3, [pc, #400]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed8:	d103      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005eda:	4b63      	ldr	r3, [pc, #396]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ede:	f001 b907 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ee6:	f001 b903 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eee:	f001 b8ff 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005efa:	430b      	orrs	r3, r1
 8005efc:	d158      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005efe:	4b58      	ldr	r3, [pc, #352]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f08:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f10:	d03b      	beq.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f18:	d846      	bhi.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f20:	d02e      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f28:	d83e      	bhi.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f30:	d00b      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f38:	d836      	bhi.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00d      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f46:	d012      	beq.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005f48:	e02e      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fb18 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f58:	f001 b8ca 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f5c:	f107 0318 	add.w	r3, r7, #24
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fc69 	bl	8005838 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f6a:	f001 b8c1 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f6e:	f107 030c 	add.w	r3, r7, #12
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fdba 	bl	8005aec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f7c:	f001 b8b8 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f80:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f86:	f001 b8b3 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f8a:	4b35      	ldr	r3, [pc, #212]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f96:	d103      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005f98:	4b33      	ldr	r3, [pc, #204]	@ (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f9c:	f001 b8a8 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fa4:	f001 b8a4 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fac:	f001 b8a0 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb4:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	d16e      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005fbc:	4b28      	ldr	r3, [pc, #160]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fc2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005fc6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005fce:	d034      	beq.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005fd6:	d85c      	bhi.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fde:	d00b      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fe6:	d854      	bhi.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d016      	beq.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ff4:	d009      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005ff6:	e04c      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fac1 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006006:	f001 b873 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800600a:	f107 0318 	add.w	r3, r7, #24
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fc12 	bl	8005838 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006018:	f001 b86a 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800601c:	4b10      	ldr	r3, [pc, #64]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006028:	d103      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800602a:	4b10      	ldr	r3, [pc, #64]	@ (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800602e:	f001 b85f 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006036:	f001 b85b 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800603a:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b20      	cmp	r3, #32
 8006044:	d121      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00e      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006052:	4b03      	ldr	r3, [pc, #12]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0e1b      	lsrs	r3, r3, #24
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	e00f      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800605e:	bf00      	nop
 8006060:	46020c00 	.word	0x46020c00
 8006064:	0007a120 	.word	0x0007a120
 8006068:	00f42400 	.word	0x00f42400
 800606c:	02dc6c00 	.word	0x02dc6c00
 8006070:	4ba7      	ldr	r3, [pc, #668]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	0e1b      	lsrs	r3, r3, #24
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	4aa5      	ldr	r2, [pc, #660]	@ (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006084:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006086:	f001 b833 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800608e:	f001 b82f 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006096:	f001 b82b 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800609a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800609e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80060a2:	430b      	orrs	r3, r1
 80060a4:	d17f      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80060a6:	4b9a      	ldr	r3, [pc, #616]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060b0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d165      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80060b8:	4b95      	ldr	r3, [pc, #596]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060be:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80060c2:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060ca:	d034      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060d2:	d853      	bhi.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060da:	d00b      	beq.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060e2:	d84b      	bhi.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d016      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060f0:	d009      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80060f2:	e043      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fa43 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006100:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006102:	f000 bff5 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006106:	f107 0318 	add.w	r3, r7, #24
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fb94 	bl	8005838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006114:	f000 bfec 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006118:	4b7d      	ldr	r3, [pc, #500]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006124:	d103      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006126:	4b7c      	ldr	r3, [pc, #496]	@ (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006128:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800612a:	f000 bfe1 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006132:	f000 bfdd 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006136:	4b76      	ldr	r3, [pc, #472]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b20      	cmp	r3, #32
 8006140:	d118      	bne.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006142:	4b73      	ldr	r3, [pc, #460]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800614e:	4b70      	ldr	r3, [pc, #448]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	0e1b      	lsrs	r3, r3, #24
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	e006      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800615a:	4b6d      	ldr	r3, [pc, #436]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800615c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006160:	041b      	lsls	r3, r3, #16
 8006162:	0e1b      	lsrs	r3, r3, #24
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	4a6a      	ldr	r2, [pc, #424]	@ (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800616a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006170:	f000 bfbe 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006178:	f000 bfba 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006180:	f000 bfb6 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800618a:	d108      	bne.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800618c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff f9f7 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	637b      	str	r3, [r7, #52]	@ 0x34
 800619a:	f000 bfa9 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061a2:	f000 bfa5 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80061a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061aa:	1e51      	subs	r1, r2, #1
 80061ac:	430b      	orrs	r3, r1
 80061ae:	d136      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061b0:	4b57      	ldr	r3, [pc, #348]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80061c2:	f7fe fb55 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 80061c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80061c8:	f000 bf92 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d104      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061d2:	f7fe fa1d 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80061d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80061d8:	f000 bf8a 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e8:	d106      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80061ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d103      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80061f0:	4b4a      	ldr	r3, [pc, #296]	@ (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f4:	f000 bf7c 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061f8:	4b45      	ldr	r3, [pc, #276]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d107      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	2b03      	cmp	r3, #3
 800620a:	d104      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800620c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006210:	637b      	str	r3, [r7, #52]	@ 0x34
 8006212:	f000 bf6d 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34
 800621a:	f000 bf69 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800621e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006222:	1e91      	subs	r1, r2, #2
 8006224:	430b      	orrs	r3, r1
 8006226:	d136      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006228:	4b39      	ldr	r3, [pc, #228]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800622a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800622e:	f003 030c 	and.w	r3, r3, #12
 8006232:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800623a:	f7fe fb05 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 800623e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006240:	f000 bf56 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	2b04      	cmp	r3, #4
 8006248:	d104      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800624a:	f7fe f9e1 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 800624e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006250:	f000 bf4e 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006254:	4b2e      	ldr	r3, [pc, #184]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006260:	d106      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	2b08      	cmp	r3, #8
 8006266:	d103      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006268:	4b2c      	ldr	r3, [pc, #176]	@ (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800626a:	637b      	str	r3, [r7, #52]	@ 0x34
 800626c:	f000 bf40 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006270:	4b27      	ldr	r3, [pc, #156]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d107      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	2b0c      	cmp	r3, #12
 8006282:	d104      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
 800628a:	f000 bf31 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
 8006292:	f000 bf2d 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629a:	1f11      	subs	r1, r2, #4
 800629c:	430b      	orrs	r3, r1
 800629e:	d13f      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062b2:	f7fe fac9 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 80062b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80062b8:	f000 bf1a 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d104      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062c2:	f7fe f9a5 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80062c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80062c8:	f000 bf12 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80062cc:	4b10      	ldr	r3, [pc, #64]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d8:	d106      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d103      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80062e0:	4b0e      	ldr	r3, [pc, #56]	@ (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e4:	f000 bf04 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80062e8:	4b09      	ldr	r3, [pc, #36]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d107      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	2b30      	cmp	r3, #48	@ 0x30
 80062fa:	d104      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80062fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
 8006302:	f000 bef5 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
 800630a:	f000 bef1 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800630e:	bf00      	nop
 8006310:	46020c00 	.word	0x46020c00
 8006314:	080096d0 	.word	0x080096d0
 8006318:	02dc6c00 	.word	0x02dc6c00
 800631c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006324:	f1a2 0108 	sub.w	r1, r2, #8
 8006328:	430b      	orrs	r3, r1
 800632a:	d136      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800632c:	4ba4      	ldr	r3, [pc, #656]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800632e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006332:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006336:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633a:	2b00      	cmp	r3, #0
 800633c:	d104      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800633e:	f7fe fa83 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8006342:	6378      	str	r0, [r7, #52]	@ 0x34
 8006344:	f000 bed4 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	2b40      	cmp	r3, #64	@ 0x40
 800634c:	d104      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800634e:	f7fe f95f 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8006352:	6378      	str	r0, [r7, #52]	@ 0x34
 8006354:	f000 becc 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006358:	4b99      	ldr	r3, [pc, #612]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006364:	d106      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	2b80      	cmp	r3, #128	@ 0x80
 800636a:	d103      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800636c:	4b95      	ldr	r3, [pc, #596]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800636e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006370:	f000 bebe 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006374:	4b92      	ldr	r3, [pc, #584]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b02      	cmp	r3, #2
 8006380:	d107      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	2bc0      	cmp	r3, #192	@ 0xc0
 8006386:	d104      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
 800638e:	f000 beaf 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
 8006396:	f000 beab 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800639a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639e:	f1a2 0110 	sub.w	r1, r2, #16
 80063a2:	430b      	orrs	r3, r1
 80063a4:	d139      	bne.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80063a6:	4b86      	ldr	r3, [pc, #536]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063b8:	f7fe fa46 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 80063bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80063be:	f000 be97 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c8:	d104      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063ca:	f7fe f921 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80063ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80063d0:	f000 be8e 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80063d4:	4b7a      	ldr	r3, [pc, #488]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e0:	d107      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	d103      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80063ea:	4b76      	ldr	r3, [pc, #472]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ee:	f000 be7f 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80063f2:	4b73      	ldr	r3, [pc, #460]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d108      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006406:	d104      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34
 800640e:	f000 be6f 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	637b      	str	r3, [r7, #52]	@ 0x34
 8006416:	f000 be6b 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800641a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641e:	f1a2 0120 	sub.w	r1, r2, #32
 8006422:	430b      	orrs	r3, r1
 8006424:	d158      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006426:	4b66      	ldr	r3, [pc, #408]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	2b00      	cmp	r3, #0
 8006436:	d104      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006438:	f7fe fa2e 	bl	8004898 <HAL_RCC_GetPCLK3Freq>
 800643c:	6378      	str	r0, [r7, #52]	@ 0x34
 800643e:	f000 be57 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	2b01      	cmp	r3, #1
 8006446:	d104      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006448:	f7fe f8e2 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 800644c:	6378      	str	r0, [r7, #52]	@ 0x34
 800644e:	f000 be4f 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006452:	4b5b      	ldr	r3, [pc, #364]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645e:	d106      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	2b02      	cmp	r3, #2
 8006464:	d103      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006466:	4b57      	ldr	r3, [pc, #348]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006468:	637b      	str	r3, [r7, #52]	@ 0x34
 800646a:	f000 be41 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800646e:	4b54      	ldr	r3, [pc, #336]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d107      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800647c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647e:	2b03      	cmp	r3, #3
 8006480:	d104      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34
 8006488:	f000 be32 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800648c:	4b4c      	ldr	r3, [pc, #304]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b20      	cmp	r3, #32
 8006496:	d11b      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	2b04      	cmp	r3, #4
 800649c:	d118      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800649e:	4b48      	ldr	r3, [pc, #288]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80064aa:	4b45      	ldr	r3, [pc, #276]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	0e1b      	lsrs	r3, r3, #24
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	e006      	b.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80064b6:	4b42      	ldr	r3, [pc, #264]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064bc:	041b      	lsls	r3, r3, #16
 80064be:	0e1b      	lsrs	r3, r3, #24
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	4a40      	ldr	r2, [pc, #256]	@ (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80064c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80064cc:	f000 be10 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d4:	f000 be0c 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80064d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064dc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80064e0:	430b      	orrs	r3, r1
 80064e2:	d173      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80064e4:	4b36      	ldr	r3, [pc, #216]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064ea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80064ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f6:	d104      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064f8:	f7fe f88a 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80064fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80064fe:	f000 bdf7 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006508:	d108      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650a:	f107 0318 	add.w	r3, r7, #24
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff f992 	bl	8005838 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
 8006518:	f000 bdea 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006522:	f7fe f977 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8006526:	6378      	str	r0, [r7, #52]	@ 0x34
 8006528:	f000 bde2 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006532:	d122      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006534:	4b22      	ldr	r3, [pc, #136]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b20      	cmp	r3, #32
 800653e:	d118      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006540:	4b1f      	ldr	r3, [pc, #124]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800654c:	4b1c      	ldr	r3, [pc, #112]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	0e1b      	lsrs	r3, r3, #24
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	e006      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006558:	4b19      	ldr	r3, [pc, #100]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800655a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	0e1b      	lsrs	r3, r3, #24
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	4a18      	ldr	r2, [pc, #96]	@ (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
 800656e:	f000 bdbf 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34
 8006576:	f000 bdbb 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800657a:	4b11      	ldr	r3, [pc, #68]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006586:	d107      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800658e:	d103      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006590:	4b0c      	ldr	r3, [pc, #48]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006592:	637b      	str	r3, [r7, #52]	@ 0x34
 8006594:	f000 bdac 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006598:	4b09      	ldr	r3, [pc, #36]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a4:	d107      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065ac:	d103      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80065ae:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80065b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b2:	f000 bd9d 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ba:	f000 bd99 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80065be:	bf00      	nop
 80065c0:	46020c00 	.word	0x46020c00
 80065c4:	00f42400 	.word	0x00f42400
 80065c8:	080096d0 	.word	0x080096d0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80065cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80065d4:	430b      	orrs	r3, r1
 80065d6:	d158      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80065d8:	4bad      	ldr	r3, [pc, #692]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d84b      	bhi.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80065ea:	a201      	add	r2, pc, #4	@ (adr r2, 80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006629 	.word	0x08006629
 80065f4:	08006605 	.word	0x08006605
 80065f8:	08006617 	.word	0x08006617
 80065fc:	08006633 	.word	0x08006633
 8006600:	0800663d 	.word	0x0800663d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe ffbb 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006612:	f000 bd6d 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006616:	f107 030c 	add.w	r3, r7, #12
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fa66 	bl	8005aec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006624:	f000 bd64 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006628:	f7fe f8f4 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 800662c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800662e:	f000 bd5f 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006632:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006638:	f000 bd5a 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800663c:	4b94      	ldr	r3, [pc, #592]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b20      	cmp	r3, #32
 8006646:	d118      	bne.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006648:	4b91      	ldr	r3, [pc, #580]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006654:	4b8e      	ldr	r3, [pc, #568]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	0e1b      	lsrs	r3, r3, #24
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	e006      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006660:	4b8b      	ldr	r3, [pc, #556]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	0e1b      	lsrs	r3, r3, #24
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	4a89      	ldr	r2, [pc, #548]	@ (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006674:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006676:	f000 bd3b 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800667e:	f000 bd37 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006686:	f000 bd33 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800668a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006692:	430b      	orrs	r3, r1
 8006694:	d167      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006696:	4b7e      	ldr	r3, [pc, #504]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800669c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80066a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066a8:	d036      	beq.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066b0:	d855      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066b8:	d029      	beq.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066c0:	d84d      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c8:	d013      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066d0:	d845      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d015      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066de:	d13e      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe ff4d 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066ee:	f000 bcff 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066f2:	f107 030c 	add.w	r3, r7, #12
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff f9f8 	bl	8005aec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006700:	f000 bcf6 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006704:	f7fe f886 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8006708:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800670a:	f000 bcf1 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800670e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006714:	f000 bcec 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006718:	4b5d      	ldr	r3, [pc, #372]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b20      	cmp	r3, #32
 8006722:	d118      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006724:	4b5a      	ldr	r3, [pc, #360]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006730:	4b57      	ldr	r3, [pc, #348]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	0e1b      	lsrs	r3, r3, #24
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	e006      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800673c:	4b54      	ldr	r3, [pc, #336]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800673e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006742:	041b      	lsls	r3, r3, #16
 8006744:	0e1b      	lsrs	r3, r3, #24
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	4a52      	ldr	r2, [pc, #328]	@ (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800674c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006752:	f000 bccd 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800675a:	f000 bcc9 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006762:	f000 bcc5 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800676e:	430b      	orrs	r3, r1
 8006770:	d14c      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006772:	4b47      	ldr	r3, [pc, #284]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006778:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800677c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006784:	f7fe f860 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8006788:	6378      	str	r0, [r7, #52]	@ 0x34
 800678a:	f000 bcb1 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006794:	d104      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006796:	f7fd ff3b 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 800679a:	6378      	str	r0, [r7, #52]	@ 0x34
 800679c:	f000 bca8 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80067a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ac:	d107      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067b4:	d103      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80067b6:	4b38      	ldr	r3, [pc, #224]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80067b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ba:	f000 bc99 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80067be:	4b34      	ldr	r3, [pc, #208]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	d11c      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067d0:	d118      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067d2:	4b2f      	ldr	r3, [pc, #188]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80067de:	4b2c      	ldr	r3, [pc, #176]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	0e1b      	lsrs	r3, r3, #24
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	e006      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80067ea:	4b29      	ldr	r3, [pc, #164]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	0e1b      	lsrs	r3, r3, #24
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	4a26      	ldr	r2, [pc, #152]	@ (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80067fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006800:	f000 bc76 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	637b      	str	r3, [r7, #52]	@ 0x34
 8006808:	f000 bc72 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800680c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006810:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006814:	430b      	orrs	r3, r1
 8006816:	d152      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006818:	4b1d      	ldr	r3, [pc, #116]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800681a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800681e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006822:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	2b00      	cmp	r3, #0
 8006828:	d104      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800682a:	f7fe f80d 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 800682e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006830:	f000 bc5e 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800683a:	d104      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800683c:	f7fd fee8 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8006840:	6378      	str	r0, [r7, #52]	@ 0x34
 8006842:	f000 bc55 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006846:	4b12      	ldr	r3, [pc, #72]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006852:	d107      	bne.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800685a:	d103      	bne.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800685c:	4b0e      	ldr	r3, [pc, #56]	@ (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800685e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006860:	f000 bc46 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006864:	4b0a      	ldr	r3, [pc, #40]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b20      	cmp	r3, #32
 800686e:	d122      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006876:	d11e      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006878:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006884:	4b02      	ldr	r3, [pc, #8]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	0e1b      	lsrs	r3, r3, #24
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	e00c      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006890:	46020c00 	.word	0x46020c00
 8006894:	080096d0 	.word	0x080096d0
 8006898:	00f42400 	.word	0x00f42400
 800689c:	4ba1      	ldr	r3, [pc, #644]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800689e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	0e1b      	lsrs	r3, r3, #24
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	4a9f      	ldr	r2, [pc, #636]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b2:	f000 bc1d 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ba:	f000 bc19 	b.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80068be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80068c6:	430b      	orrs	r3, r1
 80068c8:	d151      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80068ca:	4b96      	ldr	r3, [pc, #600]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80068da:	d024      	beq.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	2bc0      	cmp	r3, #192	@ 0xc0
 80068e0:	d842      	bhi.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	2b80      	cmp	r3, #128	@ 0x80
 80068e6:	d00d      	beq.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	2b80      	cmp	r3, #128	@ 0x80
 80068ec:	d83c      	bhi.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	2b40      	cmp	r3, #64	@ 0x40
 80068f8:	d011      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80068fa:	e035      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80068fc:	f7fd ffcc 	bl	8004898 <HAL_RCC_GetPCLK3Freq>
 8006900:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006902:	e3f5      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006904:	4b87      	ldr	r3, [pc, #540]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006910:	d102      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006912:	4b86      	ldr	r3, [pc, #536]	@ (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006916:	e3eb      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800691c:	e3e8      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800691e:	f7fd fe77 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8006922:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006924:	e3e4      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006926:	4b7f      	ldr	r3, [pc, #508]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b20      	cmp	r3, #32
 8006930:	d117      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006932:	4b7c      	ldr	r3, [pc, #496]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800693e:	4b79      	ldr	r3, [pc, #484]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	0e1b      	lsrs	r3, r3, #24
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	e006      	b.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800694a:	4b76      	ldr	r3, [pc, #472]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800694c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	0e1b      	lsrs	r3, r3, #24
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	4a73      	ldr	r2, [pc, #460]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800695a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006960:	e3c6      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006966:	e3c3      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800696c:	e3c0      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800696e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006972:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006976:	430b      	orrs	r3, r1
 8006978:	d147      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800697a:	4b6a      	ldr	r3, [pc, #424]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800697c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006980:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006984:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800698c:	f7fd ff5c 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8006990:	6378      	str	r0, [r7, #52]	@ 0x34
 8006992:	e3ad      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800699a:	d103      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800699c:	f7fd fe38 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80069a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80069a2:	e3a5      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80069a4:	4b5f      	ldr	r3, [pc, #380]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b0:	d106      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069b8:	d102      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80069ba:	4b5c      	ldr	r3, [pc, #368]	@ (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80069be:	e397      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80069c0:	4b58      	ldr	r3, [pc, #352]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d11b      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80069d2:	d117      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069d4:	4b53      	ldr	r3, [pc, #332]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80069e0:	4b50      	ldr	r3, [pc, #320]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	0e1b      	lsrs	r3, r3, #24
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	e006      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80069ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069f2:	041b      	lsls	r3, r3, #16
 80069f4:	0e1b      	lsrs	r3, r3, #24
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	4a4b      	ldr	r2, [pc, #300]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80069fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a02:	e375      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a08:	e372      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a0e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a12:	430b      	orrs	r3, r1
 8006a14:	d164      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006a16:	4b43      	ldr	r3, [pc, #268]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a20:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d120      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a28:	4b3e      	ldr	r3, [pc, #248]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d117      	bne.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a34:	4b3b      	ldr	r3, [pc, #236]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006a40:	4b38      	ldr	r3, [pc, #224]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	0e1b      	lsrs	r3, r3, #24
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	e006      	b.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006a4c:	4b35      	ldr	r3, [pc, #212]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	0e1b      	lsrs	r3, r3, #24
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	4a33      	ldr	r2, [pc, #204]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a62:	e345      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a68:	e342      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a78:	d112      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a80:	d10e      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a82:	4b28      	ldr	r3, [pc, #160]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a90:	d102      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006a92:	23fa      	movs	r3, #250	@ 0xfa
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a96:	e32b      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a9e:	e327      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006aa0:	4b20      	ldr	r3, [pc, #128]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aac:	d106      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab4:	d102      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aba:	e319      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006abc:	4b19      	ldr	r3, [pc, #100]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d107      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad0:	d103      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad8:	e30a      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ade:	e307      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	d16b      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006aec:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006af2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006af6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d127      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006afe:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d11e      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b0a:	4b06      	ldr	r3, [pc, #24]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006b16:	4b03      	ldr	r3, [pc, #12]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	0e1b      	lsrs	r3, r3, #24
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	e00d      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006b22:	bf00      	nop
 8006b24:	46020c00 	.word	0x46020c00
 8006b28:	080096d0 	.word	0x080096d0
 8006b2c:	00f42400 	.word	0x00f42400
 8006b30:	4b94      	ldr	r3, [pc, #592]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	0e1b      	lsrs	r3, r3, #24
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	4a92      	ldr	r2, [pc, #584]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b46:	e2d3      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b4c:	e2d0      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b5c:	d112      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b64:	d10e      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b66:	4b87      	ldr	r3, [pc, #540]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b74:	d102      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006b76:	23fa      	movs	r3, #250	@ 0xfa
 8006b78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b7a:	e2b9      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b82:	e2b5      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006b84:	4b7f      	ldr	r3, [pc, #508]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b90:	d106      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b98:	d102      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006b9a:	4b7c      	ldr	r3, [pc, #496]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9e:	e2a7      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006ba0:	4b78      	ldr	r3, [pc, #480]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d107      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bb4:	d103      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bbc:	e298      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc2:	e295      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	d147      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bd6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006bda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d103      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006be2:	f7fd fe31 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8006be6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006be8:	e282      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006bea:	4b66      	ldr	r3, [pc, #408]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf8:	d112      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c00:	d10e      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c02:	4b60      	ldr	r3, [pc, #384]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c10:	d102      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006c12:	23fa      	movs	r3, #250	@ 0xfa
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c16:	e26b      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c1e:	e267      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006c20:	4b58      	ldr	r3, [pc, #352]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c2c:	d106      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c34:	d102      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006c36:	4b55      	ldr	r3, [pc, #340]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3a:	e259      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006c3c:	4b51      	ldr	r3, [pc, #324]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d107      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c50:	d103      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c58:	e24a      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c5e:	e247      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c64:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	d12d      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006c6c:	4b45      	ldr	r3, [pc, #276]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c72:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006c76:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006c78:	4b42      	ldr	r3, [pc, #264]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c84:	d105      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c90:	e22e      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c98:	d107      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fc70 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca8:	e222      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb2:	f107 0318 	add.w	r3, r7, #24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fdbe 	bl	8005838 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc0:	e216      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc6:	e213      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ccc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	d15d      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cda:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006cde:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ce6:	d028      	beq.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cee:	d845      	bhi.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cf6:	d013      	beq.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cfe:	d83d      	bhi.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d0c:	d004      	beq.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006d0e:	e035      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006d10:	f7fd fdae 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 8006d14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d16:	e1eb      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d18:	f7fd fc7a 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8006d1c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d1e:	e1e7      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d20:	4b18      	ldr	r3, [pc, #96]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d2c:	d102      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006d2e:	4b17      	ldr	r3, [pc, #92]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d32:	e1dd      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d38:	e1da      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d3a:	4b12      	ldr	r3, [pc, #72]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d117      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d46:	4b0f      	ldr	r3, [pc, #60]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006d52:	4b0c      	ldr	r3, [pc, #48]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	0e1b      	lsrs	r3, r3, #24
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	e006      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006d5e:	4b09      	ldr	r3, [pc, #36]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d64:	041b      	lsls	r3, r3, #16
 8006d66:	0e1b      	lsrs	r3, r3, #24
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	4a06      	ldr	r2, [pc, #24]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d74:	e1bc      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d7a:	e1b9      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d80:	e1b6      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006d82:	bf00      	nop
 8006d84:	46020c00 	.word	0x46020c00
 8006d88:	080096d0 	.word	0x080096d0
 8006d8c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d94:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	d156      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006d9c:	4ba5      	ldr	r3, [pc, #660]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006da6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dae:	d028      	beq.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006db6:	d845      	bhi.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dbe:	d013      	beq.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dc6:	d83d      	bhi.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd4:	d004      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006dd6:	e035      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006dd8:	f7fd fd36 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8006ddc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006dde:	e187      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006de0:	f7fd fc16 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8006de4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006de6:	e183      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006de8:	4b92      	ldr	r3, [pc, #584]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df4:	d102      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006df6:	4b90      	ldr	r3, [pc, #576]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006df8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dfa:	e179      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e00:	e176      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e02:	4b8c      	ldr	r3, [pc, #560]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	d117      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e0e:	4b89      	ldr	r3, [pc, #548]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006e1a:	4b86      	ldr	r3, [pc, #536]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	0e1b      	lsrs	r3, r3, #24
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	e006      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006e26:	4b83      	ldr	r3, [pc, #524]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e2c:	041b      	lsls	r3, r3, #16
 8006e2e:	0e1b      	lsrs	r3, r3, #24
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	4a81      	ldr	r2, [pc, #516]	@ (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e3c:	e158      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e42:	e155      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e48:	e152      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006e52:	430b      	orrs	r3, r1
 8006e54:	d177      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006e56:	4b77      	ldr	r3, [pc, #476]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e5c:	f003 0318 	and.w	r3, r3, #24
 8006e60:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	2b18      	cmp	r3, #24
 8006e66:	d86b      	bhi.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006e68:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006ed5 	.word	0x08006ed5
 8006e74:	08006f41 	.word	0x08006f41
 8006e78:	08006f41 	.word	0x08006f41
 8006e7c:	08006f41 	.word	0x08006f41
 8006e80:	08006f41 	.word	0x08006f41
 8006e84:	08006f41 	.word	0x08006f41
 8006e88:	08006f41 	.word	0x08006f41
 8006e8c:	08006f41 	.word	0x08006f41
 8006e90:	08006edd 	.word	0x08006edd
 8006e94:	08006f41 	.word	0x08006f41
 8006e98:	08006f41 	.word	0x08006f41
 8006e9c:	08006f41 	.word	0x08006f41
 8006ea0:	08006f41 	.word	0x08006f41
 8006ea4:	08006f41 	.word	0x08006f41
 8006ea8:	08006f41 	.word	0x08006f41
 8006eac:	08006f41 	.word	0x08006f41
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006f41 	.word	0x08006f41
 8006eb8:	08006f41 	.word	0x08006f41
 8006ebc:	08006f41 	.word	0x08006f41
 8006ec0:	08006f41 	.word	0x08006f41
 8006ec4:	08006f41 	.word	0x08006f41
 8006ec8:	08006f41 	.word	0x08006f41
 8006ecc:	08006f41 	.word	0x08006f41
 8006ed0:	08006eff 	.word	0x08006eff
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006ed4:	f7fd fce0 	bl	8004898 <HAL_RCC_GetPCLK3Freq>
 8006ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006eda:	e109      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006edc:	f7fd fb98 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8006ee0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ee2:	e105      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ee4:	4b53      	ldr	r3, [pc, #332]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef0:	d102      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006ef2:	4b51      	ldr	r3, [pc, #324]	@ (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ef6:	e0fb      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006efc:	e0f8      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006efe:	4b4d      	ldr	r3, [pc, #308]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d117      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006f16:	4b47      	ldr	r3, [pc, #284]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	0e1b      	lsrs	r3, r3, #24
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	e006      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006f22:	4b44      	ldr	r3, [pc, #272]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	0e1b      	lsrs	r3, r3, #24
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	4a42      	ldr	r2, [pc, #264]	@ (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f38:	e0da      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f3e:	e0d7      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f44:	e0d4      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f4a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	d155      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006f52:	4b38      	ldr	r3, [pc, #224]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f58:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f64:	d013      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f6c:	d844      	bhi.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f74:	d013      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f7c:	d83c      	bhi.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d014      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f8a:	d014      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006f8c:	e034      	b.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f8e:	f107 0318 	add.w	r3, r7, #24
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fc50 	bl	8005838 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f9c:	e0a8      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fe faee 	bl	8005584 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fac:	e0a0      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006fae:	f7fd fb2f 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8006fb2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fb4:	e09c      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d117      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006fce:	4b19      	ldr	r3, [pc, #100]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	0e1b      	lsrs	r3, r3, #24
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	e006      	b.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006fda:	4b16      	ldr	r3, [pc, #88]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	0e1b      	lsrs	r3, r3, #24
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	4a14      	ldr	r2, [pc, #80]	@ (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ff0:	e07e      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ff6:	e07b      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ffc:	e078      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007002:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007006:	430b      	orrs	r3, r1
 8007008:	d138      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800700c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007014:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007016:	4b07      	ldr	r3, [pc, #28]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b02      	cmp	r3, #2
 8007022:	d10d      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10a      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800702a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007030:	e05e      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007032:	bf00      	nop
 8007034:	46020c00 	.word	0x46020c00
 8007038:	00f42400 	.word	0x00f42400
 800703c:	080096d0 	.word	0x080096d0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007040:	4b2e      	ldr	r3, [pc, #184]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800704a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800704e:	d112      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007056:	d10e      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007058:	4b28      	ldr	r3, [pc, #160]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800705a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800705e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007066:	d102      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007068:	23fa      	movs	r3, #250	@ 0xfa
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800706c:	e040      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800706e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007074:	e03c      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	637b      	str	r3, [r7, #52]	@ 0x34
 800707a:	e039      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800707c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007080:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007084:	430b      	orrs	r3, r1
 8007086:	d131      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007088:	4b1c      	ldr	r3, [pc, #112]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800708a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800708e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007092:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007094:	4b19      	ldr	r3, [pc, #100]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800709c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070a0:	d105      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80070a8:	4b15      	ldr	r3, [pc, #84]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ac:	e020      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80070ae:	4b13      	ldr	r3, [pc, #76]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ba:	d106      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c2:	d102      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80070c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c8:	e012      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80070ca:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d6:	d106      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070de:	d102      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80070e0:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e4:	e004      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ea:	e001      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80070f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3738      	adds	r7, #56	@ 0x38
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	46020c00 	.word	0x46020c00
 8007100:	02dc6c00 	.word	0x02dc6c00
 8007104:	016e3600 	.word	0x016e3600
 8007108:	00f42400 	.word	0x00f42400

0800710c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007114:	4b47      	ldr	r3, [pc, #284]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a46      	ldr	r2, [pc, #280]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 800711a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800711e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007120:	f7fa fdb6 	bl	8001c90 <HAL_GetTick>
 8007124:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007126:	e008      	b.n	800713a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007128:	f7fa fdb2 	bl	8001c90 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e077      	b.n	800722a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800713a:	4b3e      	ldr	r3, [pc, #248]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007146:	4b3b      	ldr	r3, [pc, #236]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6811      	ldr	r1, [r2, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6852      	ldr	r2, [r2, #4]
 800715a:	3a01      	subs	r2, #1
 800715c:	0212      	lsls	r2, r2, #8
 800715e:	430a      	orrs	r2, r1
 8007160:	4934      	ldr	r1, [pc, #208]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 8007162:	4313      	orrs	r3, r2
 8007164:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007166:	4b33      	ldr	r3, [pc, #204]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 8007168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800716a:	4b33      	ldr	r3, [pc, #204]	@ (8007238 <RCCEx_PLL2_Config+0x12c>)
 800716c:	4013      	ands	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6892      	ldr	r2, [r2, #8]
 8007172:	3a01      	subs	r2, #1
 8007174:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68d2      	ldr	r2, [r2, #12]
 800717c:	3a01      	subs	r2, #1
 800717e:	0252      	lsls	r2, r2, #9
 8007180:	b292      	uxth	r2, r2
 8007182:	4311      	orrs	r1, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6912      	ldr	r2, [r2, #16]
 8007188:	3a01      	subs	r2, #1
 800718a:	0412      	lsls	r2, r2, #16
 800718c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007190:	4311      	orrs	r1, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6952      	ldr	r2, [r2, #20]
 8007196:	3a01      	subs	r2, #1
 8007198:	0612      	lsls	r2, r2, #24
 800719a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800719e:	430a      	orrs	r2, r1
 80071a0:	4924      	ldr	r1, [pc, #144]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80071a6:	4b23      	ldr	r3, [pc, #140]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071aa:	f023 020c 	bic.w	r2, r3, #12
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	4920      	ldr	r1, [pc, #128]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80071b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	491c      	ldr	r1, [pc, #112]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80071c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071cc:	f023 0310 	bic.w	r3, r3, #16
 80071d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071d2:	4b18      	ldr	r3, [pc, #96]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	69d2      	ldr	r2, [r2, #28]
 80071e2:	00d2      	lsls	r2, r2, #3
 80071e4:	4913      	ldr	r1, [pc, #76]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80071ea:	4b12      	ldr	r3, [pc, #72]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ee:	4a11      	ldr	r2, [pc, #68]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071f0:	f043 0310 	orr.w	r3, r3, #16
 80071f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80071f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 80071fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007200:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007202:	f7fa fd45 	bl	8001c90 <HAL_GetTick>
 8007206:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007208:	e008      	b.n	800721c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800720a:	f7fa fd41 	bl	8001c90 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d901      	bls.n	800721c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e006      	b.n	800722a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800721c:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <RCCEx_PLL2_Config+0x128>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0f0      	beq.n	800720a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007228:	2300      	movs	r3, #0

}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	46020c00 	.word	0x46020c00
 8007238:	80800000 	.word	0x80800000

0800723c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007244:	4b47      	ldr	r3, [pc, #284]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a46      	ldr	r2, [pc, #280]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 800724a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800724e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007250:	f7fa fd1e 	bl	8001c90 <HAL_GetTick>
 8007254:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007256:	e008      	b.n	800726a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007258:	f7fa fd1a 	bl	8001c90 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e077      	b.n	800735a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800726a:	4b3e      	ldr	r3, [pc, #248]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f0      	bne.n	8007258 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007276:	4b3b      	ldr	r3, [pc, #236]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 8007278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800727e:	f023 0303 	bic.w	r3, r3, #3
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6811      	ldr	r1, [r2, #0]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6852      	ldr	r2, [r2, #4]
 800728a:	3a01      	subs	r2, #1
 800728c:	0212      	lsls	r2, r2, #8
 800728e:	430a      	orrs	r2, r1
 8007290:	4934      	ldr	r1, [pc, #208]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 8007292:	4313      	orrs	r3, r2
 8007294:	630b      	str	r3, [r1, #48]	@ 0x30
 8007296:	4b33      	ldr	r3, [pc, #204]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 8007298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800729a:	4b33      	ldr	r3, [pc, #204]	@ (8007368 <RCCEx_PLL3_Config+0x12c>)
 800729c:	4013      	ands	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6892      	ldr	r2, [r2, #8]
 80072a2:	3a01      	subs	r2, #1
 80072a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68d2      	ldr	r2, [r2, #12]
 80072ac:	3a01      	subs	r2, #1
 80072ae:	0252      	lsls	r2, r2, #9
 80072b0:	b292      	uxth	r2, r2
 80072b2:	4311      	orrs	r1, r2
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6912      	ldr	r2, [r2, #16]
 80072b8:	3a01      	subs	r2, #1
 80072ba:	0412      	lsls	r2, r2, #16
 80072bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80072c0:	4311      	orrs	r1, r2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6952      	ldr	r2, [r2, #20]
 80072c6:	3a01      	subs	r2, #1
 80072c8:	0612      	lsls	r2, r2, #24
 80072ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80072ce:	430a      	orrs	r2, r1
 80072d0:	4924      	ldr	r1, [pc, #144]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80072d6:	4b23      	ldr	r3, [pc, #140]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072da:	f023 020c 	bic.w	r2, r3, #12
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	4920      	ldr	r1, [pc, #128]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80072e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 80072ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	491c      	ldr	r1, [pc, #112]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80072f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 80072fc:	f023 0310 	bic.w	r3, r3, #16
 8007300:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007302:	4b18      	ldr	r3, [pc, #96]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 8007304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800730a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	69d2      	ldr	r2, [r2, #28]
 8007312:	00d2      	lsls	r2, r2, #3
 8007314:	4913      	ldr	r1, [pc, #76]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 8007316:	4313      	orrs	r3, r2
 8007318:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800731a:	4b12      	ldr	r3, [pc, #72]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731e:	4a11      	ldr	r2, [pc, #68]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 8007320:	f043 0310 	orr.w	r3, r3, #16
 8007324:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007326:	4b0f      	ldr	r3, [pc, #60]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a0e      	ldr	r2, [pc, #56]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 800732c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007330:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007332:	f7fa fcad 	bl	8001c90 <HAL_GetTick>
 8007336:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007338:	e008      	b.n	800734c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800733a:	f7fa fca9 	bl	8001c90 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e006      	b.n	800735a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800734c:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <RCCEx_PLL3_Config+0x128>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f0      	beq.n	800733a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	46020c00 	.word	0x46020c00
 8007368:	80800000 	.word	0x80800000

0800736c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e0fb      	b.n	8007576 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a7f      	ldr	r2, [pc, #508]	@ (8007580 <HAL_SPI_Init+0x214>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d004      	beq.n	8007392 <HAL_SPI_Init+0x26>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a7d      	ldr	r2, [pc, #500]	@ (8007584 <HAL_SPI_Init+0x218>)
 800738e:	4293      	cmp	r3, r2
 8007390:	e000      	b.n	8007394 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007392:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a78      	ldr	r2, [pc, #480]	@ (8007580 <HAL_SPI_Init+0x214>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_SPI_Init+0x42>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a76      	ldr	r2, [pc, #472]	@ (8007584 <HAL_SPI_Init+0x218>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d105      	bne.n	80073ba <HAL_SPI_Init+0x4e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b0f      	cmp	r3, #15
 80073b4:	d901      	bls.n	80073ba <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e0dd      	b.n	8007576 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fff4 	bl	80083a8 <SPI_GetPacketSize>
 80073c0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a6e      	ldr	r2, [pc, #440]	@ (8007580 <HAL_SPI_Init+0x214>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_SPI_Init+0x6a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a6c      	ldr	r2, [pc, #432]	@ (8007584 <HAL_SPI_Init+0x218>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d102      	bne.n	80073dc <HAL_SPI_Init+0x70>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d816      	bhi.n	800740a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073e0:	4a69      	ldr	r2, [pc, #420]	@ (8007588 <HAL_SPI_Init+0x21c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00e      	beq.n	8007404 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a68      	ldr	r2, [pc, #416]	@ (800758c <HAL_SPI_Init+0x220>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d009      	beq.n	8007404 <HAL_SPI_Init+0x98>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a66      	ldr	r2, [pc, #408]	@ (8007590 <HAL_SPI_Init+0x224>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d004      	beq.n	8007404 <HAL_SPI_Init+0x98>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a65      	ldr	r2, [pc, #404]	@ (8007594 <HAL_SPI_Init+0x228>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d104      	bne.n	800740e <HAL_SPI_Init+0xa2>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b10      	cmp	r3, #16
 8007408:	d901      	bls.n	800740e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e0b3      	b.n	8007576 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fa f820 	bl	8001468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800744a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007454:	d119      	bne.n	800748a <HAL_SPI_Init+0x11e>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800745e:	d103      	bne.n	8007468 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10c      	bne.n	800748a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007478:	d107      	bne.n	800748a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007488:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00f      	beq.n	80074b6 <HAL_SPI_Init+0x14a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	2b06      	cmp	r3, #6
 800749c:	d90b      	bls.n	80074b6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	e007      	b.n	80074c6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69da      	ldr	r2, [r3, #28]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ce:	431a      	orrs	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d8:	ea42 0103 	orr.w	r1, r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007532:	ea42 0103 	orr.w	r1, r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	46002000 	.word	0x46002000
 8007584:	56002000 	.word	0x56002000
 8007588:	40013000 	.word	0x40013000
 800758c:	50013000 	.word	0x50013000
 8007590:	40003800 	.word	0x40003800
 8007594:	50003800 	.word	0x50003800

08007598 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af02      	add	r7, sp, #8
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	4613      	mov	r3, r2
 80075a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3320      	adds	r3, #32
 80075ae:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a90      	ldr	r2, [pc, #576]	@ (80077f8 <HAL_SPI_Transmit+0x260>)
 80075b6:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075b8:	f7fa fb6a 	bl	8001c90 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d001      	beq.n	80075ce <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80075ca:	2302      	movs	r3, #2
 80075cc:	e1f4      	b.n	80079b8 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_SPI_Transmit+0x42>
 80075d4:	88fb      	ldrh	r3, [r7, #6]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e1ec      	b.n	80079b8 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_SPI_Transmit+0x54>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e1e5      	b.n	80079b8 <HAL_SPI_Transmit+0x420>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2203      	movs	r2, #3
 80075f8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	88fa      	ldrh	r2, [r7, #6]
 800760e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	88fa      	ldrh	r2, [r7, #6]
 8007616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007644:	d108      	bne.n	8007658 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	e009      	b.n	800766c <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800766a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	041b      	lsls	r3, r3, #16
 8007676:	88f9      	ldrh	r1, [r7, #6]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	430b      	orrs	r3, r1
 800767e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10c      	bne.n	80076b8 <HAL_SPI_Transmit+0x120>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076a6:	d107      	bne.n	80076b8 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b0f      	cmp	r3, #15
 80076be:	d95b      	bls.n	8007778 <HAL_SPI_Transmit+0x1e0>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a4d      	ldr	r2, [pc, #308]	@ (80077fc <HAL_SPI_Transmit+0x264>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d04f      	beq.n	800776a <HAL_SPI_Transmit+0x1d2>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a4c      	ldr	r2, [pc, #304]	@ (8007800 <HAL_SPI_Transmit+0x268>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d04a      	beq.n	800776a <HAL_SPI_Transmit+0x1d2>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a4a      	ldr	r2, [pc, #296]	@ (8007804 <HAL_SPI_Transmit+0x26c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d045      	beq.n	800776a <HAL_SPI_Transmit+0x1d2>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a49      	ldr	r2, [pc, #292]	@ (8007808 <HAL_SPI_Transmit+0x270>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d147      	bne.n	8007778 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80076e8:	e03f      	b.n	800776a <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d114      	bne.n	8007722 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007708:	1d1a      	adds	r2, r3, #4
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007720:	e023      	b.n	800776a <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007722:	f7fa fab5 	bl	8001c90 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d803      	bhi.n	800773a <HAL_SPI_Transmit+0x1a2>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d102      	bne.n	8007740 <HAL_SPI_Transmit+0x1a8>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d114      	bne.n	800776a <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fd63 	bl	800820c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800774c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e126      	b.n	80079b8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1b9      	bne.n	80076ea <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007776:	e0f9      	b.n	800796c <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b07      	cmp	r3, #7
 800777e:	f240 80ee 	bls.w	800795e <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007782:	e067      	b.n	8007854 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b02      	cmp	r3, #2
 8007790:	d13c      	bne.n	800780c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	d918      	bls.n	80077d0 <HAL_SPI_Transmit+0x238>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d014      	beq.n	80077d0 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6812      	ldr	r2, [r2, #0]
 80077b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077b6:	1d1a      	adds	r2, r3, #4
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b02      	subs	r3, #2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077ce:	e041      	b.n	8007854 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077d4:	881a      	ldrh	r2, [r3, #0]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077de:	1c9a      	adds	r2, r3, #2
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077f6:	e02d      	b.n	8007854 <HAL_SPI_Transmit+0x2bc>
 80077f8:	46002000 	.word	0x46002000
 80077fc:	40013000 	.word	0x40013000
 8007800:	50013000 	.word	0x50013000
 8007804:	40003800 	.word	0x40003800
 8007808:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800780c:	f7fa fa40 	bl	8001c90 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d803      	bhi.n	8007824 <HAL_SPI_Transmit+0x28c>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d102      	bne.n	800782a <HAL_SPI_Transmit+0x292>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d114      	bne.n	8007854 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fcee 	bl	800820c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007836:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e0b1      	b.n	80079b8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d191      	bne.n	8007784 <HAL_SPI_Transmit+0x1ec>
 8007860:	e084      	b.n	800796c <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d152      	bne.n	8007916 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b03      	cmp	r3, #3
 800787a:	d918      	bls.n	80078ae <HAL_SPI_Transmit+0x316>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007880:	2b40      	cmp	r3, #64	@ 0x40
 8007882:	d914      	bls.n	80078ae <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007894:	1d1a      	adds	r2, r3, #4
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b04      	subs	r3, #4
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078ac:	e057      	b.n	800795e <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d917      	bls.n	80078ea <HAL_SPI_Transmit+0x352>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d013      	beq.n	80078ea <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078c6:	881a      	ldrh	r2, [r3, #0]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078d0:	1c9a      	adds	r2, r3, #2
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b02      	subs	r3, #2
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078e8:	e039      	b.n	800795e <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3320      	adds	r3, #32
 80078f4:	7812      	ldrb	r2, [r2, #0]
 80078f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007914:	e023      	b.n	800795e <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007916:	f7fa f9bb 	bl	8001c90 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d803      	bhi.n	800792e <HAL_SPI_Transmit+0x396>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d102      	bne.n	8007934 <HAL_SPI_Transmit+0x39c>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d114      	bne.n	800795e <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fc69 	bl	800820c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007940:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e02c      	b.n	80079b8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	f47f af7b 	bne.w	8007862 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	2108      	movs	r1, #8
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fce8 	bl	800834c <SPI_WaitOnFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d007      	beq.n	8007992 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007988:	f043 0220 	orr.w	r2, r3, #32
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 fc3a 	bl	800820c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 80079b6:	2300      	movs	r3, #0
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a96      	ldr	r2, [pc, #600]	@ (8007c2c <HAL_SPI_Transmit_DMA+0x26c>)
 80079d4:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d001      	beq.n	80079e6 <HAL_SPI_Transmit_DMA+0x26>
  {
    return HAL_BUSY;
 80079e2:	2302      	movs	r3, #2
 80079e4:	e1a3      	b.n	8007d2e <HAL_SPI_Transmit_DMA+0x36e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <HAL_SPI_Transmit_DMA+0x32>
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_SPI_Transmit_DMA+0x36>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e19b      	b.n	8007d2e <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_SPI_Transmit_DMA+0x44>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e194      	b.n	8007d2e <HAL_SPI_Transmit_DMA+0x36e>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	88fa      	ldrh	r2, [r7, #6]
 8007a26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	88fa      	ldrh	r2, [r7, #6]
 8007a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007a5c:	d108      	bne.n	8007a70 <HAL_SPI_Transmit_DMA+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e009      	b.n	8007a84 <HAL_SPI_Transmit_DMA+0xc4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007a82:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b0f      	cmp	r3, #15
 8007a8a:	d919      	bls.n	8007ac0 <HAL_SPI_Transmit_DMA+0x100>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d013      	beq.n	8007ac0 <HAL_SPI_Transmit_DMA+0x100>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8007a9c:	4a64      	ldr	r2, [pc, #400]	@ (8007c30 <HAL_SPI_Transmit_DMA+0x270>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d018      	beq.n	8007ad4 <HAL_SPI_Transmit_DMA+0x114>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a63      	ldr	r2, [pc, #396]	@ (8007c34 <HAL_SPI_Transmit_DMA+0x274>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <HAL_SPI_Transmit_DMA+0x114>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a61      	ldr	r2, [pc, #388]	@ (8007c38 <HAL_SPI_Transmit_DMA+0x278>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00e      	beq.n	8007ad4 <HAL_SPI_Transmit_DMA+0x114>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a60      	ldr	r2, [pc, #384]	@ (8007c3c <HAL_SPI_Transmit_DMA+0x27c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d009      	beq.n	8007ad4 <HAL_SPI_Transmit_DMA+0x114>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007ac4:	2b07      	cmp	r3, #7
 8007ac6:	d90b      	bls.n	8007ae0 <HAL_SPI_Transmit_DMA+0x120>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d105      	bne.n	8007ae0 <HAL_SPI_Transmit_DMA+0x120>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e126      	b.n	8007d2e <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	2b07      	cmp	r3, #7
 8007ae6:	d820      	bhi.n	8007b2a <HAL_SPI_Transmit_DMA+0x16a>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d109      	bne.n	8007b08 <HAL_SPI_Transmit_DMA+0x148>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3301      	adds	r3, #1
 8007afe:	105b      	asrs	r3, r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d11e      	bne.n	8007b52 <HAL_SPI_Transmit_DMA+0x192>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3303      	adds	r3, #3
 8007b1e:	109b      	asrs	r3, r3, #2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b28:	e013      	b.n	8007b52 <HAL_SPI_Transmit_DMA+0x192>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b0f      	cmp	r3, #15
 8007b30:	d80f      	bhi.n	8007b52 <HAL_SPI_Transmit_DMA+0x192>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d109      	bne.n	8007b52 <HAL_SPI_Transmit_DMA+0x192>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3301      	adds	r3, #1
 8007b48:	105b      	asrs	r3, r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b58:	4a39      	ldr	r2, [pc, #228]	@ (8007c40 <HAL_SPI_Transmit_DMA+0x280>)
 8007b5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b62:	4a38      	ldr	r2, [pc, #224]	@ (8007c44 <HAL_SPI_Transmit_DMA+0x284>)
 8007b64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b6c:	4a36      	ldr	r2, [pc, #216]	@ (8007c48 <HAL_SPI_Transmit_DMA+0x288>)
 8007b6e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b76:	2200      	movs	r2, #0
 8007b78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b88:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	2b07      	cmp	r3, #7
 8007b90:	d804      	bhi.n	8007b9c <HAL_SPI_Transmit_DMA+0x1dc>
  {
    hspi->TxXferCount = Size;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	88fa      	ldrh	r2, [r7, #6]
 8007b96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b9a:	e010      	b.n	8007bbe <HAL_SPI_Transmit_DMA+0x1fe>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	2b0f      	cmp	r3, #15
 8007ba2:	d806      	bhi.n	8007bb2 <HAL_SPI_Transmit_DMA+0x1f2>
  {
    hspi->TxXferCount = Size * 2U;
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bb0:	e005      	b.n	8007bbe <HAL_SPI_Transmit_DMA+0x1fe>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03e      	beq.n	8007c4c <HAL_SPI_Transmit_DMA+0x28c>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d024      	beq.n	8007c24 <HAL_SPI_Transmit_DMA+0x264>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f103 0220 	add.w	r2, r3, #32
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fa ffbb 	bl	8002b94 <HAL_DMAEx_List_Start_IT>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]
 8007c22:	e025      	b.n	8007c70 <HAL_SPI_Transmit_DMA+0x2b0>
    }
    else
    {
      status = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	75fb      	strb	r3, [r7, #23]
 8007c28:	e022      	b.n	8007c70 <HAL_SPI_Transmit_DMA+0x2b0>
 8007c2a:	bf00      	nop
 8007c2c:	46002000 	.word	0x46002000
 8007c30:	40013000 	.word	0x40013000
 8007c34:	50013000 	.word	0x50013000
 8007c38:	40003800 	.word	0x40003800
 8007c3c:	50003800 	.word	0x50003800
 8007c40:	08008177 	.word	0x08008177
 8007c44:	08008131 	.word	0x08008131
 8007c48:	08008193 	.word	0x08008193
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c56:	4619      	mov	r1, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3320      	adds	r3, #32
 8007c5e:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c66:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007c68:	f7fa fabc 	bl	80021e4 <HAL_DMA_Start_IT>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d011      	beq.n	8007c9a <HAL_SPI_Transmit_DMA+0x2da>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c7c:	f043 0210 	orr.w	r2, r3, #16
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e049      	b.n	8007d2e <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca2:	2b81      	cmp	r3, #129	@ 0x81
 8007ca4:	d108      	bne.n	8007cb8 <HAL_SPI_Transmit_DMA+0x2f8>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	6812      	ldr	r2, [r2, #0]
 8007cb0:	0c1b      	lsrs	r3, r3, #16
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	6053      	str	r3, [r2, #4]
 8007cb6:	e009      	b.n	8007ccc <HAL_SPI_Transmit_DMA+0x30c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	88f9      	ldrh	r1, [r7, #6]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cda:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8007cea:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10c      	bne.n	8007d24 <HAL_SPI_Transmit_DMA+0x364>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d12:	d107      	bne.n	8007d24 <HAL_SPI_Transmit_DMA+0x364>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d22:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop

08007d38 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	@ 0x28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007d50:	6a3a      	ldr	r2, [r7, #32]
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	4013      	ands	r3, r2
 8007d56:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d6a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3330      	adds	r3, #48	@ 0x30
 8007d72:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d010      	beq.n	8007da0 <HAL_SPI_IRQHandler+0x68>
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d96:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f9bf 	bl	800811c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007d9e:	e19a      	b.n	80080d6 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d113      	bne.n	8007dd2 <HAL_SPI_IRQHandler+0x9a>
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10e      	bne.n	8007dd2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	4798      	blx	r3
    handled = 1UL;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10f      	bne.n	8007dfc <HAL_SPI_IRQHandler+0xc4>
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
    handled = 1UL;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10f      	bne.n	8007e26 <HAL_SPI_IRQHandler+0xee>
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d105      	bne.n	8007e26 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
    handled = 1UL;
 8007e22:	2301      	movs	r3, #1
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f040 814f 	bne.w	80080cc <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f003 0308 	and.w	r3, r3, #8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 808b 	beq.w	8007f50 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0208 	orr.w	r2, r2, #8
 8007e48:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699a      	ldr	r2, [r3, #24]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0210 	orr.w	r2, r2, #16
 8007e58:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699a      	ldr	r2, [r3, #24]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e68:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0208 	bic.w	r2, r2, #8
 8007e78:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d13d      	bne.n	8007f04 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007e88:	e036      	b.n	8007ef8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	2b0f      	cmp	r3, #15
 8007e90:	d90b      	bls.n	8007eaa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e9c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ea2:	1d1a      	adds	r2, r3, #4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007ea8:	e01d      	b.n	8007ee6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	2b07      	cmp	r3, #7
 8007eb0:	d90b      	bls.n	8007eca <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	8812      	ldrh	r2, [r2, #0]
 8007eba:	b292      	uxth	r2, r2
 8007ebc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec2:	1c9a      	adds	r2, r3, #2
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007ec8:	e00d      	b.n	8007ee6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1c2      	bne.n	8007e8a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f981 	bl	800820c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7f9 f813 	bl	8000f48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f22:	e0d8      	b.n	80080d6 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007f24:	7cfb      	ldrb	r3, [r7, #19]
 8007f26:	2b05      	cmp	r3, #5
 8007f28:	d103      	bne.n	8007f32 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8e2 	bl	80080f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007f30:	e0ce      	b.n	80080d0 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007f32:	7cfb      	ldrb	r3, [r7, #19]
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d103      	bne.n	8007f40 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f8d1 	bl	80080e0 <HAL_SPI_RxCpltCallback>
    return;
 8007f3e:	e0c7      	b.n	80080d0 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007f40:	7cfb      	ldrb	r3, [r7, #19]
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	f040 80c4 	bne.w	80080d0 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7f8 ffe7 	bl	8000f1c <HAL_SPI_TxCpltCallback>
    return;
 8007f4e:	e0bf      	b.n	80080d0 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 80bd 	beq.w	80080d6 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00f      	beq.n	8007f86 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f6c:	f043 0204 	orr.w	r2, r3, #4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f84:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00f      	beq.n	8007fb0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f96:	f043 0201 	orr.w	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fae:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00f      	beq.n	8007fda <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fc0:	f043 0208 	orr.w	r2, r3, #8
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	699a      	ldr	r2, [r3, #24]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fd8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00f      	beq.n	8008004 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699a      	ldr	r2, [r3, #24]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0220 	orr.w	r2, r2, #32
 8008002:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d062      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	6812      	ldr	r2, [r2, #0]
 8008028:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008038:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800803c:	d13e      	bne.n	80080bc <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800804c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008054:	2b00      	cmp	r3, #0
 8008056:	d015      	beq.n	8008084 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800805e:	4a1f      	ldr	r2, [pc, #124]	@ (80080dc <HAL_SPI_IRQHandler+0x3a4>)
 8008060:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008068:	4618      	mov	r0, r3
 800806a:	f7fa f91b 	bl	80022a4 <HAL_DMA_Abort_IT>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d007      	beq.n	8008084 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800807a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800808a:	2b00      	cmp	r3, #0
 800808c:	d022      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008094:	4a11      	ldr	r2, [pc, #68]	@ (80080dc <HAL_SPI_IRQHandler+0x3a4>)
 8008096:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fa f900 	bl	80022a4 <HAL_DMA_Abort_IT>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d014      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80080ba:	e00b      	b.n	80080d4 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7f8 ff3f 	bl	8000f48 <HAL_SPI_ErrorCallback>
    return;
 80080ca:	e003      	b.n	80080d4 <HAL_SPI_IRQHandler+0x39c>
    return;
 80080cc:	bf00      	nop
 80080ce:	e002      	b.n	80080d6 <HAL_SPI_IRQHandler+0x39e>
    return;
 80080d0:	bf00      	nop
 80080d2:	e000      	b.n	80080d6 <HAL_SPI_IRQHandler+0x39e>
    return;
 80080d4:	bf00      	nop
  }
}
 80080d6:	3728      	adds	r7, #40	@ 0x28
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	080081d9 	.word	0x080081d9

080080e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800813c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b07      	cmp	r3, #7
 8008148:	d011      	beq.n	800816e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008152:	2b81      	cmp	r3, #129	@ 0x81
 8008154:	d103      	bne.n	800815e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7f8 fee0 	bl	8000f1c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800815c:	e007      	b.n	800816e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0208 	orr.w	r2, r2, #8
 800816c:	611a      	str	r2, [r3, #16]
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008182:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff ffbf 	bl	8008108 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800819e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7fa fa09 	bl	80025b8 <HAL_DMA_GetError>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d011      	beq.n	80081d0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 f82d 	bl	800820c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081b8:	f043 0210 	orr.w	r2, r3, #16
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7f8 febc 	bl	8000f48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7f8 fea2 	bl	8000f48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008204:	bf00      	nop
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0208 	orr.w	r2, r2, #8
 800822a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699a      	ldr	r2, [r3, #24]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0210 	orr.w	r2, r2, #16
 800823a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0201 	bic.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800826e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b04      	cmp	r3, #4
 800827a:	d014      	beq.n	80082a6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00f      	beq.n	80082a6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800828c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0220 	orr.w	r2, r2, #32
 80082a4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d014      	beq.n	80082dc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00f      	beq.n	80082dc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c2:	f043 0204 	orr.w	r2, r3, #4
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082da:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00f      	beq.n	8008306 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ec:	f043 0201 	orr.w	r2, r3, #1
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	699a      	ldr	r2, [r3, #24]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008304:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00f      	beq.n	8008330 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008316:	f043 0208 	orr.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	699a      	ldr	r2, [r3, #24]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800832e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008340:	bf00      	nop
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	4613      	mov	r3, r2
 800835a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800835c:	e010      	b.n	8008380 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800835e:	f7f9 fc97 	bl	8001c90 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d803      	bhi.n	8008376 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d102      	bne.n	800837c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e00f      	b.n	80083a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695a      	ldr	r2, [r3, #20]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	4013      	ands	r3, r2
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	429a      	cmp	r2, r3
 800838e:	bf0c      	ite	eq
 8008390:	2301      	moveq	r3, #1
 8008392:	2300      	movne	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	429a      	cmp	r2, r3
 800839c:	d0df      	beq.n	800835e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	3307      	adds	r3, #7
 80083c6:	08db      	lsrs	r3, r3, #3
 80083c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	fb02 f303 	mul.w	r3, r2, r3
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80083de:	b480      	push	{r7}
 80083e0:	b083      	sub	sp, #12
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d12e      	bne.n	8008452 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80083fe:	2302      	movs	r3, #2
 8008400:	e028      	b.n	8008454 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800842e:	ea42 0103 	orr.w	r1, r2, r3
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	689a      	ldr	r2, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	e000      	b.n	8008454 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
  }
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e049      	b.n	8008506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d106      	bne.n	800848c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f841 	bl	800850e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3304      	adds	r3, #4
 800849c:	4619      	mov	r1, r3
 800849e:	4610      	mov	r0, r2
 80084a0:	f000 fa58 	bl	8008954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b01      	cmp	r3, #1
 8008536:	d001      	beq.n	800853c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e072      	b.n	8008622 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0201 	orr.w	r2, r2, #1
 8008552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a35      	ldr	r2, [pc, #212]	@ (8008630 <HAL_TIM_Base_Start_IT+0x10c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d040      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a34      	ldr	r2, [pc, #208]	@ (8008634 <HAL_TIM_Base_Start_IT+0x110>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d03b      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008570:	d036      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800857a:	d031      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a2d      	ldr	r2, [pc, #180]	@ (8008638 <HAL_TIM_Base_Start_IT+0x114>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d02c      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a2c      	ldr	r2, [pc, #176]	@ (800863c <HAL_TIM_Base_Start_IT+0x118>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d027      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a2a      	ldr	r2, [pc, #168]	@ (8008640 <HAL_TIM_Base_Start_IT+0x11c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d022      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a29      	ldr	r2, [pc, #164]	@ (8008644 <HAL_TIM_Base_Start_IT+0x120>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d01d      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a27      	ldr	r2, [pc, #156]	@ (8008648 <HAL_TIM_Base_Start_IT+0x124>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d018      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a26      	ldr	r2, [pc, #152]	@ (800864c <HAL_TIM_Base_Start_IT+0x128>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d013      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a24      	ldr	r2, [pc, #144]	@ (8008650 <HAL_TIM_Base_Start_IT+0x12c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d00e      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a23      	ldr	r2, [pc, #140]	@ (8008654 <HAL_TIM_Base_Start_IT+0x130>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d009      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a21      	ldr	r2, [pc, #132]	@ (8008658 <HAL_TIM_Base_Start_IT+0x134>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d004      	beq.n	80085e0 <HAL_TIM_Base_Start_IT+0xbc>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a20      	ldr	r2, [pc, #128]	@ (800865c <HAL_TIM_Base_Start_IT+0x138>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d115      	bne.n	800860c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008660 <HAL_TIM_Base_Start_IT+0x13c>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b06      	cmp	r3, #6
 80085f0:	d015      	beq.n	800861e <HAL_TIM_Base_Start_IT+0xfa>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f8:	d011      	beq.n	800861e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f042 0201 	orr.w	r2, r2, #1
 8008608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800860a:	e008      	b.n	800861e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0201 	orr.w	r2, r2, #1
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	e000      	b.n	8008620 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	40012c00 	.word	0x40012c00
 8008634:	50012c00 	.word	0x50012c00
 8008638:	40000400 	.word	0x40000400
 800863c:	50000400 	.word	0x50000400
 8008640:	40000800 	.word	0x40000800
 8008644:	50000800 	.word	0x50000800
 8008648:	40000c00 	.word	0x40000c00
 800864c:	50000c00 	.word	0x50000c00
 8008650:	40013400 	.word	0x40013400
 8008654:	50013400 	.word	0x50013400
 8008658:	40014000 	.word	0x40014000
 800865c:	50014000 	.word	0x50014000
 8008660:	00010007 	.word	0x00010007

08008664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d020      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01b      	beq.n	80086c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f06f 0202 	mvn.w	r2, #2
 8008698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f931 	bl	8008916 <HAL_TIM_IC_CaptureCallback>
 80086b4:	e005      	b.n	80086c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f923 	bl	8008902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f934 	bl	800892a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d020      	beq.n	8008714 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01b      	beq.n	8008714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0204 	mvn.w	r2, #4
 80086e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2202      	movs	r2, #2
 80086ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f90b 	bl	8008916 <HAL_TIM_IC_CaptureCallback>
 8008700:	e005      	b.n	800870e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f8fd 	bl	8008902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f90e 	bl	800892a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d020      	beq.n	8008760 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01b      	beq.n	8008760 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0208 	mvn.w	r2, #8
 8008730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2204      	movs	r2, #4
 8008736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8e5 	bl	8008916 <HAL_TIM_IC_CaptureCallback>
 800874c:	e005      	b.n	800875a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f8d7 	bl	8008902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f8e8 	bl	800892a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 0310 	and.w	r3, r3, #16
 8008766:	2b00      	cmp	r3, #0
 8008768:	d020      	beq.n	80087ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f003 0310 	and.w	r3, r3, #16
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01b      	beq.n	80087ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0210 	mvn.w	r2, #16
 800877c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2208      	movs	r2, #8
 8008782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f8bf 	bl	8008916 <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f8b1 	bl	8008902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f8c2 	bl	800892a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00c      	beq.n	80087d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f06f 0201 	mvn.w	r2, #1
 80087c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7f8 fe18 	bl	8001400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00c      	beq.n	80087fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f9b5 	bl	8008b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f9ad 	bl	8008b7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00c      	beq.n	8008846 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008832:	2b00      	cmp	r3, #0
 8008834:	d007      	beq.n	8008846 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f87c 	bl	800893e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00c      	beq.n	800886a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f06f 0220 	mvn.w	r2, #32
 8008862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f975 	bl	8008b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00c      	beq.n	800888e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f981 	bl	8008b90 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00c      	beq.n	80088b2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80088aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f979 	bl	8008ba4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00c      	beq.n	80088d6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80088ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f971 	bl	8008bb8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00c      	beq.n	80088fa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d007      	beq.n	80088fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80088f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f969 	bl	8008bcc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800891e:	bf00      	nop
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a6b      	ldr	r2, [pc, #428]	@ (8008b14 <TIM_Base_SetConfig+0x1c0>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d02b      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a6a      	ldr	r2, [pc, #424]	@ (8008b18 <TIM_Base_SetConfig+0x1c4>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d027      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800897a:	d023      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008982:	d01f      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a65      	ldr	r2, [pc, #404]	@ (8008b1c <TIM_Base_SetConfig+0x1c8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d01b      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a64      	ldr	r2, [pc, #400]	@ (8008b20 <TIM_Base_SetConfig+0x1cc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d017      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a63      	ldr	r2, [pc, #396]	@ (8008b24 <TIM_Base_SetConfig+0x1d0>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d013      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a62      	ldr	r2, [pc, #392]	@ (8008b28 <TIM_Base_SetConfig+0x1d4>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00f      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a61      	ldr	r2, [pc, #388]	@ (8008b2c <TIM_Base_SetConfig+0x1d8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00b      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a60      	ldr	r2, [pc, #384]	@ (8008b30 <TIM_Base_SetConfig+0x1dc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d007      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a5f      	ldr	r2, [pc, #380]	@ (8008b34 <TIM_Base_SetConfig+0x1e0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d003      	beq.n	80089c4 <TIM_Base_SetConfig+0x70>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a5e      	ldr	r2, [pc, #376]	@ (8008b38 <TIM_Base_SetConfig+0x1e4>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d108      	bne.n	80089d6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a4e      	ldr	r2, [pc, #312]	@ (8008b14 <TIM_Base_SetConfig+0x1c0>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d043      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a4d      	ldr	r2, [pc, #308]	@ (8008b18 <TIM_Base_SetConfig+0x1c4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d03f      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ec:	d03b      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089f4:	d037      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a48      	ldr	r2, [pc, #288]	@ (8008b1c <TIM_Base_SetConfig+0x1c8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d033      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a47      	ldr	r2, [pc, #284]	@ (8008b20 <TIM_Base_SetConfig+0x1cc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d02f      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a46      	ldr	r2, [pc, #280]	@ (8008b24 <TIM_Base_SetConfig+0x1d0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d02b      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a45      	ldr	r2, [pc, #276]	@ (8008b28 <TIM_Base_SetConfig+0x1d4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d027      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a44      	ldr	r2, [pc, #272]	@ (8008b2c <TIM_Base_SetConfig+0x1d8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d023      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a43      	ldr	r2, [pc, #268]	@ (8008b30 <TIM_Base_SetConfig+0x1dc>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d01f      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a42      	ldr	r2, [pc, #264]	@ (8008b34 <TIM_Base_SetConfig+0x1e0>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d01b      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a41      	ldr	r2, [pc, #260]	@ (8008b38 <TIM_Base_SetConfig+0x1e4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d017      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a40      	ldr	r2, [pc, #256]	@ (8008b3c <TIM_Base_SetConfig+0x1e8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d013      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a3f      	ldr	r2, [pc, #252]	@ (8008b40 <TIM_Base_SetConfig+0x1ec>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00f      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a3e      	ldr	r2, [pc, #248]	@ (8008b44 <TIM_Base_SetConfig+0x1f0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00b      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a3d      	ldr	r2, [pc, #244]	@ (8008b48 <TIM_Base_SetConfig+0x1f4>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d007      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a3c      	ldr	r2, [pc, #240]	@ (8008b4c <TIM_Base_SetConfig+0x1f8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d003      	beq.n	8008a66 <TIM_Base_SetConfig+0x112>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a3b      	ldr	r2, [pc, #236]	@ (8008b50 <TIM_Base_SetConfig+0x1fc>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d108      	bne.n	8008a78 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a1e      	ldr	r2, [pc, #120]	@ (8008b14 <TIM_Base_SetConfig+0x1c0>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d023      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b18 <TIM_Base_SetConfig+0x1c4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d01f      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a22      	ldr	r2, [pc, #136]	@ (8008b34 <TIM_Base_SetConfig+0x1e0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d01b      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a21      	ldr	r2, [pc, #132]	@ (8008b38 <TIM_Base_SetConfig+0x1e4>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d017      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a20      	ldr	r2, [pc, #128]	@ (8008b3c <TIM_Base_SetConfig+0x1e8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d013      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b40 <TIM_Base_SetConfig+0x1ec>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00f      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8008b44 <TIM_Base_SetConfig+0x1f0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d00b      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b48 <TIM_Base_SetConfig+0x1f4>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d007      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8008b4c <TIM_Base_SetConfig+0x1f8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d003      	beq.n	8008ae6 <TIM_Base_SetConfig+0x192>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b50 <TIM_Base_SetConfig+0x1fc>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d103      	bne.n	8008aee <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f043 0204 	orr.w	r2, r3, #4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	601a      	str	r2, [r3, #0]
}
 8008b06:	bf00      	nop
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40012c00 	.word	0x40012c00
 8008b18:	50012c00 	.word	0x50012c00
 8008b1c:	40000400 	.word	0x40000400
 8008b20:	50000400 	.word	0x50000400
 8008b24:	40000800 	.word	0x40000800
 8008b28:	50000800 	.word	0x50000800
 8008b2c:	40000c00 	.word	0x40000c00
 8008b30:	50000c00 	.word	0x50000c00
 8008b34:	40013400 	.word	0x40013400
 8008b38:	50013400 	.word	0x50013400
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	50014000 	.word	0x50014000
 8008b44:	40014400 	.word	0x40014400
 8008b48:	50014400 	.word	0x50014400
 8008b4c:	40014800 	.word	0x40014800
 8008b50:	50014800 	.word	0x50014800

08008b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e042      	b.n	8008c78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d106      	bne.n	8008c0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f83b 	bl	8008c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2224      	movs	r2, #36	@ 0x24
 8008c0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0201 	bic.w	r2, r2, #1
 8008c20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f9d4 	bl	8008fd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f82f 	bl	8008c94 <UART_SetConfig>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e01b      	b.n	8008c78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0201 	orr.w	r2, r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fa53 	bl	800911c <UART_CheckIdleState>
 8008c76:	4603      	mov	r3, r0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c98:	b094      	sub	sp, #80	@ 0x50
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8008ea4 <UART_SetConfig+0x210>)
 8008caa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4977      	ldr	r1, [pc, #476]	@ (8008ea8 <UART_SetConfig+0x214>)
 8008ccc:	4019      	ands	r1, r3
 8008cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce4:	68d9      	ldr	r1, [r3, #12]
 8008ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	ea40 0301 	orr.w	r3, r0, r1
 8008cee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8008ea4 <UART_SetConfig+0x210>)
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d009      	beq.n	8008d14 <UART_SetConfig+0x80>
 8008d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	4b69      	ldr	r3, [pc, #420]	@ (8008eac <UART_SetConfig+0x218>)
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d004      	beq.n	8008d14 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	6a1a      	ldr	r2, [r3, #32]
 8008d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d10:	4313      	orrs	r3, r2
 8008d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008d1e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d32:	f023 000f 	bic.w	r0, r3, #15
 8008d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	ea40 0301 	orr.w	r3, r0, r1
 8008d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	4b59      	ldr	r3, [pc, #356]	@ (8008eb0 <UART_SetConfig+0x21c>)
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d102      	bne.n	8008d54 <UART_SetConfig+0xc0>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d52:	e029      	b.n	8008da8 <UART_SetConfig+0x114>
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	4b56      	ldr	r3, [pc, #344]	@ (8008eb4 <UART_SetConfig+0x220>)
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d102      	bne.n	8008d64 <UART_SetConfig+0xd0>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d62:	e021      	b.n	8008da8 <UART_SetConfig+0x114>
 8008d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	4b53      	ldr	r3, [pc, #332]	@ (8008eb8 <UART_SetConfig+0x224>)
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d102      	bne.n	8008d74 <UART_SetConfig+0xe0>
 8008d6e:	2304      	movs	r3, #4
 8008d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d72:	e019      	b.n	8008da8 <UART_SetConfig+0x114>
 8008d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	4b50      	ldr	r3, [pc, #320]	@ (8008ebc <UART_SetConfig+0x228>)
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d102      	bne.n	8008d84 <UART_SetConfig+0xf0>
 8008d7e:	2308      	movs	r3, #8
 8008d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d82:	e011      	b.n	8008da8 <UART_SetConfig+0x114>
 8008d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	4b4d      	ldr	r3, [pc, #308]	@ (8008ec0 <UART_SetConfig+0x22c>)
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d102      	bne.n	8008d94 <UART_SetConfig+0x100>
 8008d8e:	2310      	movs	r3, #16
 8008d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d92:	e009      	b.n	8008da8 <UART_SetConfig+0x114>
 8008d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	4b42      	ldr	r3, [pc, #264]	@ (8008ea4 <UART_SetConfig+0x210>)
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d102      	bne.n	8008da4 <UART_SetConfig+0x110>
 8008d9e:	2320      	movs	r3, #32
 8008da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008da2:	e001      	b.n	8008da8 <UART_SetConfig+0x114>
 8008da4:	2300      	movs	r3, #0
 8008da6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	4b3d      	ldr	r3, [pc, #244]	@ (8008ea4 <UART_SetConfig+0x210>)
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d005      	beq.n	8008dbe <UART_SetConfig+0x12a>
 8008db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b3d      	ldr	r3, [pc, #244]	@ (8008eac <UART_SetConfig+0x218>)
 8008db8:	429a      	cmp	r2, r3
 8008dba:	f040 8085 	bne.w	8008ec8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	623b      	str	r3, [r7, #32]
 8008dc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008dca:	f7fc ffe9 	bl	8005da0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 80e8 	beq.w	8008fa8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ddc:	4a39      	ldr	r2, [pc, #228]	@ (8008ec4 <UART_SetConfig+0x230>)
 8008dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	4413      	add	r3, r2
 8008df6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d305      	bcc.n	8008e08 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d903      	bls.n	8008e10 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008e0e:	e048      	b.n	8008ea2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e12:	2200      	movs	r2, #0
 8008e14:	61bb      	str	r3, [r7, #24]
 8008e16:	61fa      	str	r2, [r7, #28]
 8008e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1c:	4a29      	ldr	r2, [pc, #164]	@ (8008ec4 <UART_SetConfig+0x230>)
 8008e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	2200      	movs	r2, #0
 8008e26:	613b      	str	r3, [r7, #16]
 8008e28:	617a      	str	r2, [r7, #20]
 8008e2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e32:	f7f7 fa21 	bl	8000278 <__aeabi_uldivmod>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f04f 0200 	mov.w	r2, #0
 8008e42:	f04f 0300 	mov.w	r3, #0
 8008e46:	020b      	lsls	r3, r1, #8
 8008e48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e4c:	0202      	lsls	r2, r0, #8
 8008e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e50:	6849      	ldr	r1, [r1, #4]
 8008e52:	0849      	lsrs	r1, r1, #1
 8008e54:	2000      	movs	r0, #0
 8008e56:	460c      	mov	r4, r1
 8008e58:	4605      	mov	r5, r0
 8008e5a:	eb12 0804 	adds.w	r8, r2, r4
 8008e5e:	eb43 0905 	adc.w	r9, r3, r5
 8008e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	60bb      	str	r3, [r7, #8]
 8008e6a:	60fa      	str	r2, [r7, #12]
 8008e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e70:	4640      	mov	r0, r8
 8008e72:	4649      	mov	r1, r9
 8008e74:	f7f7 fa00 	bl	8000278 <__aeabi_uldivmod>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e86:	d308      	bcc.n	8008e9a <UART_SetConfig+0x206>
 8008e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e8e:	d204      	bcs.n	8008e9a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e96:	60da      	str	r2, [r3, #12]
 8008e98:	e003      	b.n	8008ea2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008ea0:	e082      	b.n	8008fa8 <UART_SetConfig+0x314>
 8008ea2:	e081      	b.n	8008fa8 <UART_SetConfig+0x314>
 8008ea4:	46002400 	.word	0x46002400
 8008ea8:	cfff69f3 	.word	0xcfff69f3
 8008eac:	56002400 	.word	0x56002400
 8008eb0:	40013800 	.word	0x40013800
 8008eb4:	40004400 	.word	0x40004400
 8008eb8:	40004800 	.word	0x40004800
 8008ebc:	40004c00 	.word	0x40004c00
 8008ec0:	40005000 	.word	0x40005000
 8008ec4:	0800979c 	.word	0x0800979c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ed0:	d13c      	bne.n	8008f4c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ede:	f7fc ff5f 	bl	8005da0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ee2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d05e      	beq.n	8008fa8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eee:	4a39      	ldr	r2, [pc, #228]	@ (8008fd4 <UART_SetConfig+0x340>)
 8008ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008efc:	005a      	lsls	r2, r3, #1
 8008efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	085b      	lsrs	r3, r3, #1
 8008f04:	441a      	add	r2, r3
 8008f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f12:	2b0f      	cmp	r3, #15
 8008f14:	d916      	bls.n	8008f44 <UART_SetConfig+0x2b0>
 8008f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f1c:	d212      	bcs.n	8008f44 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f023 030f 	bic.w	r3, r3, #15
 8008f26:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	f003 0307 	and.w	r3, r3, #7
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008f36:	4313      	orrs	r3, r2
 8008f38:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008f40:	60da      	str	r2, [r3, #12]
 8008f42:	e031      	b.n	8008fa8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f4a:	e02d      	b.n	8008fa8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f4e:	2200      	movs	r2, #0
 8008f50:	469a      	mov	sl, r3
 8008f52:	4693      	mov	fp, r2
 8008f54:	4650      	mov	r0, sl
 8008f56:	4659      	mov	r1, fp
 8008f58:	f7fc ff22 	bl	8005da0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f5c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d021      	beq.n	8008fa8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f68:	4a1a      	ldr	r2, [pc, #104]	@ (8008fd4 <UART_SetConfig+0x340>)
 8008f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	085b      	lsrs	r3, r3, #1
 8008f7c:	441a      	add	r2, r3
 8008f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f8a:	2b0f      	cmp	r3, #15
 8008f8c:	d909      	bls.n	8008fa2 <UART_SetConfig+0x30e>
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f94:	d205      	bcs.n	8008fa2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60da      	str	r2, [r3, #12]
 8008fa0:	e002      	b.n	8008fa8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008faa:	2201      	movs	r2, #1
 8008fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fba:	2200      	movs	r2, #0
 8008fbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008fc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3750      	adds	r7, #80	@ 0x50
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fd2:	bf00      	nop
 8008fd4:	0800979c 	.word	0x0800979c

08008fd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe4:	f003 0308 	and.w	r3, r3, #8
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009028:	f003 0302 	and.w	r3, r3, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	430a      	orrs	r2, r1
 8009044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01a      	beq.n	80090ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090d6:	d10a      	bne.n	80090ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	605a      	str	r2, [r3, #4]
  }
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b098      	sub	sp, #96	@ 0x60
 8009120:	af02      	add	r7, sp, #8
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800912c:	f7f8 fdb0 	bl	8001c90 <HAL_GetTick>
 8009130:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b08      	cmp	r3, #8
 800913e:	d12f      	bne.n	80091a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009140:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009148:	2200      	movs	r2, #0
 800914a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f88e 	bl	8009270 <UART_WaitOnFlagUntilTimeout>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d022      	beq.n	80091a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800916e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
 8009176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009178:	647b      	str	r3, [r7, #68]	@ 0x44
 800917a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800917e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e6      	bne.n	800915a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2220      	movs	r2, #32
 8009190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e063      	b.n	8009268 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d149      	bne.n	8009242 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091b6:	2200      	movs	r2, #0
 80091b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f857 	bl	8009270 <UART_WaitOnFlagUntilTimeout>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d03c      	beq.n	8009242 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	623b      	str	r3, [r7, #32]
   return(result);
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80091e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e6      	bne.n	80091c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3308      	adds	r3, #8
 8009200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	60fb      	str	r3, [r7, #12]
   return(result);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f023 0301 	bic.w	r3, r3, #1
 8009210:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800921a:	61fa      	str	r2, [r7, #28]
 800921c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	69b9      	ldr	r1, [r7, #24]
 8009220:	69fa      	ldr	r2, [r7, #28]
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	617b      	str	r3, [r7, #20]
   return(result);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e5      	bne.n	80091fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2220      	movs	r2, #32
 8009232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e012      	b.n	8009268 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3758      	adds	r7, #88	@ 0x58
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	4613      	mov	r3, r2
 800927e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009280:	e04f      	b.n	8009322 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009288:	d04b      	beq.n	8009322 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800928a:	f7f8 fd01 	bl	8001c90 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	429a      	cmp	r2, r3
 8009298:	d302      	bcc.n	80092a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e04e      	b.n	8009342 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d037      	beq.n	8009322 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b80      	cmp	r3, #128	@ 0x80
 80092b6:	d034      	beq.n	8009322 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2b40      	cmp	r3, #64	@ 0x40
 80092bc:	d031      	beq.n	8009322 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	f003 0308 	and.w	r3, r3, #8
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d110      	bne.n	80092ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2208      	movs	r2, #8
 80092d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 f838 	bl	800934a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2208      	movs	r2, #8
 80092de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e029      	b.n	8009342 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092fc:	d111      	bne.n	8009322 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f81e 	bl	800934a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2220      	movs	r2, #32
 8009312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e00f      	b.n	8009342 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69da      	ldr	r2, [r3, #28]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4013      	ands	r3, r2
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	bf0c      	ite	eq
 8009332:	2301      	moveq	r3, #1
 8009334:	2300      	movne	r3, #0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	429a      	cmp	r2, r3
 800933e:	d0a0      	beq.n	8009282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800934a:	b480      	push	{r7}
 800934c:	b095      	sub	sp, #84	@ 0x54
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009370:	643b      	str	r3, [r7, #64]	@ 0x40
 8009372:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800937e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e6      	bne.n	8009352 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3308      	adds	r3, #8
 800938a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	61fb      	str	r3, [r7, #28]
   return(result);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800939a:	f023 0301 	bic.w	r3, r3, #1
 800939e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3308      	adds	r3, #8
 80093a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e3      	bne.n	8009384 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d118      	bne.n	80093f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f023 0310 	bic.w	r3, r3, #16
 80093d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093e2:	61bb      	str	r3, [r7, #24]
 80093e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6979      	ldr	r1, [r7, #20]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	613b      	str	r3, [r7, #16]
   return(result);
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e6      	bne.n	80093c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800940a:	bf00      	nop
 800940c:	3754      	adds	r7, #84	@ 0x54
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <memset>:
 8009416:	4402      	add	r2, r0
 8009418:	4603      	mov	r3, r0
 800941a:	4293      	cmp	r3, r2
 800941c:	d100      	bne.n	8009420 <memset+0xa>
 800941e:	4770      	bx	lr
 8009420:	f803 1b01 	strb.w	r1, [r3], #1
 8009424:	e7f9      	b.n	800941a <memset+0x4>
	...

08009428 <__libc_init_array>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	4d0d      	ldr	r5, [pc, #52]	@ (8009460 <__libc_init_array+0x38>)
 800942c:	2600      	movs	r6, #0
 800942e:	4c0d      	ldr	r4, [pc, #52]	@ (8009464 <__libc_init_array+0x3c>)
 8009430:	1b64      	subs	r4, r4, r5
 8009432:	10a4      	asrs	r4, r4, #2
 8009434:	42a6      	cmp	r6, r4
 8009436:	d109      	bne.n	800944c <__libc_init_array+0x24>
 8009438:	4d0b      	ldr	r5, [pc, #44]	@ (8009468 <__libc_init_array+0x40>)
 800943a:	2600      	movs	r6, #0
 800943c:	4c0b      	ldr	r4, [pc, #44]	@ (800946c <__libc_init_array+0x44>)
 800943e:	f000 f817 	bl	8009470 <_init>
 8009442:	1b64      	subs	r4, r4, r5
 8009444:	10a4      	asrs	r4, r4, #2
 8009446:	42a6      	cmp	r6, r4
 8009448:	d105      	bne.n	8009456 <__libc_init_array+0x2e>
 800944a:	bd70      	pop	{r4, r5, r6, pc}
 800944c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009450:	3601      	adds	r6, #1
 8009452:	4798      	blx	r3
 8009454:	e7ee      	b.n	8009434 <__libc_init_array+0xc>
 8009456:	f855 3b04 	ldr.w	r3, [r5], #4
 800945a:	3601      	adds	r6, #1
 800945c:	4798      	blx	r3
 800945e:	e7f2      	b.n	8009446 <__libc_init_array+0x1e>
 8009460:	080097bc 	.word	0x080097bc
 8009464:	080097bc 	.word	0x080097bc
 8009468:	080097bc 	.word	0x080097bc
 800946c:	080097c0 	.word	0x080097c0

08009470 <_init>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	bf00      	nop
 8009474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009476:	bc08      	pop	{r3}
 8009478:	469e      	mov	lr, r3
 800947a:	4770      	bx	lr

0800947c <_fini>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	bf00      	nop
 8009480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009482:	bc08      	pop	{r3}
 8009484:	469e      	mov	lr, r3
 8009486:	4770      	bx	lr
