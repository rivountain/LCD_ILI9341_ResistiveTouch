
LCD_ILI9341_ResistiveTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009248  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08009480  08009480  0000a480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097ac  080097ac  0000a7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097b4  080097b4  0000a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080097b8  080097b8  0000a7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000031  20000000  080097bc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000224  20000034  080097ed  0000b034  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000258  080097ed  0000b258  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b031  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d00c  00000000  00000000  0000b067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003607  00000000  00000000  00028073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017d0  00000000  00000000  0002b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003423b  00000000  00000000  0002ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001ec3b  00000000  00000000  0006108b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014af7b  00000000  00000000  0007fcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001cac41  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00001298  00000000  00000000  001cac84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000065a4  00000000  00000000  001cbf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001d24c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000034 	.word	0x20000034
 8000254:	00000000 	.word	0x00000000
 8000258:	08009468 	.word	0x08009468

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000038 	.word	0x20000038
 8000274:	08009468 	.word	0x08009468

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <ILI9341_SPI_Tx>:
static volatile uint8_t spi_dma_tx_completed = 1;

// --- 底层硬件操作函数 ---

// SPI发送单个字节
static void ILI9341_SPI_Tx(uint8_t data) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(ILI9341_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2201      	movs	r2, #1
 8000606:	4803      	ldr	r0, [pc, #12]	@ (8000614 <ILI9341_SPI_Tx+0x20>)
 8000608:	f006 ffc2 	bl	8007590 <HAL_SPI_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000060 	.word	0x20000060

08000618 <ILI9341_SPI_Wait_DMA_Completed>:

//// SPI发送多个字节
//static void ILI9341_SPI_TxBuffer(uint8_t* buffer, uint16_t len) {
//    HAL_SPI_Transmit(ILI9341_SPI_HANDLE, buffer, len, HAL_MAX_DELAY);
//}
static void ILI9341_SPI_Wait_DMA_Completed(void) {
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
    while (!spi_dma_tx_completed);
 800061c:	bf00      	nop
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <ILI9341_SPI_Wait_DMA_Completed+0x1c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0fa      	beq.n	800061e <ILI9341_SPI_Wait_DMA_Completed+0x6>
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000008 	.word	0x20000008

08000638 <ILI9341_WriteCommand>:
//	// 启动DMA传输
//    HAL_SPI_Transmit_DMA(ILI9341_SPI_HANDLE, buffer, len);
//}

// 发送命令
static void ILI9341_WriteCommand(uint8_t cmd) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	ILI9341_SPI_Wait_DMA_Completed();
 8000642:	f7ff ffe9 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET); // DC拉低，表示命令
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800064e:	f002 fdc9 	bl	80031e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET); // CS拉低，选中芯片
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800065a:	f002 fdc3 	bl	80031e4 <HAL_GPIO_WritePin>
    ILI9341_SPI_Tx(cmd);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffc7 	bl	80005f4 <ILI9341_SPI_Tx>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);   // CS拉高，取消选中
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <ILI9341_WriteCommand+0x44>)
 800066e:	f002 fdb9 	bl	80031e4 <HAL_GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	42020c00 	.word	0x42020c00

08000680 <ILI9341_WriteData>:

// 发送数据
static void ILI9341_WriteData(uint8_t data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	ILI9341_SPI_Wait_DMA_Completed();
 800068a:	f7ff ffc5 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);   // DC拉高，表示数据
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000694:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <ILI9341_WriteData+0x44>)
 8000696:	f002 fda5 	bl	80031e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET); // CS拉低，选中芯片
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a0:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <ILI9341_WriteData+0x44>)
 80006a2:	f002 fd9f 	bl	80031e4 <HAL_GPIO_WritePin>
    ILI9341_SPI_Tx(data);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa3 	bl	80005f4 <ILI9341_SPI_Tx>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);   // CS拉高，取消选中
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <ILI9341_WriteData+0x44>)
 80006b6:	f002 fd95 	bl	80031e4 <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	42020c00 	.word	0x42020c00

080006c8 <ILI9341_Reset>:

// 硬件复位
static void ILI9341_Reset(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d2:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <ILI9341_Reset+0x2c>)
 80006d4:	f002 fd86 	bl	80031e4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80006d8:	2014      	movs	r0, #20
 80006da:	f001 fae1 	bl	8001ca0 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <ILI9341_Reset+0x2c>)
 80006e6:	f002 fd7d 	bl	80031e4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80006ea:	2064      	movs	r0, #100	@ 0x64
 80006ec:	f001 fad8 	bl	8001ca0 <HAL_Delay>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	42021400 	.word	0x42021400

080006f8 <ILI9341_SetAddressWindow>:

// 设置绘图窗口
void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4604      	mov	r4, r0
 8000700:	4608      	mov	r0, r1
 8000702:	4611      	mov	r1, r2
 8000704:	461a      	mov	r2, r3
 8000706:	4623      	mov	r3, r4
 8000708:	80fb      	strh	r3, [r7, #6]
 800070a:	4603      	mov	r3, r0
 800070c:	80bb      	strh	r3, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	807b      	strh	r3, [r7, #2]
 8000712:	4613      	mov	r3, r2
 8000714:	803b      	strh	r3, [r7, #0]
    // Column Address Set
    ILI9341_WriteCommand(0x2A);
 8000716:	202a      	movs	r0, #42	@ 0x2a
 8000718:	f7ff ff8e 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(x0 >> 8);
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffab 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x0 & 0xFF);
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffa6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x1 >> 8);
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b29b      	uxth	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff9f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(x1 & 0xFF);
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <ILI9341_WriteData>

    // Page Address Set
    ILI9341_WriteCommand(0x2B);
 800074c:	202b      	movs	r0, #43	@ 0x2b
 800074e:	f7ff ff73 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(y0 >> 8);
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff90 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y0 & 0xFF);
 8000760:	88bb      	ldrh	r3, [r7, #4]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff8b 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y1 >> 8);
 800076a:	883b      	ldrh	r3, [r7, #0]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	b29b      	uxth	r3, r3
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff84 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(y1 & 0xFF);
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff7f 	bl	8000680 <ILI9341_WriteData>

    // Memory Write
    ILI9341_WriteCommand(0x2C);
 8000782:	202c      	movs	r0, #44	@ 0x2c
 8000784:	f7ff ff58 	bl	8000638 <ILI9341_WriteCommand>
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bd90      	pop	{r4, r7, pc}

08000790 <ILI9341_Init>:


// --- 高层绘图函数 ---

// 初始化序列
void ILI9341_Init(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    ILI9341_Reset();
 8000794:	f7ff ff98 	bl	80006c8 <ILI9341_Reset>

    ILI9341_WriteCommand(0xCF); // Power control B
 8000798:	20cf      	movs	r0, #207	@ 0xcf
 800079a:	f7ff ff4d 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff6e 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xC1);
 80007a4:	20c1      	movs	r0, #193	@ 0xc1
 80007a6:	f7ff ff6b 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x30);
 80007aa:	2030      	movs	r0, #48	@ 0x30
 80007ac:	f7ff ff68 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xED); // Power on sequence control
 80007b0:	20ed      	movs	r0, #237	@ 0xed
 80007b2:	f7ff ff41 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x64);
 80007b6:	2064      	movs	r0, #100	@ 0x64
 80007b8:	f7ff ff62 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 80007bc:	2003      	movs	r0, #3
 80007be:	f7ff ff5f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x12);
 80007c2:	2012      	movs	r0, #18
 80007c4:	f7ff ff5c 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x81);
 80007c8:	2081      	movs	r0, #129	@ 0x81
 80007ca:	f7ff ff59 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE8); // Driver timing control A
 80007ce:	20e8      	movs	r0, #232	@ 0xe8
 80007d0:	f7ff ff32 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x85);
 80007d4:	2085      	movs	r0, #133	@ 0x85
 80007d6:	f7ff ff53 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff50 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x78);
 80007e0:	2078      	movs	r0, #120	@ 0x78
 80007e2:	f7ff ff4d 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xCB); // Power control A
 80007e6:	20cb      	movs	r0, #203	@ 0xcb
 80007e8:	f7ff ff26 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x39);
 80007ec:	2039      	movs	r0, #57	@ 0x39
 80007ee:	f7ff ff47 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x2C);
 80007f2:	202c      	movs	r0, #44	@ 0x2c
 80007f4:	f7ff ff44 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff ff41 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x34);
 80007fe:	2034      	movs	r0, #52	@ 0x34
 8000800:	f7ff ff3e 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x02);
 8000804:	2002      	movs	r0, #2
 8000806:	f7ff ff3b 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xF7); // Pump ratio control
 800080a:	20f7      	movs	r0, #247	@ 0xf7
 800080c:	f7ff ff14 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x20);
 8000810:	2020      	movs	r0, #32
 8000812:	f7ff ff35 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xEA); // Driver timing control B
 8000816:	20ea      	movs	r0, #234	@ 0xea
 8000818:	f7ff ff0e 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ff2f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff ff2c 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC0); // Power Control 1
 8000828:	20c0      	movs	r0, #192	@ 0xc0
 800082a:	f7ff ff05 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x23);
 800082e:	2023      	movs	r0, #35	@ 0x23
 8000830:	f7ff ff26 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC1); // Power Control 2
 8000834:	20c1      	movs	r0, #193	@ 0xc1
 8000836:	f7ff feff 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x10);
 800083a:	2010      	movs	r0, #16
 800083c:	f7ff ff20 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC5); // VCM control 1
 8000840:	20c5      	movs	r0, #197	@ 0xc5
 8000842:	f7ff fef9 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x3E);
 8000846:	203e      	movs	r0, #62	@ 0x3e
 8000848:	f7ff ff1a 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x28);
 800084c:	2028      	movs	r0, #40	@ 0x28
 800084e:	f7ff ff17 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xC7); // VCM control 2
 8000852:	20c7      	movs	r0, #199	@ 0xc7
 8000854:	f7ff fef0 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x86);
 8000858:	2086      	movs	r0, #134	@ 0x86
 800085a:	f7ff ff11 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x36); // Memory Access Control
 800085e:	2036      	movs	r0, #54	@ 0x36
 8000860:	f7ff feea 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x48);
 8000864:	2048      	movs	r0, #72	@ 0x48
 8000866:	f7ff ff0b 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x3A); // Pixel Format Set
 800086a:	203a      	movs	r0, #58	@ 0x3a
 800086c:	f7ff fee4 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x55);    // 16 bits per pixel
 8000870:	2055      	movs	r0, #85	@ 0x55
 8000872:	f7ff ff05 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xB1); // Frame Rate Control
 8000876:	20b1      	movs	r0, #177	@ 0xb1
 8000878:	f7ff fede 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff feff 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x18);
 8000882:	2018      	movs	r0, #24
 8000884:	f7ff fefc 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xB6); // Display Function Control
 8000888:	20b6      	movs	r0, #182	@ 0xb6
 800088a:	f7ff fed5 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x08);
 800088e:	2008      	movs	r0, #8
 8000890:	f7ff fef6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x82);
 8000894:	2082      	movs	r0, #130	@ 0x82
 8000896:	f7ff fef3 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x27);
 800089a:	2027      	movs	r0, #39	@ 0x27
 800089c:	f7ff fef0 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xF2); // 3Gamma Function Disable
 80008a0:	20f2      	movs	r0, #242	@ 0xf2
 80008a2:	f7ff fec9 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff feea 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x26); // Gamma curve selected
 80008ac:	2026      	movs	r0, #38	@ 0x26
 80008ae:	f7ff fec3 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x01);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fee4 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE0); // Set Gamma
 80008b8:	20e0      	movs	r0, #224	@ 0xe0
 80008ba:	f7ff febd 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x0F);
 80008be:	200f      	movs	r0, #15
 80008c0:	f7ff fede 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 80008c4:	2031      	movs	r0, #49	@ 0x31
 80008c6:	f7ff fedb 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x2B);
 80008ca:	202b      	movs	r0, #43	@ 0x2b
 80008cc:	f7ff fed8 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0C);
 80008d0:	200c      	movs	r0, #12
 80008d2:	f7ff fed5 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 80008d6:	200e      	movs	r0, #14
 80008d8:	f7ff fed2 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x08);
 80008dc:	2008      	movs	r0, #8
 80008de:	f7ff fecf 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x4E);
 80008e2:	204e      	movs	r0, #78	@ 0x4e
 80008e4:	f7ff fecc 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xF1);
 80008e8:	20f1      	movs	r0, #241	@ 0xf1
 80008ea:	f7ff fec9 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x37);
 80008ee:	2037      	movs	r0, #55	@ 0x37
 80008f0:	f7ff fec6 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x07);
 80008f4:	2007      	movs	r0, #7
 80008f6:	f7ff fec3 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x10);
 80008fa:	2010      	movs	r0, #16
 80008fc:	f7ff fec0 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 8000900:	2003      	movs	r0, #3
 8000902:	f7ff febd 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 8000906:	200e      	movs	r0, #14
 8000908:	f7ff feba 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x09);
 800090c:	2009      	movs	r0, #9
 800090e:	f7ff feb7 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff feb4 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0xE1); // Set Gamma
 8000918:	20e1      	movs	r0, #225	@ 0xe1
 800091a:	f7ff fe8d 	bl	8000638 <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff feae 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 8000924:	200e      	movs	r0, #14
 8000926:	f7ff feab 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x14);
 800092a:	2014      	movs	r0, #20
 800092c:	f7ff fea8 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 8000930:	2003      	movs	r0, #3
 8000932:	f7ff fea5 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x11);
 8000936:	2011      	movs	r0, #17
 8000938:	f7ff fea2 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x07);
 800093c:	2007      	movs	r0, #7
 800093e:	f7ff fe9f 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 8000942:	2031      	movs	r0, #49	@ 0x31
 8000944:	f7ff fe9c 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0xC1);
 8000948:	20c1      	movs	r0, #193	@ 0xc1
 800094a:	f7ff fe99 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x48);
 800094e:	2048      	movs	r0, #72	@ 0x48
 8000950:	f7ff fe96 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x08);
 8000954:	2008      	movs	r0, #8
 8000956:	f7ff fe93 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0F);
 800095a:	200f      	movs	r0, #15
 800095c:	f7ff fe90 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0C);
 8000960:	200c      	movs	r0, #12
 8000962:	f7ff fe8d 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 8000966:	2031      	movs	r0, #49	@ 0x31
 8000968:	f7ff fe8a 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x36);
 800096c:	2036      	movs	r0, #54	@ 0x36
 800096e:	f7ff fe87 	bl	8000680 <ILI9341_WriteData>
    ILI9341_WriteData(0x0F);
 8000972:	200f      	movs	r0, #15
 8000974:	f7ff fe84 	bl	8000680 <ILI9341_WriteData>

    ILI9341_WriteCommand(0x11); // Exit Sleep
 8000978:	2011      	movs	r0, #17
 800097a:	f7ff fe5d 	bl	8000638 <ILI9341_WriteCommand>
    HAL_Delay(120);
 800097e:	2078      	movs	r0, #120	@ 0x78
 8000980:	f001 f98e 	bl	8001ca0 <HAL_Delay>

    ILI9341_WriteCommand(0x29); // Display on
 8000984:	2029      	movs	r0, #41	@ 0x29
 8000986:	f7ff fe57 	bl	8000638 <ILI9341_WriteCommand>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <ILI9341_FillScreen>:


void ILI9341_FillScreen(uint16_t color) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af02      	add	r7, sp, #8
 8000994:	4603      	mov	r3, r0
 8000996:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRectangle_DMA(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009a0:	22f0      	movs	r2, #240	@ 0xf0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f849 	bl	8000a3c <ILI9341_FillRectangle_DMA>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	460b      	mov	r3, r1
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	807b      	strh	r3, [r7, #2]
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2bef      	cmp	r3, #239	@ 0xef
 80009ca:	d82e      	bhi.n	8000a2a <ILI9341_DrawPixel+0x76>
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009d2:	d22a      	bcs.n	8000a2a <ILI9341_DrawPixel+0x76>

    ILI9341_SetAddressWindow(x, y, x, y);
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	88b9      	ldrh	r1, [r7, #4]
 80009da:	88f8      	ldrh	r0, [r7, #6]
 80009dc:	f7ff fe8c 	bl	80006f8 <ILI9341_SetAddressWindow>
    uint8_t data[] = {color >> 8, color & 0xFF};
 80009e0:	887b      	ldrh	r3, [r7, #2]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	733b      	strb	r3, [r7, #12]
 80009ea:	887b      	ldrh	r3, [r7, #2]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	737b      	strb	r3, [r7, #13]

    // 等待DMA空闲
    ILI9341_SPI_Wait_DMA_Completed();
 80009f0:	f7ff fe12 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <ILI9341_DrawPixel+0x80>)
 80009fc:	f002 fbf2 	bl	80031e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a06:	480b      	ldr	r0, [pc, #44]	@ (8000a34 <ILI9341_DrawPixel+0x80>)
 8000a08:	f002 fbec 	bl	80031e4 <HAL_GPIO_WritePin>
    // 只发送一个像素，使用阻塞模式更简单高效
    HAL_SPI_Transmit(ILI9341_SPI_HANDLE, data, 2, HAL_MAX_DELAY);
 8000a0c:	f107 010c 	add.w	r1, r7, #12
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	2202      	movs	r2, #2
 8000a16:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <ILI9341_DrawPixel+0x84>)
 8000a18:	f006 fdba 	bl	8007590 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a22:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <ILI9341_DrawPixel+0x80>)
 8000a24:	f002 fbde 	bl	80031e4 <HAL_GPIO_WritePin>
 8000a28:	e000      	b.n	8000a2c <ILI9341_DrawPixel+0x78>
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a2a:	bf00      	nop
}
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	42020c00 	.word	0x42020c00
 8000a38:	20000060 	.word	0x20000060

08000a3c <ILI9341_FillRectangle_DMA>:
//    }
//
//    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
//}
// ** 优化后的填充矩形函数 **
void ILI9341_FillRectangle_DMA(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b0fc      	sub	sp, #496	@ 0x1f0
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4605      	mov	r5, r0
 8000a44:	460c      	mov	r4, r1
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a4e:	f5a3 73f5 	sub.w	r3, r3, #490	@ 0x1ea
 8000a52:	462a      	mov	r2, r5
 8000a54:	801a      	strh	r2, [r3, #0]
 8000a56:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a5a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000a5e:	4622      	mov	r2, r4
 8000a60:	801a      	strh	r2, [r3, #0]
 8000a62:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a66:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	801a      	strh	r2, [r3, #0]
 8000a6e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a72:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000a76:	460a      	mov	r2, r1
 8000a78:	801a      	strh	r2, [r3, #0]
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a7a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a7e:	f5a3 73f5 	sub.w	r3, r3, #490	@ 0x1ea
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	2bef      	cmp	r3, #239	@ 0xef
 8000a86:	f200 80cc 	bhi.w	8000c22 <ILI9341_FillRectangle_DMA+0x1e6>
 8000a8a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000a8e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a98:	f080 80c3 	bcs.w	8000c22 <ILI9341_FillRectangle_DMA+0x1e6>
    if ((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000a9c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000aa0:	f5a3 73f5 	sub.w	r3, r3, #490	@ 0x1ea
 8000aa4:	881a      	ldrh	r2, [r3, #0]
 8000aa6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000aaa:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2bf0      	cmp	r3, #240	@ 0xf0
 8000ab4:	dd0b      	ble.n	8000ace <ILI9341_FillRectangle_DMA+0x92>
 8000ab6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000aba:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000abe:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8000ac2:	f5a2 72f5 	sub.w	r2, r2, #490	@ 0x1ea
 8000ac6:	8812      	ldrh	r2, [r2, #0]
 8000ac8:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
 8000acc:	801a      	strh	r2, [r3, #0]
    if ((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000ace:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000ad2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000ad6:	881a      	ldrh	r2, [r3, #0]
 8000ad8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000adc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ae8:	dd0b      	ble.n	8000b02 <ILI9341_FillRectangle_DMA+0xc6>
 8000aea:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000aee:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000af2:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8000af6:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8000afa:	8812      	ldrh	r2, [r2, #0]
 8000afc:	f5c2 72a0 	rsb	r2, r2, #320	@ 0x140
 8000b00:	801a      	strh	r2, [r3, #0]

    ILI9341_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000b02:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000b06:	f5a3 72f5 	sub.w	r2, r3, #490	@ 0x1ea
 8000b0a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000b0e:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000b12:	8812      	ldrh	r2, [r2, #0]
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	b29c      	uxth	r4, r3
 8000b1e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000b22:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8000b26:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000b2a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000b2e:	8812      	ldrh	r2, [r2, #0]
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000b3e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000b42:	8819      	ldrh	r1, [r3, #0]
 8000b44:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000b48:	f5a3 73f5 	sub.w	r3, r3, #490	@ 0x1ea
 8000b4c:	8818      	ldrh	r0, [r3, #0]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	4622      	mov	r2, r4
 8000b52:	f7ff fdd1 	bl	80006f8 <ILI9341_SetAddressWindow>

    HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b5c:	4833      	ldr	r0, [pc, #204]	@ (8000c2c <ILI9341_FillRectangle_DMA+0x1f0>)
 8000b5e:	f002 fb41 	bl	80031e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b68:	4830      	ldr	r0, [pc, #192]	@ (8000c2c <ILI9341_FillRectangle_DMA+0x1f0>)
 8000b6a:	f002 fb3b 	bl	80031e4 <HAL_GPIO_WritePin>

    // 使用最大可能的行缓冲区
	uint8_t row_buffer[ILI9341_WIDTH * 2];
	uint16_t row_size_bytes = w * 2;
 8000b6e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000b72:	f5a3 73f7 	sub.w	r3, r3, #494	@ 0x1ee
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea

	// 填充缓冲区为指定颜色
	for (uint16_t i = 0; i < row_size_bytes; i += 2) {
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8000b84:	e01b      	b.n	8000bbe <ILI9341_FillRectangle_DMA+0x182>
		row_buffer[i] = color >> 8;
 8000b86:	f8b7 3200 	ldrh.w	r3, [r7, #512]	@ 0x200
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8000b92:	b2d1      	uxtb	r1, r2
 8000b94:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8000b98:	f5a2 72f4 	sub.w	r2, r2, #488	@ 0x1e8
 8000b9c:	54d1      	strb	r1, [r2, r3]
		row_buffer[i+1] = color & 0xFF;
 8000b9e:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	f8b7 2200 	ldrh.w	r2, [r7, #512]	@ 0x200
 8000ba8:	b2d1      	uxtb	r1, r2
 8000baa:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8000bae:	f5a2 72f4 	sub.w	r2, r2, #488	@ 0x1e8
 8000bb2:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < row_size_bytes; i += 2) {
 8000bb4:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8000bb8:	3302      	adds	r3, #2
 8000bba:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8000bbe:	f8b7 21ee 	ldrh.w	r2, [r7, #494]	@ 0x1ee
 8000bc2:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d3dd      	bcc.n	8000b86 <ILI9341_FillRectangle_DMA+0x14a>
	}

	// 逐行发送，每次发送都等待上一次完成
	for (uint16_t i = 0; i < h; i++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec
 8000bd0:	e015      	b.n	8000bfe <ILI9341_FillRectangle_DMA+0x1c2>
		while (!spi_dma_tx_completed); // 等待
 8000bd2:	bf00      	nop
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <ILI9341_FillRectangle_DMA+0x1f4>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0fa      	beq.n	8000bd4 <ILI9341_FillRectangle_DMA+0x198>
		spi_dma_tx_completed = 0;      // 清零
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <ILI9341_FillRectangle_DMA+0x1f4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(ILI9341_SPI_HANDLE, row_buffer, row_size_bytes); // 启动
 8000be4:	f8b7 21ea 	ldrh.w	r2, [r7, #490]	@ 0x1ea
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4619      	mov	r1, r3
 8000bee:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <ILI9341_FillRectangle_DMA+0x1f8>)
 8000bf0:	f006 fee2 	bl	80079b8 <HAL_SPI_Transmit_DMA>
	for (uint16_t i = 0; i < h; i++) {
 8000bf4:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	@ 0x1ec
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f8a7 31ec 	strh.w	r3, [r7, #492]	@ 0x1ec
 8000bfe:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8000c02:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8000c06:	f8b7 21ec 	ldrh.w	r2, [r7, #492]	@ 0x1ec
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3e0      	bcc.n	8000bd2 <ILI9341_FillRectangle_DMA+0x196>
	}


	// 等待最后一次DMA传输完成
	ILI9341_SPI_Wait_DMA_Completed();
 8000c10:	f7ff fd02 	bl	8000618 <ILI9341_SPI_Wait_DMA_Completed>
    HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c1a:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <ILI9341_FillRectangle_DMA+0x1f0>)
 8000c1c:	f002 fae2 	bl	80031e4 <HAL_GPIO_WritePin>
 8000c20:	e000      	b.n	8000c24 <ILI9341_FillRectangle_DMA+0x1e8>
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000c22:	bf00      	nop
}
 8000c24:	f507 77f8 	add.w	r7, r7, #496	@ 0x1f0
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2c:	42020c00 	.word	0x42020c00
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000060 	.word	0x20000060

08000c38 <ILI9341_FillRectangle_Slow>:

// *** 新增：一个简单的、基于DrawPixel的矩形填充函数 ***
// 这个函数专门给DrawChar用于字符放大，我们不把它在.h中声明，作为内部函数
static void ILI9341_FillRectangle_Slow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4623      	mov	r3, r4
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80bb      	strh	r3, [r7, #4]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	807b      	strh	r3, [r7, #2]
 8000c52:	4613      	mov	r3, r2
 8000c54:	803b      	strh	r3, [r7, #0]
    for (uint16_t j = 0; j < h; j++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	81fb      	strh	r3, [r7, #14]
 8000c5a:	e018      	b.n	8000c8e <ILI9341_FillRectangle_Slow+0x56>
        for (uint16_t i = 0; i < w; i++) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	81bb      	strh	r3, [r7, #12]
 8000c60:	e00e      	b.n	8000c80 <ILI9341_FillRectangle_Slow+0x48>
            ILI9341_DrawPixel(x + i, y + j, color);
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	89bb      	ldrh	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	b298      	uxth	r0, r3
 8000c6a:	88ba      	ldrh	r2, [r7, #4]
 8000c6c:	89fb      	ldrh	r3, [r7, #14]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	8c3a      	ldrh	r2, [r7, #32]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f7ff fe9d 	bl	80009b4 <ILI9341_DrawPixel>
        for (uint16_t i = 0; i < w; i++) {
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	81bb      	strh	r3, [r7, #12]
 8000c80:	89ba      	ldrh	r2, [r7, #12]
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3ec      	bcc.n	8000c62 <ILI9341_FillRectangle_Slow+0x2a>
    for (uint16_t j = 0; j < h; j++) {
 8000c88:	89fb      	ldrh	r3, [r7, #14]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	81fb      	strh	r3, [r7, #14]
 8000c8e:	89fa      	ldrh	r2, [r7, #14]
 8000c90:	883b      	ldrh	r3, [r7, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3e2      	bcc.n	8000c5c <ILI9341_FillRectangle_Slow+0x24>
        }
    }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd90      	pop	{r4, r7, pc}

08000ca0 <ILI9341_DrawChar>:

// *** 基于Adafruit GFX逻辑的字符绘制函数 ***
// 这个函数现在会调用我们内部的慢速填充函数
void ILI9341_DrawChar(uint16_t x, uint16_t y, char c, sFont* font, uint16_t color, uint16_t bg, uint8_t size) {
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4603      	mov	r3, r0
 8000caa:	81fb      	strh	r3, [r7, #14]
 8000cac:	460b      	mov	r3, r1
 8000cae:	81bb      	strh	r3, [r7, #12]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	72fb      	strb	r3, [r7, #11]
    if (size == 0) size = 1;
 8000cb4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <ILI9341_DrawChar+0x22>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT) ||
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	2bef      	cmp	r3, #239	@ 0xef
 8000cc6:	f200 80d1 	bhi.w	8000e6c <ILI9341_DrawChar+0x1cc>
 8000cca:	89bb      	ldrh	r3, [r7, #12]
 8000ccc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000cd0:	f080 80cc 	bcs.w	8000e6c <ILI9341_DrawChar+0x1cc>
        ((x + font->Width * size - 1) < 0) || ((y + font->Height * size - 1) < 0))
 8000cd4:	89fa      	ldrh	r2, [r7, #14]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	889b      	ldrh	r3, [r3, #4]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ce0:	fb01 f303 	mul.w	r3, r1, r3
 8000ce4:	4413      	add	r3, r2
    if ((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT) ||
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f340 80c0 	ble.w	8000e6c <ILI9341_DrawChar+0x1cc>
        ((x + font->Width * size - 1) < 0) || ((y + font->Height * size - 1) < 0))
 8000cec:	89ba      	ldrh	r2, [r7, #12]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	88db      	ldrh	r3, [r3, #6]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000cf8:	fb01 f303 	mul.w	r3, r1, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f340 80b4 	ble.w	8000e6c <ILI9341_DrawChar+0x1cc>
        return;

    if (c < ' ' || c > '~') c = ' ';
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	2b1f      	cmp	r3, #31
 8000d08:	d902      	bls.n	8000d10 <ILI9341_DrawChar+0x70>
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d0e:	d901      	bls.n	8000d14 <ILI9341_DrawChar+0x74>
 8000d10:	2320      	movs	r3, #32
 8000d12:	72fb      	strb	r3, [r7, #11]

    for (int8_t i = 0; i < font->Width; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	75fb      	strb	r3, [r7, #23]
 8000d18:	e0a0      	b.n	8000e5c <ILI9341_DrawChar+0x1bc>
        uint8_t line = font->table[(c - ' ') * font->Width + i];
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	7afa      	ldrb	r2, [r7, #11]
 8000d20:	3a20      	subs	r2, #32
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	8889      	ldrh	r1, [r1, #4]
 8000d26:	fb02 f101 	mul.w	r1, r2, r1
 8000d2a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000d2e:	440a      	add	r2, r1
 8000d30:	4413      	add	r3, r2
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	75bb      	strb	r3, [r7, #22]
        for (int8_t j = 0; j < font->Height; j++, line >>= 1) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	757b      	strb	r3, [r7, #21]
 8000d3a:	e082      	b.n	8000e42 <ILI9341_DrawChar+0x1a2>
            if (line & 0x01) {
 8000d3c:	7dbb      	ldrb	r3, [r7, #22]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d038      	beq.n	8000db8 <ILI9341_DrawChar+0x118>
                if (size == 1)
 8000d46:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d110      	bne.n	8000d70 <ILI9341_DrawChar+0xd0>
                    ILI9341_DrawPixel(x + i, y + j, color);
 8000d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	4413      	add	r3, r2
 8000d58:	b298      	uxth	r0, r3
 8000d5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	89bb      	ldrh	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff fe23 	bl	80009b4 <ILI9341_DrawPixel>
 8000d6e:	e05f      	b.n	8000e30 <ILI9341_DrawChar+0x190>
                else
                    // *** 调用慢速版 ***
                    ILI9341_FillRectangle_Slow(x + i * size, y + j * size, size, size, color);
 8000d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	fb12 f303 	smulbb	r3, r2, r3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	4413      	add	r3, r2
 8000d86:	b298      	uxth	r0, r3
 8000d88:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	fb12 f303 	smulbb	r3, r2, r3
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	89bb      	ldrh	r3, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b299      	uxth	r1, r3
 8000da0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000daa:	b29c      	uxth	r4, r3
 8000dac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	4623      	mov	r3, r4
 8000db2:	f7ff ff41 	bl	8000c38 <ILI9341_FillRectangle_Slow>
 8000db6:	e03b      	b.n	8000e30 <ILI9341_DrawChar+0x190>
            } else if (bg != color) {
 8000db8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d037      	beq.n	8000e30 <ILI9341_DrawChar+0x190>
                if (size == 1)
 8000dc0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d110      	bne.n	8000dea <ILI9341_DrawChar+0x14a>
                    ILI9341_DrawPixel(x + i, y + j, bg);
 8000dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b298      	uxth	r0, r3
 8000dd4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	89bb      	ldrh	r3, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fde6 	bl	80009b4 <ILI9341_DrawPixel>
 8000de8:	e022      	b.n	8000e30 <ILI9341_DrawChar+0x190>
                else
                    // *** 调用慢速版 ***
                    ILI9341_FillRectangle_Slow(x + i * size, y + j * size, size, size, bg);
 8000dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	fb12 f303 	smulbb	r3, r2, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b298      	uxth	r0, r3
 8000e02:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	fb12 f303 	smulbb	r3, r2, r3
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	89bb      	ldrh	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	b299      	uxth	r1, r3
 8000e1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e24:	b29c      	uxth	r4, r3
 8000e26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	f7ff ff04 	bl	8000c38 <ILI9341_FillRectangle_Slow>
        for (int8_t j = 0; j < font->Height; j++, line >>= 1) {
 8000e30:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	3301      	adds	r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	757b      	strb	r3, [r7, #21]
 8000e3c:	7dbb      	ldrb	r3, [r7, #22]
 8000e3e:	085b      	lsrs	r3, r3, #1
 8000e40:	75bb      	strb	r3, [r7, #22]
 8000e42:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	88d2      	ldrh	r2, [r2, #6]
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	f6ff af76 	blt.w	8000d3c <ILI9341_DrawChar+0x9c>
    for (int8_t i = 0; i < font->Width; i++) {
 8000e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	75fb      	strb	r3, [r7, #23]
 8000e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	8892      	ldrh	r2, [r2, #4]
 8000e64:	4293      	cmp	r3, r2
 8000e66:	f6ff af58 	blt.w	8000d1a <ILI9341_DrawChar+0x7a>
 8000e6a:	e000      	b.n	8000e6e <ILI9341_DrawChar+0x1ce>
        return;
 8000e6c:	bf00      	nop
            }
        }
    }
}
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd90      	pop	{r4, r7, pc}

08000e74 <ILI9341_DrawString>:

void ILI9341_DrawString(uint16_t x, uint16_t y, const char* str, sFont* font, uint16_t color, uint16_t bg, uint8_t size) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	60ba      	str	r2, [r7, #8]
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4603      	mov	r3, r0
 8000e80:	81fb      	strh	r3, [r7, #14]
 8000e82:	460b      	mov	r3, r1
 8000e84:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 8000e86:	e03c      	b.n	8000f02 <ILI9341_DrawString+0x8e>
    	uint16_t char_width = (font->Width + 1) * size;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	889b      	ldrh	r3, [r3, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	fb12 f303 	smulbb	r3, r2, r3
 8000e9a:	82fb      	strh	r3, [r7, #22]
        if (x + char_width >= ILI9341_WIDTH) {
 8000e9c:	89fa      	ldrh	r2, [r7, #14]
 8000e9e:	8afb      	ldrh	r3, [r7, #22]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2bef      	cmp	r3, #239	@ 0xef
 8000ea4:	dd18      	ble.n	8000ed8 <ILI9341_DrawString+0x64>
            x = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	81fb      	strh	r3, [r7, #14]
            y += font->Height * size;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	88da      	ldrh	r2, [r3, #6]
 8000eae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	fb12 f303 	smulbb	r3, r2, r3
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	81bb      	strh	r3, [r7, #12]
            if (y + font->Height * size >= ILI9341_HEIGHT) break;
 8000ec0:	89ba      	ldrh	r2, [r7, #12]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	88db      	ldrh	r3, [r3, #6]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ecc:	fb01 f303 	mul.w	r3, r1, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ed6:	da19      	bge.n	8000f0c <ILI9341_DrawString+0x98>
        }
        ILI9341_DrawChar(x, y, *str, font, color, bg, size);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	89b9      	ldrh	r1, [r7, #12]
 8000ede:	89f8      	ldrh	r0, [r7, #14]
 8000ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	8c3b      	ldrh	r3, [r7, #32]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f7ff fed6 	bl	8000ca0 <ILI9341_DrawChar>
        x += char_width;
 8000ef4:	89fa      	ldrh	r2, [r7, #14]
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	4413      	add	r3, r2
 8000efa:	81fb      	strh	r3, [r7, #14]
        str++;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1be      	bne.n	8000e88 <ILI9341_DrawString+0x14>
    }
}
 8000f0a:	e000      	b.n	8000f0e <ILI9341_DrawString+0x9a>
            if (y + font->Height * size >= ILI9341_HEIGHT) break;
 8000f0c:	bf00      	nop
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_SPI_TxCpltCallback>:

// --- SPI DMA传输完成回调函数 ---
// 当DMA完成SPI发送后，硬件会自动调用这个函数
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    // 检查是否是我们正在使用的SPI1
    if (hspi->Instance == SPI1) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <HAL_SPI_TxCpltCallback+0x24>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d102      	bne.n	8000f30 <HAL_SPI_TxCpltCallback+0x18>
        // 设置标志位，表示传输已完成
        spi_dma_tx_completed = 1;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_SPI_TxCpltCallback+0x28>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
    }
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40013000 	.word	0x40013000
 8000f40:	20000008 	.word	0x20000008

08000f44 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    // 在这里设置第二个断点 (断点2)
    // 如果程序停在这里，就说明DMA出错了！
    __NOP(); // 这是一条空指令，方便设置断点
 8000f4c:	bf00      	nop
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f000 fe4d 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000f66:	f000 f90b 	bl	8001180 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000f6a:	f000 f8ad 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6e:	f000 f9b9 	bl	80012e4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f72:	f000 f913 	bl	800119c <MX_GPDMA1_Init>
  MX_SPI1_Init();
 8000f76:	f000 f945 	bl	8001204 <MX_SPI1_Init>
  MX_ICACHE_Init();
 8000f7a:	f000 f92f 	bl	80011dc <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  // 初始化TFT显示屏
  ILI9341_Init();
 8000f7e:	f7ff fc07 	bl	8000790 <ILI9341_Init>

  ILI9341_FillScreen(ILI9341_BLACK);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fd03 	bl	800098e <ILI9341_FillScreen>
//  ILI9341_FillRectangle(50, 50, 140, 30, ILI9341_RED);
//  ILI9341_FillRectangle(50, 150, 140, 30, ILI9341_GREEN);
  // --- 文字显示测试 ---
  ILI9341_DrawString(10, 10, "Hello World!", &Font_5x7, ILI9341_WHITE, ILI9341_BLACK, 1);
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <main+0x154>)
 8000f98:	4a46      	ldr	r2, [pc, #280]	@ (80010b4 <main+0x158>)
 8000f9a:	210a      	movs	r1, #10
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f7ff ff69 	bl	8000e74 <ILI9341_DrawString>
    ILI9341_DrawString(10, 30, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", &Font_5x7, ILI9341_RED, ILI9341_BLACK, 2);
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	9302      	str	r3, [sp, #8]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80010b0 <main+0x154>)
 8000fb2:	4a41      	ldr	r2, [pc, #260]	@ (80010b8 <main+0x15c>)
 8000fb4:	211e      	movs	r1, #30
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f7ff ff5c 	bl	8000e74 <ILI9341_DrawString>
    ILI9341_DrawString(10, 50, "abcdefghijklmnopqrstuvwxyz", &Font_5x7, ILI9341_GREEN, ILI9341_BLACK, 3);
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	4b39      	ldr	r3, [pc, #228]	@ (80010b0 <main+0x154>)
 8000fcc:	4a3b      	ldr	r2, [pc, #236]	@ (80010bc <main+0x160>)
 8000fce:	2132      	movs	r1, #50	@ 0x32
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f7ff ff4f 	bl	8000e74 <ILI9341_DrawString>
    ILI9341_DrawString(10, 70, "0123456789", &Font_5x7, ILI9341_BLUE, ILI9341_BLACK, 4);
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	231f      	movs	r3, #31
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <main+0x154>)
 8000fe4:	4a36      	ldr	r2, [pc, #216]	@ (80010c0 <main+0x164>)
 8000fe6:	2146      	movs	r1, #70	@ 0x46
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f7ff ff43 	bl	8000e74 <ILI9341_DrawString>
    char display_str[2] = {0}; // 创建一个长度为2的字符串，用于存放单个字符和结束符'\0'
 8000fee:	2300      	movs	r3, #0
 8000ff0:	80bb      	strh	r3, [r7, #4]
      uint16_t x_pos = 10;       // 初始X坐标
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	81fb      	strh	r3, [r7, #14]
      uint16_t y_pos = 150;       // 初始Y坐标
 8000ff6:	2396      	movs	r3, #150	@ 0x96
 8000ff8:	81bb      	strh	r3, [r7, #12]
      uint16_t text_color = ILI9341_WHITE;
 8000ffa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ffe:	813b      	strh	r3, [r7, #8]
      uint16_t bg_color = ILI9341_BLACK;
 8001000:	2300      	movs	r3, #0
 8001002:	80fb      	strh	r3, [r7, #6]

      // 4. 循环打印所有可见的ASCII字符 (从32号的空格 ' ' 到 126号的 '~')
      for (char c = 32; c <= 126; c++) {
 8001004:	2320      	movs	r3, #32
 8001006:	72fb      	strb	r3, [r7, #11]
 8001008:	e026      	b.n	8001058 <main+0xfc>
          // 将当前字符放入字符串中
          display_str[0] = c;
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	713b      	strb	r3, [r7, #4]

          // 检查是否需要换行
          // 加上字宽和一点边距，判断是否会超出屏幕右边界
          if (x_pos + Font_5x7.Width > ILI9341_WIDTH - 10) {
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	4a27      	ldr	r2, [pc, #156]	@ (80010b0 <main+0x154>)
 8001012:	8892      	ldrh	r2, [r2, #4]
 8001014:	4413      	add	r3, r2
 8001016:	2be6      	cmp	r3, #230	@ 0xe6
 8001018:	dd08      	ble.n	800102c <main+0xd0>
              x_pos = 10; // X坐标回到最左边
 800101a:	230a      	movs	r3, #10
 800101c:	81fb      	strh	r3, [r7, #14]
              y_pos += Font_5x7.Height + 4; // Y坐标下移一行 (字体高度 + 4像素行间距)
 800101e:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <main+0x154>)
 8001020:	88da      	ldrh	r2, [r3, #6]
 8001022:	89bb      	ldrh	r3, [r7, #12]
 8001024:	4413      	add	r3, r2
 8001026:	b29b      	uxth	r3, r3
 8001028:	3304      	adds	r3, #4
 800102a:	81bb      	strh	r3, [r7, #12]
          }

          // 在屏幕上绘制当前字符
          ILI9341_DrawString(x_pos, y_pos, display_str, &Font_5x7, text_color, bg_color, 1);
 800102c:	1d3a      	adds	r2, r7, #4
 800102e:	89b9      	ldrh	r1, [r7, #12]
 8001030:	89f8      	ldrh	r0, [r7, #14]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	893b      	ldrh	r3, [r7, #8]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <main+0x154>)
 8001040:	f7ff ff18 	bl	8000e74 <ILI9341_DrawString>

          // 更新下一个字符的X坐标
          x_pos += Font_5x7.Width + 4; // X坐标右移 (字体宽度 + 4像素字间距)
 8001044:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <main+0x154>)
 8001046:	889a      	ldrh	r2, [r3, #4]
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	3304      	adds	r3, #4
 8001050:	81fb      	strh	r3, [r7, #14]
      for (char c = 32; c <= 126; c++) {
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	3301      	adds	r3, #1
 8001056:	72fb      	strb	r3, [r7, #11]
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	2b7e      	cmp	r3, #126	@ 0x7e
 800105c:	d9d5      	bls.n	800100a <main+0xae>
      }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 fbe0 	bl	8001824 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 fbdd 	bl	8001824 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800106a:	2002      	movs	r0, #2
 800106c:	f000 fbda 	bl	8001824 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001070:	2101      	movs	r1, #1
 8001072:	2000      	movs	r0, #0
 8001074:	f000 fc66 	bl	8001944 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <main+0x168>)
 800107a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800107e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <main+0x168>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <main+0x168>)
 8001088:	2200      	movs	r2, #0
 800108a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800108c:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <main+0x168>)
 800108e:	2200      	movs	r2, #0
 8001090:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <main+0x168>)
 8001094:	2200      	movs	r2, #0
 8001096:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001098:	490a      	ldr	r1, [pc, #40]	@ (80010c4 <main+0x168>)
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fcec 	bl	8001a78 <BSP_COM_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <main+0x150>
  {
    Error_Handler();
 80010a6:	f000 f9b9 	bl	800141c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <main+0x150>
 80010b0:	20000000 	.word	0x20000000
 80010b4:	08009480 	.word	0x08009480
 80010b8:	08009490 	.word	0x08009490
 80010bc:	080094ac 	.word	0x080094ac
 80010c0:	080094c8 	.word	0x080094c8
 80010c4:	20000050 	.word	0x20000050

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b09e      	sub	sp, #120	@ 0x78
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	2260      	movs	r2, #96	@ 0x60
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f008 f999 	bl	800940e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ec:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80010f0:	f002 f8c0 	bl	8003274 <HAL_PWREx_ControlVoltageScaling>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x36>
  {
    Error_Handler();
 80010fa:	f000 f98f 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010fe:	2310      	movs	r3, #16
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001102:	2301      	movs	r3, #1
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001106:	2310      	movs	r3, #16
 8001108:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800110a:	2300      	movs	r3, #0
 800110c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001112:	2301      	movs	r3, #1
 8001114:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800111a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800111c:	2303      	movs	r3, #3
 800111e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001120:	230a      	movs	r3, #10
 8001122:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001124:	2302      	movs	r3, #2
 8001126:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001128:	2302      	movs	r3, #2
 800112a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001130:	230c      	movs	r3, #12
 8001132:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4618      	mov	r0, r3
 800113e:	f002 f995 	bl	800346c <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001148:	f000 f968 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	231f      	movs	r3, #31
 800114e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2303      	movs	r3, #3
 8001152:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	2104      	movs	r1, #4
 8001168:	4618      	mov	r0, r3
 800116a:	f003 f85b 	bl	8004224 <HAL_RCC_ClockConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001174:	f000 f952 	bl	800141c <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3778      	adds	r7, #120	@ 0x78
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001184:	f002 f962 	bl	800344c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001188:	2002      	movs	r0, #2
 800118a:	f002 f8ff 	bl	800338c <HAL_PWREx_ConfigSupply>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001194:	f000 f942 	bl	800141c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <MX_GPDMA1_Init+0x3c>)
 80011a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a8:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_GPDMA1_Init+0x3c>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_GPDMA1_Init+0x3c>)
 80011b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	201d      	movs	r0, #29
 80011c6:	f000 fe47 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80011ca:	201d      	movs	r0, #29
 80011cc:	f000 fe5e 	bl	8001e8c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	46020c00 	.word	0x46020c00

080011dc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80011e0:	2000      	movs	r0, #0
 80011e2:	f002 f817 	bl	8003214 <HAL_ICACHE_ConfigAssociativityMode>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80011ec:	f000 f916 	bl	800141c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80011f0:	f002 f830 	bl	8003254 <HAL_ICACHE_Enable>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80011fa:	f000 f90f 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001214:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001216:	4a32      	ldr	r2, [pc, #200]	@ (80012e0 <MX_SPI1_Init+0xdc>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800121c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800122a:	2207      	movs	r2, #7
 800122c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001234:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800123a:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800123c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001244:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001248:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124a:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001250:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800125e:	2207      	movs	r2, #7
 8001260:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001264:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001268:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800126c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001270:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800127a:	2200      	movs	r2, #0
 800127c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001280:	2200      	movs	r2, #0
 8001282:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001286:	2200      	movs	r2, #0
 8001288:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800128c:	2200      	movs	r2, #0
 800128e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001292:	2200      	movs	r2, #0
 8001294:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_SPI1_Init+0xd8>)
 8001298:	2200      	movs	r2, #0
 800129a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_SPI1_Init+0xd8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	@ (80012dc <MX_SPI1_Init+0xd8>)
 80012a4:	f006 f85e 	bl	8007364 <HAL_SPI_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80012ae:	f000 f8b5 	bl	800141c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80012b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012ba:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_SPI1_Init+0xd8>)
 80012c6:	f007 f886 	bl	80083d6 <HAL_SPIEx_SetConfigAutonomousMode>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 80012d0:	f000 f8a4 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000060 	.word	0x20000060
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b3c      	ldr	r3, [pc, #240]	@ (80013ec <MX_GPIO_Init+0x108>)
 80012fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001300:	4a3a      	ldr	r2, [pc, #232]	@ (80013ec <MX_GPIO_Init+0x108>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800130a:	4b38      	ldr	r3, [pc, #224]	@ (80013ec <MX_GPIO_Init+0x108>)
 800130c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <MX_GPIO_Init+0x108>)
 800131a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131e:	4a33      	ldr	r2, [pc, #204]	@ (80013ec <MX_GPIO_Init+0x108>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001328:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <MX_GPIO_Init+0x108>)
 800132a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001336:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <MX_GPIO_Init+0x108>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	4a2b      	ldr	r2, [pc, #172]	@ (80013ec <MX_GPIO_Init+0x108>)
 800133e:	f043 0320 	orr.w	r3, r3, #32
 8001342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001346:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <MX_GPIO_Init+0x108>)
 8001348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <MX_GPIO_Init+0x108>)
 8001356:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135a:	4a24      	ldr	r2, [pc, #144]	@ (80013ec <MX_GPIO_Init+0x108>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001364:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <MX_GPIO_Init+0x108>)
 8001366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <MX_GPIO_Init+0x108>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001378:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <MX_GPIO_Init+0x108>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_GPIO_Init+0x108>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001396:	4816      	ldr	r0, [pc, #88]	@ (80013f0 <MX_GPIO_Init+0x10c>)
 8001398:	f001 ff24 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TFT_CS_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80013a2:	4814      	ldr	r0, [pc, #80]	@ (80013f4 <MX_GPIO_Init+0x110>)
 80013a4:	f001 ff1e 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 80013a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <MX_GPIO_Init+0x10c>)
 80013c2:	f001 fd2f 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin;
 80013c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_GPIO_Init+0x110>)
 80013e0:	f001 fd20 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	@ 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	46020c00 	.word	0x46020c00
 80013f0:	42021400 	.word	0x42021400
 80013f4:	42020c00 	.word	0x42020c00

080013f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800140a:	f000 fc29 	bl	8001c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40014800 	.word	0x40014800

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <Error_Handler+0x8>

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_MspInit+0x34>)
 8001430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001434:	4a09      	ldr	r2, [pc, #36]	@ (800145c <HAL_MspInit+0x34>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_MspInit+0x34>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800144c:	2004      	movs	r0, #4
 800144e:	f000 fcf8 	bl	8001e42 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	46020c00 	.word	0x46020c00

08001460 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0ba      	sub	sp, #232	@ 0xe8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	22c0      	movs	r2, #192	@ 0xc0
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f007 ffc4 	bl	800940e <memset>
  if(hspi->Instance==SPI1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a4d      	ldr	r2, [pc, #308]	@ (80015c0 <HAL_SPI_MspInit+0x160>)
 800148c:	4293      	cmp	r3, r2
 800148e:	f040 8092 	bne.w	80015b6 <HAL_SPI_MspInit+0x156>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001492:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800149e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fac2 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_SPI_MspInit+0x5a>
    {
      Error_Handler();
 80014b6:	f7ff ffb1 	bl	800141c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ba:	4b42      	ldr	r3, [pc, #264]	@ (80015c4 <HAL_SPI_MspInit+0x164>)
 80014bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014c0:	4a40      	ldr	r2, [pc, #256]	@ (80015c4 <HAL_SPI_MspInit+0x164>)
 80014c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014c6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014ca:	4b3e      	ldr	r3, [pc, #248]	@ (80015c4 <HAL_SPI_MspInit+0x164>)
 80014cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <HAL_SPI_MspInit+0x164>)
 80014da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014de:	4a39      	ldr	r2, [pc, #228]	@ (80015c4 <HAL_SPI_MspInit+0x164>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014e8:	4b36      	ldr	r3, [pc, #216]	@ (80015c4 <HAL_SPI_MspInit+0x164>)
 80014ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014f6:	23e0      	movs	r3, #224	@ 0xe0
 80014f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150e:	2305      	movs	r3, #5
 8001510:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001518:	4619      	mov	r1, r3
 800151a:	482b      	ldr	r0, [pc, #172]	@ (80015c8 <HAL_SPI_MspInit+0x168>)
 800151c:	f001 fc82 	bl	8002e24 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001520:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001522:	4a2b      	ldr	r2, [pc, #172]	@ (80015d0 <HAL_SPI_MspInit+0x170>)
 8001524:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001528:	2207      	movs	r2, #7
 800152a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001538:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 800153a:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 800153c:	2208      	movs	r2, #8
 800153e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 800155a:	2201      	movs	r2, #1
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001560:	2201      	movs	r2, #1
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001566:	2200      	movs	r2, #0
 8001568:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 800156c:	2200      	movs	r2, #0
 800156e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001572:	2200      	movs	r2, #0
 8001574:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001576:	4815      	ldr	r0, [pc, #84]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001578:	f000 fcee 	bl	8001f58 <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8001582:	f7ff ff4b 	bl	800141c <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel0);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 800158a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800158e:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001594:	2110      	movs	r1, #16
 8001596:	480d      	ldr	r0, [pc, #52]	@ (80015cc <HAL_SPI_MspInit+0x16c>)
 8001598:	f001 f816 	bl	80025c8 <HAL_DMA_ConfigChannelAttributes>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 80015a2:	f7ff ff3b 	bl	800141c <Error_Handler>
    }

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	203b      	movs	r0, #59	@ 0x3b
 80015ac:	f000 fc54 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015b0:	203b      	movs	r0, #59	@ 0x3b
 80015b2:	f000 fc6b 	bl	8001e8c <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015b6:	bf00      	nop
 80015b8:	37e8      	adds	r7, #232	@ 0xe8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40013000 	.word	0x40013000
 80015c4:	46020c00 	.word	0x46020c00
 80015c8:	42020000 	.word	0x42020000
 80015cc:	200000f0 	.word	0x200000f0
 80015d0:	40020050 	.word	0x40020050

080015d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	@ 0x38
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <HAL_InitTick+0xcc>)
 80015e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015ea:	4a2d      	ldr	r2, [pc, #180]	@ (80016a0 <HAL_InitTick+0xcc>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_InitTick+0xcc>)
 80015f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001602:	f107 0210 	add.w	r2, r7, #16
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f953 	bl	80048b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001612:	f003 f929 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8001616:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161a:	4a22      	ldr	r2, [pc, #136]	@ (80016a4 <HAL_InitTick+0xd0>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9b      	lsrs	r3, r3, #18
 8001622:	3b01      	subs	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_InitTick+0xd4>)
 8001628:	4a20      	ldr	r2, [pc, #128]	@ (80016ac <HAL_InitTick+0xd8>)
 800162a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_InitTick+0xd4>)
 800162e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001632:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001634:	4a1c      	ldr	r2, [pc, #112]	@ (80016a8 <HAL_InitTick+0xd4>)
 8001636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001638:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_InitTick+0xd4>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <HAL_InitTick+0xd4>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001646:	4818      	ldr	r0, [pc, #96]	@ (80016a8 <HAL_InitTick+0xd4>)
 8001648:	f006 ff06 	bl	8008458 <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001652:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800165a:	4813      	ldr	r0, [pc, #76]	@ (80016a8 <HAL_InitTick+0xd4>)
 800165c:	f006 ff5e 	bl	800851c <HAL_TIM_Base_Start_IT>
 8001660:	4603      	mov	r3, r0
 8001662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001666:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10e      	bne.n	800168c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d808      	bhi.n	8001686 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	2047      	movs	r0, #71	@ 0x47
 800167a:	f000 fbed 	bl	8001e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800167e:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <HAL_InitTick+0xdc>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e002      	b.n	800168c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800168c:	2047      	movs	r0, #71	@ 0x47
 800168e:	f000 fbfd 	bl	8001e8c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001692:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001696:	4618      	mov	r0, r3
 8001698:	3738      	adds	r7, #56	@ 0x38
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	46020c00 	.word	0x46020c00
 80016a4:	431bde83 	.word	0x431bde83
 80016a8:	20000168 	.word	0x20000168
 80016ac:	40014800 	.word	0x40014800
 80016b0:	2000002c 	.word	0x2000002c

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <NMI_Handler+0x4>

080016bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <MemManage_Handler+0x4>

080016cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <UsageFault_Handler+0x4>

080016dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f98b 	bl	8001a34 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <GPDMA1_Channel0_IRQHandler+0x10>)
 800172a:	f000 fde0 	bl	80022ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200000f0 	.word	0x200000f0

08001738 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <SPI1_IRQHandler+0x10>)
 800173e:	f006 faf7 	bl	8007d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000060 	.word	0x20000060

0800174c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <TIM17_IRQHandler+0x10>)
 8001752:	f006 ff83 	bl	800865c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000168 	.word	0x20000168

08001760 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <SystemInit+0x68>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176a:	4a17      	ldr	r2, [pc, #92]	@ (80017c8 <SystemInit+0x68>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <SystemInit+0x6c>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <SystemInit+0x6c>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <SystemInit+0x6c>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <SystemInit+0x6c>)
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <SystemInit+0x6c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0e      	ldr	r2, [pc, #56]	@ (80017cc <SystemInit+0x6c>)
 8001792:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001796:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800179a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <SystemInit+0x6c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <SystemInit+0x6c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <SystemInit+0x6c>)
 80017a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <SystemInit+0x6c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <SystemInit+0x68>)
 80017b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017ba:	609a      	str	r2, [r3, #8]
  #endif
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	46020c00 	.word	0x46020c00

080017d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001808 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d4:	f7ff ffc4 	bl	8001760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017da:	e003      	b.n	80017e4 <LoopCopyDataInit>

080017dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017e2:	3104      	adds	r1, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017e4:	480a      	ldr	r0, [pc, #40]	@ (8001810 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017ec:	d3f6      	bcc.n	80017dc <CopyDataInit>
	ldr	r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017f0:	e002      	b.n	80017f8 <LoopFillZerobss>

080017f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017f4:	f842 3b04 	str.w	r3, [r2], #4

080017f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <LoopForever+0x16>)
	cmp	r2, r3
 80017fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017fc:	d3f9      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f007 fe0f 	bl	8009420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001802:	f7ff fbab 	bl	8000f5c <main>

08001806 <LoopForever>:

LoopForever:
    b LoopForever
 8001806:	e7fe      	b.n	8001806 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001808:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800180c:	080097bc 	.word	0x080097bc
	ldr	r0, =_sdata
 8001810:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001814:	20000031 	.word	0x20000031
	ldr	r2, =_sbss
 8001818:	20000034 	.word	0x20000034
	ldr	r3, = _ebss
 800181c:	20000258 	.word	0x20000258

08001820 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_IRQHandler>
	...

08001824 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	@ 0x38
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d009      	beq.n	8001850 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <BSP_LED_Init+0x2c>
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d003      	beq.n	8001850 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001848:	f06f 0301 	mvn.w	r3, #1
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
 800184e:	e06e      	b.n	800192e <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d10f      	bne.n	8001876 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001856:	4b38      	ldr	r3, [pc, #224]	@ (8001938 <BSP_LED_Init+0x114>)
 8001858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185c:	4a36      	ldr	r2, [pc, #216]	@ (8001938 <BSP_LED_Init+0x114>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001866:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <BSP_LED_Init+0x114>)
 8001868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	e046      	b.n	8001904 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10f      	bne.n	800189c <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 800187c:	4b2e      	ldr	r3, [pc, #184]	@ (8001938 <BSP_LED_Init+0x114>)
 800187e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001882:	4a2d      	ldr	r2, [pc, #180]	@ (8001938 <BSP_LED_Init+0x114>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <BSP_LED_Init+0x114>)
 800188e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	e033      	b.n	8001904 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189c:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <BSP_LED_Init+0x114>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d110      	bne.n	80018cc <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <BSP_LED_Init+0x114>)
 80018ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b0:	4a21      	ldr	r2, [pc, #132]	@ (8001938 <BSP_LED_Init+0x114>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80018ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <BSP_LED_Init+0x114>)
 80018bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 80018c8:	2301      	movs	r3, #1
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 80018cc:	f001 fdae 	bl	800342c <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 80018d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d107      	bne.n	80018e6 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <BSP_LED_Init+0x114>)
 80018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018dc:	4a16      	ldr	r2, [pc, #88]	@ (8001938 <BSP_LED_Init+0x114>)
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <BSP_LED_Init+0x114>)
 80018e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ec:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <BSP_LED_Init+0x114>)
 80018ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <BSP_LED_Init+0x114>)
 80018f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <BSP_LED_Init+0x118>)
 8001908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <BSP_LED_Init+0x11c>)
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	f107 021c 	add.w	r2, r7, #28
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fa7b 	bl	8002e24 <HAL_GPIO_Init>
  }

  return ret;
 800192e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001930:	4618      	mov	r0, r3
 8001932:	3738      	adds	r7, #56	@ 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	46020c00 	.word	0x46020c00
 800193c:	08009708 	.word	0x08009708
 8001940:	20000014 	.word	0x20000014

08001944 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001954:	4b30      	ldr	r3, [pc, #192]	@ (8001a18 <BSP_PB_Init+0xd4>)
 8001956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800195a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a18 <BSP_PB_Init+0xd4>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001964:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <BSP_PB_Init+0xd4>)
 8001966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001972:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001976:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4a23      	ldr	r2, [pc, #140]	@ (8001a1c <BSP_PB_Init+0xd8>)
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	f107 020c 	add.w	r2, r7, #12
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f001 fa43 	bl	8002e24 <HAL_GPIO_Init>
 800199e:	e036      	b.n	8001a0e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <BSP_PB_Init+0xdc>)
 80019a2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a1c <BSP_PB_Init+0xd8>)
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	f107 020c 	add.w	r2, r7, #12
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fa36 	bl	8002e24 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80019b8:	79fa      	ldrb	r2, [r7, #7]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4a18      	ldr	r2, [pc, #96]	@ (8001a24 <BSP_PB_Init+0xe0>)
 80019c4:	441a      	add	r2, r3
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4917      	ldr	r1, [pc, #92]	@ (8001a28 <BSP_PB_Init+0xe4>)
 80019ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4610      	mov	r0, r2
 80019d2:	f001 f9cb 	bl	8002d6c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80019d6:	79fa      	ldrb	r2, [r7, #7]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4a10      	ldr	r2, [pc, #64]	@ (8001a24 <BSP_PB_Init+0xe0>)
 80019e2:	1898      	adds	r0, r3, r2
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4a11      	ldr	r2, [pc, #68]	@ (8001a2c <BSP_PB_Init+0xe8>)
 80019e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ec:	461a      	mov	r2, r3
 80019ee:	2100      	movs	r1, #0
 80019f0:	f001 f990 	bl	8002d14 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80019f4:	2018      	movs	r0, #24
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <BSP_PB_Init+0xec>)
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	f000 fa29 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a06:	2318      	movs	r3, #24
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fa3f 	bl	8001e8c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	46020c00 	.word	0x46020c00
 8001a1c:	20000020 	.word	0x20000020
 8001a20:	10110000 	.word	0x10110000
 8001a24:	200001b4 	.word	0x200001b4
 8001a28:	08009710 	.word	0x08009710
 8001a2c:	20000024 	.word	0x20000024
 8001a30:	20000028 	.word	0x20000028

08001a34 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <BSP_PB_IRQHandler+0x28>)
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 f9a1 	bl	8002d94 <HAL_EXTI_IRQHandler>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001b4 	.word	0x200001b4

08001a60 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a8e:	f06f 0301 	mvn.w	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e018      	b.n	8001ac8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2294      	movs	r2, #148	@ 0x94
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <BSP_COM_Init+0x5c>)
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f854 	bl	8001b50 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2294      	movs	r2, #148	@ 0x94
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <BSP_COM_Init+0x5c>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f80e 	bl	8001ad8 <MX_USART1_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ac2:	f06f 0303 	mvn.w	r3, #3
 8001ac6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001c0 	.word	0x200001c0

08001ad8 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <MX_USART1_Init+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	220c      	movs	r2, #12
 8001af6:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	895b      	ldrh	r3, [r3, #10]
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	891b      	ldrh	r3, [r3, #8]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	899b      	ldrh	r3, [r3, #12]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b24:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f007 f853 	bl	8008bd8 <HAL_UART_Init>
 8001b32:	4603      	mov	r3, r0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000010 	.word	0x20000010

08001b40 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff ff8b 	bl	8001a60 <BSP_PB_Callback>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b5e:	4a26      	ldr	r2, [pc, #152]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b68:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001b76:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b94:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b9a:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ba4:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <COM1_MspInit+0xa8>)
 8001ba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bb6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480b      	ldr	r0, [pc, #44]	@ (8001bfc <COM1_MspInit+0xac>)
 8001bd0:	f001 f928 	bl	8002e24 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001bde:	2307      	movs	r3, #7
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <COM1_MspInit+0xac>)
 8001bea:	f001 f91b 	bl	8002e24 <HAL_GPIO_Init>
}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	@ 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	46020c00 	.word	0x46020c00
 8001bfc:	42020000 	.word	0x42020000

08001c00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_Init+0x50>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <HAL_Init+0x50>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f916 	bl	8001e42 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c16:	f002 fcf7 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_Init+0x54>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <HAL_Init+0x58>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <HAL_Init+0x5c>)
 8001c2e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c30:	2004      	movs	r0, #4
 8001c32:	f000 f939 	bl	8001ea8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c36:	2007      	movs	r0, #7
 8001c38:	f7ff fccc 	bl	80015d4 <HAL_InitTick>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e002      	b.n	8001c4c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c46:	f7ff fbef 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40022000 	.word	0x40022000
 8001c54:	46020c00 	.word	0x46020c00
 8001c58:	080096b0 	.word	0x080096b0
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000030 	.word	0x20000030
 8001c84:	20000254 	.word	0x20000254

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000254 	.word	0x20000254

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000030 	.word	0x20000030

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	@ (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ff4c 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e66:	f7ff ff63 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001e6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	6978      	ldr	r0, [r7, #20]
 8001e72:	f7ff ffb3 	bl	8001ddc <NVIC_EncodePriority>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff82 	bl	8001d88 <__NVIC_SetPriority>
}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff56 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d844      	bhi.n	8001f40 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ebc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001edf 	.word	0x08001edf
 8001ec0:	08001efd 	.word	0x08001efd
 8001ec4:	08001f1f 	.word	0x08001f1f
 8001ec8:	08001f41 	.word	0x08001f41
 8001ecc:	08001ed1 	.word	0x08001ed1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6013      	str	r3, [r2, #0]
      break;
 8001edc:	e031      	b.n	8001f42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ede:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef0:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ef2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001efa:	e022      	b.n	8001f42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f12:	4a10      	ldr	r2, [pc, #64]	@ (8001f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f1c:	e011      	b.n	8001f42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a0b      	ldr	r2, [pc, #44]	@ (8001f50 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f30:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001f34:	4a07      	ldr	r2, [pc, #28]	@ (8001f54 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001f3e:	e000      	b.n	8001f42 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f40:	bf00      	nop
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e010 	.word	0xe000e010
 8001f54:	46020c00 	.word	0x46020c00

08001f58 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff fe92 	bl	8001c88 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0f0      	b.n	8002152 <HAL_DMA_Init+0x1fa>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a79      	ldr	r2, [pc, #484]	@ (800215c <HAL_DMA_Init+0x204>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	f000 809f 	beq.w	80020ba <HAL_DMA_Init+0x162>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a77      	ldr	r2, [pc, #476]	@ (8002160 <HAL_DMA_Init+0x208>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	f000 8099 	beq.w	80020ba <HAL_DMA_Init+0x162>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a75      	ldr	r2, [pc, #468]	@ (8002164 <HAL_DMA_Init+0x20c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	f000 8093 	beq.w	80020ba <HAL_DMA_Init+0x162>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a73      	ldr	r2, [pc, #460]	@ (8002168 <HAL_DMA_Init+0x210>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	f000 808d 	beq.w	80020ba <HAL_DMA_Init+0x162>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a71      	ldr	r2, [pc, #452]	@ (800216c <HAL_DMA_Init+0x214>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	f000 8087 	beq.w	80020ba <HAL_DMA_Init+0x162>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6f      	ldr	r2, [pc, #444]	@ (8002170 <HAL_DMA_Init+0x218>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	f000 8081 	beq.w	80020ba <HAL_DMA_Init+0x162>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6d      	ldr	r2, [pc, #436]	@ (8002174 <HAL_DMA_Init+0x21c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d07b      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6c      	ldr	r2, [pc, #432]	@ (8002178 <HAL_DMA_Init+0x220>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d076      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6a      	ldr	r2, [pc, #424]	@ (800217c <HAL_DMA_Init+0x224>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d071      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a69      	ldr	r2, [pc, #420]	@ (8002180 <HAL_DMA_Init+0x228>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d06c      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a67      	ldr	r2, [pc, #412]	@ (8002184 <HAL_DMA_Init+0x22c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d067      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a66      	ldr	r2, [pc, #408]	@ (8002188 <HAL_DMA_Init+0x230>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d062      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a64      	ldr	r2, [pc, #400]	@ (800218c <HAL_DMA_Init+0x234>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d05d      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a63      	ldr	r2, [pc, #396]	@ (8002190 <HAL_DMA_Init+0x238>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d058      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a61      	ldr	r2, [pc, #388]	@ (8002194 <HAL_DMA_Init+0x23c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d053      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a60      	ldr	r2, [pc, #384]	@ (8002198 <HAL_DMA_Init+0x240>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04e      	beq.n	80020ba <HAL_DMA_Init+0x162>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5e      	ldr	r2, [pc, #376]	@ (800219c <HAL_DMA_Init+0x244>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d049      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5d      	ldr	r2, [pc, #372]	@ (80021a0 <HAL_DMA_Init+0x248>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d044      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5b      	ldr	r2, [pc, #364]	@ (80021a4 <HAL_DMA_Init+0x24c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d03f      	beq.n	80020ba <HAL_DMA_Init+0x162>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a5a      	ldr	r2, [pc, #360]	@ (80021a8 <HAL_DMA_Init+0x250>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d03a      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a58      	ldr	r2, [pc, #352]	@ (80021ac <HAL_DMA_Init+0x254>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d035      	beq.n	80020ba <HAL_DMA_Init+0x162>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a57      	ldr	r2, [pc, #348]	@ (80021b0 <HAL_DMA_Init+0x258>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d030      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a55      	ldr	r2, [pc, #340]	@ (80021b4 <HAL_DMA_Init+0x25c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02b      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a54      	ldr	r2, [pc, #336]	@ (80021b8 <HAL_DMA_Init+0x260>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d026      	beq.n	80020ba <HAL_DMA_Init+0x162>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a52      	ldr	r2, [pc, #328]	@ (80021bc <HAL_DMA_Init+0x264>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d021      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a51      	ldr	r2, [pc, #324]	@ (80021c0 <HAL_DMA_Init+0x268>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d01c      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a4f      	ldr	r2, [pc, #316]	@ (80021c4 <HAL_DMA_Init+0x26c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d017      	beq.n	80020ba <HAL_DMA_Init+0x162>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a4e      	ldr	r2, [pc, #312]	@ (80021c8 <HAL_DMA_Init+0x270>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d012      	beq.n	80020ba <HAL_DMA_Init+0x162>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a4c      	ldr	r2, [pc, #304]	@ (80021cc <HAL_DMA_Init+0x274>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_DMA_Init+0x162>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4b      	ldr	r2, [pc, #300]	@ (80021d0 <HAL_DMA_Init+0x278>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d008      	beq.n	80020ba <HAL_DMA_Init+0x162>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a49      	ldr	r2, [pc, #292]	@ (80021d4 <HAL_DMA_Init+0x27c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d003      	beq.n	80020ba <HAL_DMA_Init+0x162>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a48      	ldr	r2, [pc, #288]	@ (80021d8 <HAL_DMA_Init+0x280>)
 80020b8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10e      	bne.n	80020ec <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0206 	orr.w	r2, r2, #6
 8002102:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002104:	e00f      	b.n	8002126 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002106:	f7ff fdbf 	bl	8001c88 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b05      	cmp	r3, #5
 8002112:	d908      	bls.n	8002126 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2210      	movs	r2, #16
 8002118:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2203      	movs	r2, #3
 800211e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e015      	b.n	8002152 <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e8      	bne.n	8002106 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 faa9 	bl	800268c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40020050 	.word	0x40020050
 8002160:	50020050 	.word	0x50020050
 8002164:	400200d0 	.word	0x400200d0
 8002168:	500200d0 	.word	0x500200d0
 800216c:	40020150 	.word	0x40020150
 8002170:	50020150 	.word	0x50020150
 8002174:	400201d0 	.word	0x400201d0
 8002178:	500201d0 	.word	0x500201d0
 800217c:	40020250 	.word	0x40020250
 8002180:	50020250 	.word	0x50020250
 8002184:	400202d0 	.word	0x400202d0
 8002188:	500202d0 	.word	0x500202d0
 800218c:	40020350 	.word	0x40020350
 8002190:	50020350 	.word	0x50020350
 8002194:	400203d0 	.word	0x400203d0
 8002198:	500203d0 	.word	0x500203d0
 800219c:	40020450 	.word	0x40020450
 80021a0:	50020450 	.word	0x50020450
 80021a4:	400204d0 	.word	0x400204d0
 80021a8:	500204d0 	.word	0x500204d0
 80021ac:	40020550 	.word	0x40020550
 80021b0:	50020550 	.word	0x50020550
 80021b4:	400205d0 	.word	0x400205d0
 80021b8:	500205d0 	.word	0x500205d0
 80021bc:	40020650 	.word	0x40020650
 80021c0:	50020650 	.word	0x50020650
 80021c4:	400206d0 	.word	0x400206d0
 80021c8:	500206d0 	.word	0x500206d0
 80021cc:	40020750 	.word	0x40020750
 80021d0:	50020750 	.word	0x50020750
 80021d4:	400207d0 	.word	0x400207d0
 80021d8:	500207d0 	.word	0x500207d0

080021dc <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e04f      	b.n	8002294 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_DMA_Start_IT+0x26>
 80021fe:	2302      	movs	r3, #2
 8002200:	e048      	b.n	8002294 <HAL_DMA_Start_IT+0xb8>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d136      	bne.n	8002284 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fa08 	bl	8002640 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800223e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002256:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800226e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	e007      	b.n	8002294 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2240      	movs	r2, #64	@ 0x40
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e019      	b.n	80022e2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d004      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e00e      	b.n	80022e2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2204      	movs	r2, #4
 80022c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80022fe:	f023 030f 	bic.w	r3, r3, #15
 8002302:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	3b50      	subs	r3, #80	@ 0x50
 800230e:	09db      	lsrs	r3, r3, #7
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2201      	movs	r2, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 813b 	beq.w	80025a4 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d011      	beq.n	8002360 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002352:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800236a:	2b00      	cmp	r3, #0
 800236c:	d011      	beq.n	8002392 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002384:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	f043 0202 	orr.w	r2, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d011      	beq.n	80023c4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023b6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	f043 0204 	orr.w	r2, r3, #4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d011      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023e8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f043 0208 	orr.w	r2, r3, #8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800241a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d04c      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d045      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002450:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b04      	cmp	r3, #4
 800245c:	d12e      	bne.n	80024bc <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800246c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0202 	orr.w	r2, r2, #2
 800247c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800248a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002496:	2201      	movs	r2, #1
 8002498:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d07a      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
        }

        return;
 80024ba:	e075      	b.n	80025a8 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2205      	movs	r2, #5
 80024c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d039      	beq.n	8002556 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d032      	beq.n	8002556 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d012      	beq.n	8002522 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d116      	bne.n	8002534 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d111      	bne.n	8002534 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800251c:	2201      	movs	r2, #1
 800251e:	731a      	strb	r2, [r3, #12]
 8002520:	e008      	b.n	8002534 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800253c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	2b00      	cmp	r3, #0
 800255c:	d025      	beq.n	80025aa <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0202 	orr.w	r2, r2, #2
 800256c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002586:	2201      	movs	r2, #1
 8002588:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e002      	b.n	80025aa <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80025a4:	bf00      	nop
 80025a6:	e000      	b.n	80025aa <HAL_DMA_IRQHandler+0x2bc>
        return;
 80025a8:	bf00      	nop
    }
  }
}
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e02b      	b.n	8002634 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80025e4:	f023 030f 	bic.w	r3, r3, #15
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	3b50      	subs	r3, #80	@ 0x50
 80025f4:	09db      	lsrs	r3, r3, #7
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	2201      	movs	r2, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d012      	beq.n	8002632 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f003 0311 	and.w	r3, r3, #17
 8002612:	2b11      	cmp	r3, #17
 8002614:	d106      	bne.n	8002624 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	e006      	b.n	8002632 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	43db      	mvns	r3, r3
 800262c:	401a      	ands	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b291      	uxth	r1, r2
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800266c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a53      	ldr	r2, [pc, #332]	@ (8002818 <DMA_Init+0x18c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	f000 80a0 	beq.w	8002812 <DMA_Init+0x186>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a51      	ldr	r2, [pc, #324]	@ (800281c <DMA_Init+0x190>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f000 809a 	beq.w	8002812 <DMA_Init+0x186>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002820 <DMA_Init+0x194>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	f000 8094 	beq.w	8002812 <DMA_Init+0x186>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002824 <DMA_Init+0x198>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	f000 808e 	beq.w	8002812 <DMA_Init+0x186>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002828 <DMA_Init+0x19c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	f000 8088 	beq.w	8002812 <DMA_Init+0x186>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a49      	ldr	r2, [pc, #292]	@ (800282c <DMA_Init+0x1a0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	f000 8082 	beq.w	8002812 <DMA_Init+0x186>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a47      	ldr	r2, [pc, #284]	@ (8002830 <DMA_Init+0x1a4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d07c      	beq.n	8002812 <DMA_Init+0x186>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a45      	ldr	r2, [pc, #276]	@ (8002834 <DMA_Init+0x1a8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d077      	beq.n	8002812 <DMA_Init+0x186>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a44      	ldr	r2, [pc, #272]	@ (8002838 <DMA_Init+0x1ac>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d072      	beq.n	8002812 <DMA_Init+0x186>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a42      	ldr	r2, [pc, #264]	@ (800283c <DMA_Init+0x1b0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d06d      	beq.n	8002812 <DMA_Init+0x186>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a41      	ldr	r2, [pc, #260]	@ (8002840 <DMA_Init+0x1b4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d068      	beq.n	8002812 <DMA_Init+0x186>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3f      	ldr	r2, [pc, #252]	@ (8002844 <DMA_Init+0x1b8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d063      	beq.n	8002812 <DMA_Init+0x186>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3e      	ldr	r2, [pc, #248]	@ (8002848 <DMA_Init+0x1bc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d05e      	beq.n	8002812 <DMA_Init+0x186>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3c      	ldr	r2, [pc, #240]	@ (800284c <DMA_Init+0x1c0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d059      	beq.n	8002812 <DMA_Init+0x186>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3b      	ldr	r2, [pc, #236]	@ (8002850 <DMA_Init+0x1c4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d054      	beq.n	8002812 <DMA_Init+0x186>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a39      	ldr	r2, [pc, #228]	@ (8002854 <DMA_Init+0x1c8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d04f      	beq.n	8002812 <DMA_Init+0x186>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a38      	ldr	r2, [pc, #224]	@ (8002858 <DMA_Init+0x1cc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d04a      	beq.n	8002812 <DMA_Init+0x186>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a36      	ldr	r2, [pc, #216]	@ (800285c <DMA_Init+0x1d0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d045      	beq.n	8002812 <DMA_Init+0x186>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a35      	ldr	r2, [pc, #212]	@ (8002860 <DMA_Init+0x1d4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d040      	beq.n	8002812 <DMA_Init+0x186>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a33      	ldr	r2, [pc, #204]	@ (8002864 <DMA_Init+0x1d8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d03b      	beq.n	8002812 <DMA_Init+0x186>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a32      	ldr	r2, [pc, #200]	@ (8002868 <DMA_Init+0x1dc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d036      	beq.n	8002812 <DMA_Init+0x186>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a30      	ldr	r2, [pc, #192]	@ (800286c <DMA_Init+0x1e0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d031      	beq.n	8002812 <DMA_Init+0x186>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002870 <DMA_Init+0x1e4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d02c      	beq.n	8002812 <DMA_Init+0x186>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002874 <DMA_Init+0x1e8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d027      	beq.n	8002812 <DMA_Init+0x186>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <DMA_Init+0x1ec>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <DMA_Init+0x186>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2a      	ldr	r2, [pc, #168]	@ (800287c <DMA_Init+0x1f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01d      	beq.n	8002812 <DMA_Init+0x186>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a29      	ldr	r2, [pc, #164]	@ (8002880 <DMA_Init+0x1f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d018      	beq.n	8002812 <DMA_Init+0x186>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <DMA_Init+0x1f8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <DMA_Init+0x186>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a26      	ldr	r2, [pc, #152]	@ (8002888 <DMA_Init+0x1fc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00e      	beq.n	8002812 <DMA_Init+0x186>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a24      	ldr	r2, [pc, #144]	@ (800288c <DMA_Init+0x200>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d009      	beq.n	8002812 <DMA_Init+0x186>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a23      	ldr	r2, [pc, #140]	@ (8002890 <DMA_Init+0x204>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <DMA_Init+0x186>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a21      	ldr	r2, [pc, #132]	@ (8002894 <DMA_Init+0x208>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d142      	bne.n	8002898 <DMA_Init+0x20c>
 8002812:	2301      	movs	r3, #1
 8002814:	e041      	b.n	800289a <DMA_Init+0x20e>
 8002816:	bf00      	nop
 8002818:	40020050 	.word	0x40020050
 800281c:	50020050 	.word	0x50020050
 8002820:	400200d0 	.word	0x400200d0
 8002824:	500200d0 	.word	0x500200d0
 8002828:	40020150 	.word	0x40020150
 800282c:	50020150 	.word	0x50020150
 8002830:	400201d0 	.word	0x400201d0
 8002834:	500201d0 	.word	0x500201d0
 8002838:	40020250 	.word	0x40020250
 800283c:	50020250 	.word	0x50020250
 8002840:	400202d0 	.word	0x400202d0
 8002844:	500202d0 	.word	0x500202d0
 8002848:	40020350 	.word	0x40020350
 800284c:	50020350 	.word	0x50020350
 8002850:	400203d0 	.word	0x400203d0
 8002854:	500203d0 	.word	0x500203d0
 8002858:	40020450 	.word	0x40020450
 800285c:	50020450 	.word	0x50020450
 8002860:	400204d0 	.word	0x400204d0
 8002864:	500204d0 	.word	0x500204d0
 8002868:	40020550 	.word	0x40020550
 800286c:	50020550 	.word	0x50020550
 8002870:	400205d0 	.word	0x400205d0
 8002874:	500205d0 	.word	0x500205d0
 8002878:	40020650 	.word	0x40020650
 800287c:	50020650 	.word	0x50020650
 8002880:	400206d0 	.word	0x400206d0
 8002884:	500206d0 	.word	0x500206d0
 8002888:	40020750 	.word	0x40020750
 800288c:	50020750 	.word	0x50020750
 8002890:	400207d0 	.word	0x400207d0
 8002894:	500207d0 	.word	0x500207d0
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	3b01      	subs	r3, #1
 80028a8:	051b      	lsls	r3, r3, #20
 80028aa:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80028ae:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	3b01      	subs	r3, #1
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80028bc:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f6:	f040 80b0 	bne.w	8002a5a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a82      	ldr	r2, [pc, #520]	@ (8002b08 <DMA_Init+0x47c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f000 80a0 	beq.w	8002a46 <DMA_Init+0x3ba>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a80      	ldr	r2, [pc, #512]	@ (8002b0c <DMA_Init+0x480>)
 800290c:	4293      	cmp	r3, r2
 800290e:	f000 809a 	beq.w	8002a46 <DMA_Init+0x3ba>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7e      	ldr	r2, [pc, #504]	@ (8002b10 <DMA_Init+0x484>)
 8002918:	4293      	cmp	r3, r2
 800291a:	f000 8094 	beq.w	8002a46 <DMA_Init+0x3ba>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7c      	ldr	r2, [pc, #496]	@ (8002b14 <DMA_Init+0x488>)
 8002924:	4293      	cmp	r3, r2
 8002926:	f000 808e 	beq.w	8002a46 <DMA_Init+0x3ba>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7a      	ldr	r2, [pc, #488]	@ (8002b18 <DMA_Init+0x48c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	f000 8088 	beq.w	8002a46 <DMA_Init+0x3ba>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a78      	ldr	r2, [pc, #480]	@ (8002b1c <DMA_Init+0x490>)
 800293c:	4293      	cmp	r3, r2
 800293e:	f000 8082 	beq.w	8002a46 <DMA_Init+0x3ba>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a76      	ldr	r2, [pc, #472]	@ (8002b20 <DMA_Init+0x494>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d07c      	beq.n	8002a46 <DMA_Init+0x3ba>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a74      	ldr	r2, [pc, #464]	@ (8002b24 <DMA_Init+0x498>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d077      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a73      	ldr	r2, [pc, #460]	@ (8002b28 <DMA_Init+0x49c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d072      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a71      	ldr	r2, [pc, #452]	@ (8002b2c <DMA_Init+0x4a0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d06d      	beq.n	8002a46 <DMA_Init+0x3ba>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a70      	ldr	r2, [pc, #448]	@ (8002b30 <DMA_Init+0x4a4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d068      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a6e      	ldr	r2, [pc, #440]	@ (8002b34 <DMA_Init+0x4a8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d063      	beq.n	8002a46 <DMA_Init+0x3ba>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a6d      	ldr	r2, [pc, #436]	@ (8002b38 <DMA_Init+0x4ac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d05e      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a6b      	ldr	r2, [pc, #428]	@ (8002b3c <DMA_Init+0x4b0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d059      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6a      	ldr	r2, [pc, #424]	@ (8002b40 <DMA_Init+0x4b4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d054      	beq.n	8002a46 <DMA_Init+0x3ba>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a68      	ldr	r2, [pc, #416]	@ (8002b44 <DMA_Init+0x4b8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d04f      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a67      	ldr	r2, [pc, #412]	@ (8002b48 <DMA_Init+0x4bc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d04a      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a65      	ldr	r2, [pc, #404]	@ (8002b4c <DMA_Init+0x4c0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d045      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a64      	ldr	r2, [pc, #400]	@ (8002b50 <DMA_Init+0x4c4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d040      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a62      	ldr	r2, [pc, #392]	@ (8002b54 <DMA_Init+0x4c8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d03b      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a61      	ldr	r2, [pc, #388]	@ (8002b58 <DMA_Init+0x4cc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d036      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a5f      	ldr	r2, [pc, #380]	@ (8002b5c <DMA_Init+0x4d0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d031      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b60 <DMA_Init+0x4d4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d02c      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002b64 <DMA_Init+0x4d8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d027      	beq.n	8002a46 <DMA_Init+0x3ba>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002b68 <DMA_Init+0x4dc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a59      	ldr	r2, [pc, #356]	@ (8002b6c <DMA_Init+0x4e0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a58      	ldr	r2, [pc, #352]	@ (8002b70 <DMA_Init+0x4e4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d018      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a56      	ldr	r2, [pc, #344]	@ (8002b74 <DMA_Init+0x4e8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a55      	ldr	r2, [pc, #340]	@ (8002b78 <DMA_Init+0x4ec>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a53      	ldr	r2, [pc, #332]	@ (8002b7c <DMA_Init+0x4f0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d009      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a52      	ldr	r2, [pc, #328]	@ (8002b80 <DMA_Init+0x4f4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <DMA_Init+0x3ba>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a50      	ldr	r2, [pc, #320]	@ (8002b84 <DMA_Init+0x4f8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <DMA_Init+0x3be>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <DMA_Init+0x3c0>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e008      	b.n	8002a6c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a62:	d103      	bne.n	8002a6c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a6a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a72:	4b45      	ldr	r3, [pc, #276]	@ (8002b88 <DMA_Init+0x4fc>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a36      	ldr	r2, [pc, #216]	@ (8002b68 <DMA_Init+0x4dc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d022      	beq.n	8002ad8 <DMA_Init+0x44c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a35      	ldr	r2, [pc, #212]	@ (8002b6c <DMA_Init+0x4e0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d01d      	beq.n	8002ad8 <DMA_Init+0x44c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a33      	ldr	r2, [pc, #204]	@ (8002b70 <DMA_Init+0x4e4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d018      	beq.n	8002ad8 <DMA_Init+0x44c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a32      	ldr	r2, [pc, #200]	@ (8002b74 <DMA_Init+0x4e8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d013      	beq.n	8002ad8 <DMA_Init+0x44c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	@ (8002b78 <DMA_Init+0x4ec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00e      	beq.n	8002ad8 <DMA_Init+0x44c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2f      	ldr	r2, [pc, #188]	@ (8002b7c <DMA_Init+0x4f0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <DMA_Init+0x44c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8002b80 <DMA_Init+0x4f4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <DMA_Init+0x44c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b84 <DMA_Init+0x4f8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d101      	bne.n	8002adc <DMA_Init+0x450>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <DMA_Init+0x452>
 8002adc:	2300      	movs	r3, #0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40020050 	.word	0x40020050
 8002b0c:	50020050 	.word	0x50020050
 8002b10:	400200d0 	.word	0x400200d0
 8002b14:	500200d0 	.word	0x500200d0
 8002b18:	40020150 	.word	0x40020150
 8002b1c:	50020150 	.word	0x50020150
 8002b20:	400201d0 	.word	0x400201d0
 8002b24:	500201d0 	.word	0x500201d0
 8002b28:	40020250 	.word	0x40020250
 8002b2c:	50020250 	.word	0x50020250
 8002b30:	400202d0 	.word	0x400202d0
 8002b34:	500202d0 	.word	0x500202d0
 8002b38:	40020350 	.word	0x40020350
 8002b3c:	50020350 	.word	0x50020350
 8002b40:	400203d0 	.word	0x400203d0
 8002b44:	500203d0 	.word	0x500203d0
 8002b48:	40020450 	.word	0x40020450
 8002b4c:	50020450 	.word	0x50020450
 8002b50:	400204d0 	.word	0x400204d0
 8002b54:	500204d0 	.word	0x500204d0
 8002b58:	40020550 	.word	0x40020550
 8002b5c:	50020550 	.word	0x50020550
 8002b60:	400205d0 	.word	0x400205d0
 8002b64:	500205d0 	.word	0x500205d0
 8002b68:	40020650 	.word	0x40020650
 8002b6c:	50020650 	.word	0x50020650
 8002b70:	400206d0 	.word	0x400206d0
 8002b74:	500206d0 	.word	0x500206d0
 8002b78:	40020750 	.word	0x40020750
 8002b7c:	50020750 	.word	0x50020750
 8002b80:	400207d0 	.word	0x400207d0
 8002b84:	500207d0 	.word	0x500207d0
 8002b88:	3cc03180 	.word	0x3cc03180

08002b8c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_DMAEx_List_Start_IT+0x16>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e082      	b.n	8002cac <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bac:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d005      	beq.n	8002bcc <HAL_DMAEx_List_Start_IT+0x40>
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d16a      	bne.n	8002c9c <HAL_DMAEx_List_Start_IT+0x110>
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d067      	beq.n	8002c9c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d157      	bne.n	8002c88 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_DMAEx_List_Start_IT+0x5a>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e062      	b.n	8002cac <HAL_DMAEx_List_Start_IT+0x120>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002c1a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c32:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c4a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f107 010c 	add.w	r1, r7, #12
 8002c56:	2200      	movs	r2, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f82b 	bl	8002cb4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	0c0b      	lsrs	r3, r1, #16
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e007      	b.n	8002cac <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2240      	movs	r2, #64	@ 0x40
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00c      	beq.n	8002ce6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <DMA_List_GetCLLRNodeInfo+0x58>)
 8002cd6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00f      	beq.n	8002cfe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002ce4:	e00b      	b.n	8002cfe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4a08      	ldr	r2, [pc, #32]	@ (8002d10 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002cf0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2205      	movs	r2, #5
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	fe010000 	.word	0xfe010000
 8002d10:	f8010000 	.word	0xf8010000

08002d14 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002d26:	7afb      	ldrb	r3, [r7, #11]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d011      	beq.n	8002d50 <HAL_EXTI_RegisterCallback+0x3c>
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	dc13      	bgt.n	8002d58 <HAL_EXTI_RegisterCallback+0x44>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_EXTI_RegisterCallback+0x26>
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d007      	beq.n	8002d48 <HAL_EXTI_RegisterCallback+0x34>
 8002d38:	e00e      	b.n	8002d58 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]
      break;
 8002d46:	e00a      	b.n	8002d5e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	605a      	str	r2, [r3, #4]
      break;
 8002d4e:	e006      	b.n	8002d5e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]
      break;
 8002d56:	e002      	b.n	8002d5e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5c:	bf00      	nop
  }

  return status;
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e003      	b.n	8002d88 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
  }
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2201      	movs	r2, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <HAL_EXTI_IRQHandler+0x88>)
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <HAL_EXTI_IRQHandler+0x8c>)
 8002dec:	4413      	add	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4798      	blx	r3
    }
  }
}
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	4602200c 	.word	0x4602200c
 8002e20:	46022010 	.word	0x46022010

08002e24 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	@ 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e36:	e1c2      	b.n	80031be <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	4013      	ands	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 81b2 	beq.w	80031b8 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a55      	ldr	r2, [pc, #340]	@ (8002fac <HAL_GPIO_Init+0x188>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d15d      	bne.n	8002f18 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002e62:	2201      	movs	r2, #1
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0201 	and.w	r2, r3, #1
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002e8c:	4a48      	ldr	r2, [pc, #288]	@ (8002fb0 <HAL_GPIO_Init+0x18c>)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e94:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002e96:	4a46      	ldr	r2, [pc, #280]	@ (8002fb0 <HAL_GPIO_Init+0x18c>)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	08da      	lsrs	r2, r3, #3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3208      	adds	r2, #8
 8002eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	220f      	movs	r2, #15
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	220b      	movs	r2, #11
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	69f9      	ldr	r1, [r7, #28]
 8002ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2202      	movs	r2, #2
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e067      	b.n	8002fe8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x104>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d145      	bne.n	8002fb4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	69f9      	ldr	r1, [r7, #28]
 8002f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	2203      	movs	r2, #3
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0203 	and.w	r2, r3, #3
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e01e      	b.n	8002fe8 <HAL_GPIO_Init+0x1c4>
 8002faa:	bf00      	nop
 8002fac:	46020000 	.word	0x46020000
 8002fb0:	08009714 	.word	0x08009714
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0203 	and.w	r2, r3, #3
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d00b      	beq.n	8003008 <HAL_GPIO_Init+0x1e4>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d007      	beq.n	8003008 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ffc:	2b11      	cmp	r3, #17
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b12      	cmp	r3, #18
 8003006:	d130      	bne.n	800306a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	4013      	ands	r3, r2
 800301e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	4313      	orrs	r3, r2
 8003030:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800303e:	2201      	movs	r2, #1
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	4013      	ands	r3, r2
 800304c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 0201 	and.w	r2, r3, #1
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	4313      	orrs	r3, r2
 8003062:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d107      	bne.n	8003082 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8003076:	2b03      	cmp	r3, #3
 8003078:	d11b      	bne.n	80030b2 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d017      	beq.n	80030b2 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	4013      	ands	r3, r2
 8003098:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d07c      	beq.n	80031b8 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80030be:	4a47      	ldr	r2, [pc, #284]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3318      	adds	r3, #24
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	4013      	ands	r3, r2
 80030e0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0a9a      	lsrs	r2, r3, #10
 80030e6:	4b3e      	ldr	r3, [pc, #248]	@ (80031e0 <HAL_GPIO_Init+0x3bc>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	f002 0203 	and.w	r2, r2, #3
 80030f0:	00d2      	lsls	r2, r2, #3
 80030f2:	4093      	lsls	r3, r2
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80030fa:	4938      	ldr	r1, [pc, #224]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3318      	adds	r3, #24
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003108:	4b34      	ldr	r3, [pc, #208]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43db      	mvns	r3, r3
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	4013      	ands	r3, r2
 8003116:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800312c:	4a2b      	ldr	r2, [pc, #172]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003132:	4b2a      	ldr	r3, [pc, #168]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	4013      	ands	r3, r2
 8003140:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003156:	4a21      	ldr	r2, [pc, #132]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800315c:	4b1f      	ldr	r3, [pc, #124]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003162:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	43db      	mvns	r3, r3
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	4013      	ands	r3, r2
 800316c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003182:	4a16      	ldr	r2, [pc, #88]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800318a:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 800318c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003190:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	4013      	ands	r3, r2
 800319a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80031b0:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <HAL_GPIO_Init+0x3b8>)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f47f ae35 	bne.w	8002e38 <HAL_GPIO_Init+0x14>
  }
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	3724      	adds	r7, #36	@ 0x24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	46022000 	.word	0x46022000
 80031e0:	002f7f7f 	.word	0x002f7f7f

080031e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
 80031f0:	4613      	mov	r3, r2
 80031f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f4:	787b      	ldrb	r3, [r7, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003200:	e002      	b.n	8003208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e007      	b.n	8003242 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003232:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0204 	bic.w	r2, r3, #4
 800323a:	4905      	ldr	r1, [pc, #20]	@ (8003250 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40030400 	.word	0x40030400

08003254 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_ICACHE_Enable+0x1c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_ICACHE_Enable+0x1c>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40030400 	.word	0x40030400

08003274 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800327c:	4b39      	ldr	r3, [pc, #228]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003284:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	429a      	cmp	r2, r3
 800328c:	d10b      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003294:	d905      	bls.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003296:	4b33      	ldr	r3, [pc, #204]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4a32      	ldr	r2, [pc, #200]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032a0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e057      	b.n	8003356 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ac:	d90a      	bls.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80032ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032c0:	60d3      	str	r3, [r2, #12]
 80032c2:	e007      	b.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80032cc:	4925      	ldr	r1, [pc, #148]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80032d4:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a24      	ldr	r2, [pc, #144]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	2232      	movs	r2, #50	@ 0x32
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	4a21      	ldr	r2, [pc, #132]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	3301      	adds	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80032f2:	e002      	b.n	80032fa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80032fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f3      	bne.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01b      	beq.n	800334a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003312:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a15      	ldr	r2, [pc, #84]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	099b      	lsrs	r3, r3, #6
 800331e:	2232      	movs	r2, #50	@ 0x32
 8003320:	fb02 f303 	mul.w	r3, r2, r3
 8003324:	4a11      	ldr	r2, [pc, #68]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	3301      	adds	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003330:	e002      	b.n	8003338 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3b01      	subs	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003338:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f3      	bne.n	8003332 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e000      	b.n	8003356 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	46020800 	.word	0x46020800
 8003368:	2000000c 	.word	0x2000000c
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <HAL_PWREx_GetVoltageRange+0x18>)
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	46020800 	.word	0x46020800

0800338c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003394:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <HAL_PWREx_ConfigSupply+0x94>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a22      	ldr	r2, [pc, #136]	@ (8003424 <HAL_PWREx_ConfigSupply+0x98>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	2232      	movs	r2, #50	@ 0x32
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003424 <HAL_PWREx_ConfigSupply+0x98>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	099b      	lsrs	r3, r3, #6
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80033b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_PWREx_ConfigSupply+0x9c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003428 <HAL_PWREx_ConfigSupply+0x9c>)
 80033be:	f023 0302 	bic.w	r3, r3, #2
 80033c2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80033c4:	e002      	b.n	80033cc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80033cc:	4b16      	ldr	r3, [pc, #88]	@ (8003428 <HAL_PWREx_ConfigSupply+0x9c>)
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d116      	bne.n	8003406 <HAL_PWREx_ConfigSupply+0x7a>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f3      	bne.n	80033c6 <HAL_PWREx_ConfigSupply+0x3a>
 80033de:	e012      	b.n	8003406 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_PWREx_ConfigSupply+0x9c>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a10      	ldr	r2, [pc, #64]	@ (8003428 <HAL_PWREx_ConfigSupply+0x9c>)
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80033ec:	e002      	b.n	80033f4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <HAL_PWREx_ConfigSupply+0x9c>)
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <HAL_PWREx_ConfigSupply+0x7a>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f3      	bne.n	80033ee <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e000      	b.n	8003412 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	2000000c 	.word	0x2000000c
 8003424:	10624dd3 	.word	0x10624dd3
 8003428:	46020800 	.word	0x46020800

0800342c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003436:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800343a:	6113      	str	r3, [r2, #16]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	46020800 	.word	0x46020800

0800344c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003450:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	46020800 	.word	0x46020800

0800346c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	@ 0x38
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003474:	2300      	movs	r3, #0
 8003476:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f000 bec8 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003486:	4b99      	ldr	r3, [pc, #612]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003490:	4b96      	ldr	r3, [pc, #600]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 816c 	beq.w	8003780 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_RCC_OscConfig+0x52>
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	f040 80de 	bne.w	8003672 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 80da 	bne.w	8003672 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f000 bea5 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d0:	4b86      	ldr	r3, [pc, #536]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <HAL_RCC_OscConfig+0x7a>
 80034dc:	4b83      	ldr	r3, [pc, #524]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80034e4:	e005      	b.n	80034f2 <HAL_RCC_OscConfig+0x86>
 80034e6:	4b81      	ldr	r3, [pc, #516]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80034e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d255      	bcs.n	80035a2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	4618      	mov	r0, r3
 8003502:	f001 fa11 	bl	8004928 <RCC_SetFlashLatencyFromMSIRange>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	f000 be82 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003512:	4b76      	ldr	r3, [pc, #472]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4a75      	ldr	r2, [pc, #468]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003518:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800351c:	6093      	str	r3, [r2, #8]
 800351e:	4b73      	ldr	r3, [pc, #460]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	4970      	ldr	r1, [pc, #448]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003538:	d309      	bcc.n	800354e <HAL_RCC_OscConfig+0xe2>
 800353a:	4b6c      	ldr	r3, [pc, #432]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 021f 	bic.w	r2, r3, #31
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4969      	ldr	r1, [pc, #420]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003548:	4313      	orrs	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]
 800354c:	e07e      	b.n	800364c <HAL_RCC_OscConfig+0x1e0>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	2b00      	cmp	r3, #0
 8003554:	da0a      	bge.n	800356c <HAL_RCC_OscConfig+0x100>
 8003556:	4b65      	ldr	r3, [pc, #404]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	4961      	ldr	r1, [pc, #388]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003566:	4313      	orrs	r3, r2
 8003568:	60cb      	str	r3, [r1, #12]
 800356a:	e06f      	b.n	800364c <HAL_RCC_OscConfig+0x1e0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003574:	d30a      	bcc.n	800358c <HAL_RCC_OscConfig+0x120>
 8003576:	4b5d      	ldr	r3, [pc, #372]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	4959      	ldr	r1, [pc, #356]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003586:	4313      	orrs	r3, r2
 8003588:	60cb      	str	r3, [r1, #12]
 800358a:	e05f      	b.n	800364c <HAL_RCC_OscConfig+0x1e0>
 800358c:	4b57      	ldr	r3, [pc, #348]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	03db      	lsls	r3, r3, #15
 800359a:	4954      	ldr	r1, [pc, #336]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 800359c:	4313      	orrs	r3, r2
 800359e:	60cb      	str	r3, [r1, #12]
 80035a0:	e054      	b.n	800364c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035a2:	4b52      	ldr	r3, [pc, #328]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	4a51      	ldr	r2, [pc, #324]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80035a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035ac:	6093      	str	r3, [r2, #8]
 80035ae:	4b4f      	ldr	r3, [pc, #316]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	494c      	ldr	r1, [pc, #304]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80035c8:	d309      	bcc.n	80035de <HAL_RCC_OscConfig+0x172>
 80035ca:	4b48      	ldr	r3, [pc, #288]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f023 021f 	bic.w	r2, r3, #31
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4945      	ldr	r1, [pc, #276]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	60cb      	str	r3, [r1, #12]
 80035dc:	e028      	b.n	8003630 <HAL_RCC_OscConfig+0x1c4>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	da0a      	bge.n	80035fc <HAL_RCC_OscConfig+0x190>
 80035e6:	4b41      	ldr	r3, [pc, #260]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	015b      	lsls	r3, r3, #5
 80035f4:	493d      	ldr	r1, [pc, #244]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60cb      	str	r3, [r1, #12]
 80035fa:	e019      	b.n	8003630 <HAL_RCC_OscConfig+0x1c4>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003604:	d30a      	bcc.n	800361c <HAL_RCC_OscConfig+0x1b0>
 8003606:	4b39      	ldr	r3, [pc, #228]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	4935      	ldr	r1, [pc, #212]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003616:	4313      	orrs	r3, r2
 8003618:	60cb      	str	r3, [r1, #12]
 800361a:	e009      	b.n	8003630 <HAL_RCC_OscConfig+0x1c4>
 800361c:	4b33      	ldr	r3, [pc, #204]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	03db      	lsls	r3, r3, #15
 800362a:	4930      	ldr	r1, [pc, #192]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 800362c:	4313      	orrs	r3, r2
 800362e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	4618      	mov	r0, r3
 800363c:	f001 f974 	bl	8004928 <RCC_SetFlashLatencyFromMSIRange>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f000 bde5 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800364c:	f001 f8de 	bl	800480c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003650:	4b27      	ldr	r3, [pc, #156]	@ (80036f0 <HAL_RCC_OscConfig+0x284>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd ffbd 	bl	80015d4 <HAL_InitTick>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 808a 	beq.w	800377e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800366a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800366e:	f000 bdd2 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d066      	beq.n	8003748 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800367a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003686:	f7fe faff 	bl	8001c88 <HAL_GetTick>
 800368a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800368c:	e009      	b.n	80036a2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800368e:	f7fe fafb 	bl	8001c88 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d902      	bls.n	80036a2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	f000 bdba 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80036a2:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ef      	beq.n	800368e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80036ae:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	4a0e      	ldr	r2, [pc, #56]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80036b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036b8:	6093      	str	r3, [r2, #8]
 80036ba:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	4909      	ldr	r1, [pc, #36]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80036d4:	d30e      	bcc.n	80036f4 <HAL_RCC_OscConfig+0x288>
 80036d6:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 021f 	bic.w	r2, r3, #31
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4902      	ldr	r1, [pc, #8]	@ (80036ec <HAL_RCC_OscConfig+0x280>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60cb      	str	r3, [r1, #12]
 80036e8:	e04a      	b.n	8003780 <HAL_RCC_OscConfig+0x314>
 80036ea:	bf00      	nop
 80036ec:	46020c00 	.word	0x46020c00
 80036f0:	2000002c 	.word	0x2000002c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da0a      	bge.n	8003712 <HAL_RCC_OscConfig+0x2a6>
 80036fc:	4b98      	ldr	r3, [pc, #608]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	015b      	lsls	r3, r3, #5
 800370a:	4995      	ldr	r1, [pc, #596]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	60cb      	str	r3, [r1, #12]
 8003710:	e036      	b.n	8003780 <HAL_RCC_OscConfig+0x314>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371a:	d30a      	bcc.n	8003732 <HAL_RCC_OscConfig+0x2c6>
 800371c:	4b90      	ldr	r3, [pc, #576]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	029b      	lsls	r3, r3, #10
 800372a:	498d      	ldr	r1, [pc, #564]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	60cb      	str	r3, [r1, #12]
 8003730:	e026      	b.n	8003780 <HAL_RCC_OscConfig+0x314>
 8003732:	4b8b      	ldr	r3, [pc, #556]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	03db      	lsls	r3, r3, #15
 8003740:	4987      	ldr	r1, [pc, #540]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	60cb      	str	r3, [r1, #12]
 8003746:	e01b      	b.n	8003780 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003748:	4b85      	ldr	r3, [pc, #532]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a84      	ldr	r2, [pc, #528]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003754:	f7fe fa98 	bl	8001c88 <HAL_GetTick>
 8003758:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800375a:	e009      	b.n	8003770 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800375c:	f7fe fa94 	bl	8001c88 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d902      	bls.n	8003770 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	f000 bd53 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003770:	4b7b      	ldr	r3, [pc, #492]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ef      	bne.n	800375c <HAL_RCC_OscConfig+0x2f0>
 800377c:	e000      	b.n	8003780 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800377e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 808b 	beq.w	80038a4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	2b08      	cmp	r3, #8
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_OscConfig+0x334>
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d109      	bne.n	80037ae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	2b03      	cmp	r3, #3
 800379e:	d106      	bne.n	80037ae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d17d      	bne.n	80038a4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f000 bd34 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x35a>
 80037b8:	4b69      	ldr	r3, [pc, #420]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a68      	ldr	r2, [pc, #416]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e041      	b.n	800384a <HAL_RCC_OscConfig+0x3de>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ce:	d112      	bne.n	80037f6 <HAL_RCC_OscConfig+0x38a>
 80037d0:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a62      	ldr	r2, [pc, #392]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b60      	ldr	r3, [pc, #384]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80037e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e029      	b.n	800384a <HAL_RCC_OscConfig+0x3de>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80037fe:	d112      	bne.n	8003826 <HAL_RCC_OscConfig+0x3ba>
 8003800:	4b57      	ldr	r3, [pc, #348]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a56      	ldr	r2, [pc, #344]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b54      	ldr	r3, [pc, #336]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a53      	ldr	r2, [pc, #332]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b51      	ldr	r3, [pc, #324]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a50      	ldr	r2, [pc, #320]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800381e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e011      	b.n	800384a <HAL_RCC_OscConfig+0x3de>
 8003826:	4b4e      	ldr	r3, [pc, #312]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a4d      	ldr	r2, [pc, #308]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800382c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b4b      	ldr	r3, [pc, #300]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a4a      	ldr	r2, [pc, #296]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b48      	ldr	r3, [pc, #288]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a47      	ldr	r2, [pc, #284]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003848:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d014      	beq.n	800387c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003852:	f7fe fa19 	bl	8001c88 <HAL_GetTick>
 8003856:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003858:	e009      	b.n	800386e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385a:	f7fe fa15 	bl	8001c88 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	@ 0x64
 8003866:	d902      	bls.n	800386e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	f000 bcd4 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	4b3c      	ldr	r3, [pc, #240]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0ef      	beq.n	800385a <HAL_RCC_OscConfig+0x3ee>
 800387a:	e013      	b.n	80038a4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800387c:	f7fe fa04 	bl	8001c88 <HAL_GetTick>
 8003880:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003882:	e009      	b.n	8003898 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fe fa00 	bl	8001c88 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	@ 0x64
 8003890:	d902      	bls.n	8003898 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	f000 bcbf 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003898:	4b31      	ldr	r3, [pc, #196]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ef      	bne.n	8003884 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d05f      	beq.n	8003970 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d005      	beq.n	80038c2 <HAL_RCC_OscConfig+0x456>
 80038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	d114      	bne.n	80038e6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d111      	bne.n	80038e6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f000 bca3 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	4920      	ldr	r1, [pc, #128]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80038e4:	e044      	b.n	8003970 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d024      	beq.n	8003938 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80038ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038fa:	f7fe f9c5 	bl	8001c88 <HAL_GetTick>
 80038fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003900:	e009      	b.n	8003916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003902:	f7fe f9c1 	bl	8001c88 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d902      	bls.n	8003916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f000 bc80 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003916:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0ef      	beq.n	8003902 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003922:	4b0f      	ldr	r3, [pc, #60]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	490b      	ldr	r1, [pc, #44]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
 8003936:	e01b      	b.n	8003970 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003938:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a08      	ldr	r2, [pc, #32]	@ (8003960 <HAL_RCC_OscConfig+0x4f4>)
 800393e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003942:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003944:	f7fe f9a0 	bl	8001c88 <HAL_GetTick>
 8003948:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe f99c 	bl	8001c88 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d904      	bls.n	8003964 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	f000 bc5b 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
 8003960:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003964:	4baf      	ldr	r3, [pc, #700]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ed      	bne.n	800394c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80c8 	beq.w	8003b0e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003984:	4ba7      	ldr	r3, [pc, #668]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d111      	bne.n	80039b6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	4ba4      	ldr	r3, [pc, #656]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003998:	4aa2      	ldr	r2, [pc, #648]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 800399a:	f043 0304 	orr.w	r3, r3, #4
 800399e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80039a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039b6:	4b9c      	ldr	r3, [pc, #624]	@ (8003c28 <HAL_RCC_OscConfig+0x7bc>)
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d119      	bne.n	80039f6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80039c2:	4b99      	ldr	r3, [pc, #612]	@ (8003c28 <HAL_RCC_OscConfig+0x7bc>)
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	4a98      	ldr	r2, [pc, #608]	@ (8003c28 <HAL_RCC_OscConfig+0x7bc>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fe f95b 	bl	8001c88 <HAL_GetTick>
 80039d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039d4:	e009      	b.n	80039ea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d6:	f7fe f957 	bl	8001c88 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d902      	bls.n	80039ea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	f000 bc16 	b.w	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039ea:	4b8f      	ldr	r3, [pc, #572]	@ (8003c28 <HAL_RCC_OscConfig+0x7bc>)
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ef      	beq.n	80039d6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d05f      	beq.n	8003abe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80039fe:	4b89      	ldr	r3, [pc, #548]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a04:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d037      	beq.n	8003a84 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d006      	beq.n	8003a2c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e3f4      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01b      	beq.n	8003a6e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003a36:	4b7b      	ldr	r3, [pc, #492]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a3c:	4a79      	ldr	r2, [pc, #484]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003a3e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003a42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003a46:	f7fe f91f 	bl	8001c88 <HAL_GetTick>
 8003a4a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7fe f91b 	bl	8001c88 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e3da      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003a60:	4b70      	ldr	r3, [pc, #448]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ef      	bne.n	8003a4e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	4969      	ldr	r1, [pc, #420]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003a84:	4b67      	ldr	r3, [pc, #412]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a8a:	4a66      	ldr	r2, [pc, #408]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003a8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003a94:	f7fe f8f8 	bl	8001c88 <HAL_GetTick>
 8003a98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9c:	f7fe f8f4 	bl	8001c88 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e3b3      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003aae:	4b5d      	ldr	r3, [pc, #372]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ef      	beq.n	8003a9c <HAL_RCC_OscConfig+0x630>
 8003abc:	e01b      	b.n	8003af6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003abe:	4b59      	ldr	r3, [pc, #356]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ac4:	4a57      	ldr	r2, [pc, #348]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003ac6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003aca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003ace:	f7fe f8db 	bl	8001c88 <HAL_GetTick>
 8003ad2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad6:	f7fe f8d7 	bl	8001c88 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e396      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ef      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003af6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afe:	4b49      	ldr	r3, [pc, #292]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b04:	4a47      	ldr	r2, [pc, #284]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003b06:	f023 0304 	bic.w	r3, r3, #4
 8003b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8111 	beq.w	8003d3e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b40      	ldr	r3, [pc, #256]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d111      	bne.n	8003b54 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	4b3c      	ldr	r3, [pc, #240]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b36:	4a3b      	ldr	r2, [pc, #236]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003b40:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b54:	4b34      	ldr	r3, [pc, #208]	@ (8003c28 <HAL_RCC_OscConfig+0x7bc>)
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d118      	bne.n	8003b92 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003b60:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <HAL_RCC_OscConfig+0x7bc>)
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	4a30      	ldr	r2, [pc, #192]	@ (8003c28 <HAL_RCC_OscConfig+0x7bc>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f88c 	bl	8001c88 <HAL_GetTick>
 8003b70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7fe f888 	bl	8001c88 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e347      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003b86:	4b28      	ldr	r3, [pc, #160]	@ (8003c28 <HAL_RCC_OscConfig+0x7bc>)
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01f      	beq.n	8003bde <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d010      	beq.n	8003bcc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003baa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bba:	4b1a      	ldr	r3, [pc, #104]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bc0:	4a18      	ldr	r2, [pc, #96]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bca:	e018      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bcc:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd2:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bdc:	e00f      	b.n	8003bfe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bde:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003be4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8003c24 <HAL_RCC_OscConfig+0x7b8>)
 8003bf6:	f023 0304 	bic.w	r3, r3, #4
 8003bfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d057      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003c06:	f7fe f83f 	bl	8001c88 <HAL_GetTick>
 8003c0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0c:	e00e      	b.n	8003c2c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe f83b 	bl	8001c88 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d905      	bls.n	8003c2c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e2f8      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
 8003c24:	46020c00 	.word	0x46020c00
 8003c28:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0e9      	beq.n	8003c0e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01b      	beq.n	8003c7e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c46:	4b96      	ldr	r3, [pc, #600]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c4c:	4a94      	ldr	r2, [pc, #592]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fe f816 	bl	8001c88 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e2d3      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003c6e:	4b8c      	ldr	r3, [pc, #560]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ed      	beq.n	8003c58 <HAL_RCC_OscConfig+0x7ec>
 8003c7c:	e053      	b.n	8003d26 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c7e:	4b88      	ldr	r3, [pc, #544]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c84:	4a86      	ldr	r2, [pc, #536]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fd fffa 	bl	8001c88 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e2b7      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ca6:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ed      	bne.n	8003c90 <HAL_RCC_OscConfig+0x824>
 8003cb4:	e037      	b.n	8003d26 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003cb6:	f7fd ffe7 	bl	8001c88 <HAL_GetTick>
 8003cba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fd ffe3 	bl	8001c88 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e2a0      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd4:	4b72      	ldr	r3, [pc, #456]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ed      	bne.n	8003cbe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01a      	beq.n	8003d26 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fd ffc1 	bl	8001c88 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e27e      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d18:	4b61      	ldr	r3, [pc, #388]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ed      	bne.n	8003d02 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d34:	4a5a      	ldr	r2, [pc, #360]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003d36:	f023 0304 	bic.w	r3, r3, #4
 8003d3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d036      	beq.n	8003db8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d019      	beq.n	8003d86 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003d52:	4b53      	ldr	r3, [pc, #332]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a52      	ldr	r2, [pc, #328]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d5c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d5e:	f7fd ff93 	bl	8001c88 <HAL_GetTick>
 8003d62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d66:	f7fd ff8f 	bl	8001c88 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e24e      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d78:	4b49      	ldr	r3, [pc, #292]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x8fa>
 8003d84:	e018      	b.n	8003db8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003d86:	4b46      	ldr	r3, [pc, #280]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a45      	ldr	r2, [pc, #276]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d90:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d92:	f7fd ff79 	bl	8001c88 <HAL_GetTick>
 8003d96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d9a:	f7fd ff75 	bl	8001c88 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e234      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003dac:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d036      	beq.n	8003e32 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d019      	beq.n	8003e00 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003dcc:	4b34      	ldr	r3, [pc, #208]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a33      	ldr	r2, [pc, #204]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003dd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dd6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003dd8:	f7fd ff56 	bl	8001c88 <HAL_GetTick>
 8003ddc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003de0:	f7fd ff52 	bl	8001c88 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e211      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003df2:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x974>
 8003dfe:	e018      	b.n	8003e32 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003e00:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a26      	ldr	r2, [pc, #152]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e0a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e0c:	f7fd ff3c 	bl	8001c88 <HAL_GetTick>
 8003e10:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003e14:	f7fd ff38 	bl	8001c88 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e1f7      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003e26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d07f      	beq.n	8003f3e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d062      	beq.n	8003f0c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003e46:	4b16      	ldr	r3, [pc, #88]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e50:	6093      	str	r3, [r2, #8]
 8003e52:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	4910      	ldr	r1, [pc, #64]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e6c:	d309      	bcc.n	8003e82 <HAL_RCC_OscConfig+0xa16>
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f023 021f 	bic.w	r2, r3, #31
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	4909      	ldr	r1, [pc, #36]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60cb      	str	r3, [r1, #12]
 8003e80:	e02a      	b.n	8003ed8 <HAL_RCC_OscConfig+0xa6c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da0c      	bge.n	8003ea4 <HAL_RCC_OscConfig+0xa38>
 8003e8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	015b      	lsls	r3, r3, #5
 8003e98:	4901      	ldr	r1, [pc, #4]	@ (8003ea0 <HAL_RCC_OscConfig+0xa34>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
 8003e9e:	e01b      	b.n	8003ed8 <HAL_RCC_OscConfig+0xa6c>
 8003ea0:	46020c00 	.word	0x46020c00
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eac:	d30a      	bcc.n	8003ec4 <HAL_RCC_OscConfig+0xa58>
 8003eae:	4ba1      	ldr	r3, [pc, #644]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	029b      	lsls	r3, r3, #10
 8003ebc:	499d      	ldr	r1, [pc, #628]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60cb      	str	r3, [r1, #12]
 8003ec2:	e009      	b.n	8003ed8 <HAL_RCC_OscConfig+0xa6c>
 8003ec4:	4b9b      	ldr	r3, [pc, #620]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	03db      	lsls	r3, r3, #15
 8003ed2:	4998      	ldr	r1, [pc, #608]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003ed8:	4b96      	ldr	r3, [pc, #600]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a95      	ldr	r2, [pc, #596]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003ede:	f043 0310 	orr.w	r3, r3, #16
 8003ee2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ee4:	f7fd fed0 	bl	8001c88 <HAL_GetTick>
 8003ee8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003eec:	f7fd fecc 	bl	8001c88 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e18b      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003efe:	4b8d      	ldr	r3, [pc, #564]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0xa80>
 8003f0a:	e018      	b.n	8003f3e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003f0c:	4b89      	ldr	r3, [pc, #548]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a88      	ldr	r2, [pc, #544]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f12:	f023 0310 	bic.w	r3, r3, #16
 8003f16:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f18:	f7fd feb6 	bl	8001c88 <HAL_GetTick>
 8003f1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003f20:	f7fd feb2 	bl	8001c88 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e171      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003f32:	4b80      	ldr	r3, [pc, #512]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8166 	beq.w	8004214 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4e:	4b79      	ldr	r3, [pc, #484]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	f000 80f2 	beq.w	8004140 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	f040 80c5 	bne.w	80040f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f66:	4b73      	ldr	r3, [pc, #460]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a72      	ldr	r2, [pc, #456]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f70:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f72:	f7fd fe89 	bl	8001c88 <HAL_GetTick>
 8003f76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fd fe85 	bl	8001c88 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e144      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f8c:	4b69      	ldr	r3, [pc, #420]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f98:	4b66      	ldr	r3, [pc, #408]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d111      	bne.n	8003fca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	4b63      	ldr	r3, [pc, #396]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fac:	4a61      	ldr	r2, [pc, #388]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003fae:	f043 0304 	orr.w	r3, r3, #4
 8003fb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003fca:	4b5b      	ldr	r3, [pc, #364]	@ (8004138 <HAL_RCC_OscConfig+0xccc>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fd6:	d102      	bne.n	8003fde <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003fde:	4b56      	ldr	r3, [pc, #344]	@ (8004138 <HAL_RCC_OscConfig+0xccc>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a55      	ldr	r2, [pc, #340]	@ (8004138 <HAL_RCC_OscConfig+0xccc>)
 8003fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003fea:	4b52      	ldr	r3, [pc, #328]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ffe:	3a01      	subs	r2, #1
 8004000:	0212      	lsls	r2, r2, #8
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004008:	430a      	orrs	r2, r1
 800400a:	494a      	ldr	r1, [pc, #296]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 800400c:	4313      	orrs	r3, r2
 800400e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004010:	4b48      	ldr	r3, [pc, #288]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004014:	4b49      	ldr	r3, [pc, #292]	@ (800413c <HAL_RCC_OscConfig+0xcd0>)
 8004016:	4013      	ands	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800401c:	3a01      	subs	r2, #1
 800401e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004026:	3a01      	subs	r2, #1
 8004028:	0252      	lsls	r2, r2, #9
 800402a:	b292      	uxth	r2, r2
 800402c:	4311      	orrs	r1, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004032:	3a01      	subs	r2, #1
 8004034:	0412      	lsls	r2, r2, #16
 8004036:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004040:	3a01      	subs	r2, #1
 8004042:	0612      	lsls	r2, r2, #24
 8004044:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004048:	430a      	orrs	r2, r1
 800404a:	493a      	ldr	r1, [pc, #232]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 800404c:	4313      	orrs	r3, r2
 800404e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004050:	4b38      	ldr	r3, [pc, #224]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	4a37      	ldr	r2, [pc, #220]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004056:	f023 0310 	bic.w	r3, r3, #16
 800405a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004066:	4b33      	ldr	r3, [pc, #204]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	4a32      	ldr	r2, [pc, #200]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 800406c:	f043 0310 	orr.w	r3, r3, #16
 8004070:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004072:	4b30      	ldr	r3, [pc, #192]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004076:	f023 020c 	bic.w	r2, r3, #12
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407e:	492d      	ldr	r1, [pc, #180]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004080:	4313      	orrs	r3, r2
 8004082:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004084:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800408c:	4b2a      	ldr	r3, [pc, #168]	@ (8004138 <HAL_RCC_OscConfig+0xccc>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a29      	ldr	r2, [pc, #164]	@ (8004138 <HAL_RCC_OscConfig+0xccc>)
 8004092:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004096:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004098:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800409c:	2b01      	cmp	r3, #1
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80040a0:	4b24      	ldr	r3, [pc, #144]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a6:	4a23      	ldr	r2, [pc, #140]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040a8:	f023 0304 	bic.w	r3, r3, #4
 80040ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80040b0:	4b20      	ldr	r3, [pc, #128]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040bc:	f7fd fde4 	bl	8001c88 <HAL_GetTick>
 80040c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fd fde0 	bl	8001c88 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e09f      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040d6:	4b17      	ldr	r3, [pc, #92]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040e2:	4b14      	ldr	r3, [pc, #80]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	4a13      	ldr	r2, [pc, #76]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80040ee:	e091      	b.n	8004214 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b10      	ldr	r3, [pc, #64]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040fc:	f7fd fdc4 	bl	8001c88 <HAL_GetTick>
 8004100:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd fdc0 	bl	8001c88 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e07f      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004116:	4b07      	ldr	r3, [pc, #28]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004122:	4b04      	ldr	r3, [pc, #16]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004126:	4a03      	ldr	r2, [pc, #12]	@ (8004134 <HAL_RCC_OscConfig+0xcc8>)
 8004128:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800412c:	f023 0303 	bic.w	r3, r3, #3
 8004130:	6293      	str	r3, [r2, #40]	@ 0x28
 8004132:	e06f      	b.n	8004214 <HAL_RCC_OscConfig+0xda8>
 8004134:	46020c00 	.word	0x46020c00
 8004138:	46020800 	.word	0x46020800
 800413c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004140:	4b37      	ldr	r3, [pc, #220]	@ (8004220 <HAL_RCC_OscConfig+0xdb4>)
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004146:	4b36      	ldr	r3, [pc, #216]	@ (8004220 <HAL_RCC_OscConfig+0xdb4>)
 8004148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004150:	2b01      	cmp	r3, #1
 8004152:	d039      	beq.n	80041c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0203 	and.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d132      	bne.n	80041c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d129      	bne.n	80041c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d122      	bne.n	80041c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800418c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d11a      	bne.n	80041c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	0a5b      	lsrs	r3, r3, #9
 8004196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d111      	bne.n	80041c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	0c1b      	lsrs	r3, r3, #16
 80041a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d108      	bne.n	80041c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	0e1b      	lsrs	r3, r3, #24
 80041ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e024      	b.n	8004216 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <HAL_RCC_OscConfig+0xdb4>)
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	08db      	lsrs	r3, r3, #3
 80041d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80041da:	429a      	cmp	r2, r3
 80041dc:	d01a      	beq.n	8004214 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80041de:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <HAL_RCC_OscConfig+0xdb4>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004220 <HAL_RCC_OscConfig+0xdb4>)
 80041e4:	f023 0310 	bic.w	r3, r3, #16
 80041e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fd fd4d 	bl	8001c88 <HAL_GetTick>
 80041ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80041f0:	bf00      	nop
 80041f2:	f7fd fd49 	bl	8001c88 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d0f9      	beq.n	80041f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	4a07      	ldr	r2, [pc, #28]	@ (8004220 <HAL_RCC_OscConfig+0xdb4>)
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_RCC_OscConfig+0xdb4>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	4a04      	ldr	r2, [pc, #16]	@ (8004220 <HAL_RCC_OscConfig+0xdb4>)
 800420e:	f043 0310 	orr.w	r3, r3, #16
 8004212:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3738      	adds	r7, #56	@ 0x38
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	46020c00 	.word	0x46020c00

08004224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e1d9      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004238:	4b9b      	ldr	r3, [pc, #620]	@ (80044a8 <HAL_RCC_ClockConfig+0x284>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d910      	bls.n	8004268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b98      	ldr	r3, [pc, #608]	@ (80044a8 <HAL_RCC_ClockConfig+0x284>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 020f 	bic.w	r2, r3, #15
 800424e:	4996      	ldr	r1, [pc, #600]	@ (80044a8 <HAL_RCC_ClockConfig+0x284>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b94      	ldr	r3, [pc, #592]	@ (80044a8 <HAL_RCC_ClockConfig+0x284>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e1c1      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	4b8c      	ldr	r3, [pc, #560]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004280:	429a      	cmp	r2, r3
 8004282:	d908      	bls.n	8004296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004284:	4b89      	ldr	r3, [pc, #548]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	4986      	ldr	r1, [pc, #536]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004292:	4313      	orrs	r3, r2
 8004294:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d012      	beq.n	80042c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	4b81      	ldr	r3, [pc, #516]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d909      	bls.n	80042c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80042b4:	4b7d      	ldr	r3, [pc, #500]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	497a      	ldr	r1, [pc, #488]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d010      	beq.n	80042f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	4b74      	ldr	r3, [pc, #464]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d908      	bls.n	80042f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80042e4:	4b71      	ldr	r3, [pc, #452]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	496e      	ldr	r1, [pc, #440]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	4b69      	ldr	r3, [pc, #420]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	429a      	cmp	r2, r3
 8004310:	d908      	bls.n	8004324 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004312:	4b66      	ldr	r3, [pc, #408]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4963      	ldr	r1, [pc, #396]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004320:	4313      	orrs	r3, r2
 8004322:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80d2 	beq.w	80044d6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d143      	bne.n	80043c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433e:	4b5b      	ldr	r3, [pc, #364]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d110      	bne.n	800436e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800434c:	4b57      	ldr	r3, [pc, #348]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004352:	4a56      	ldr	r2, [pc, #344]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004354:	f043 0304 	orr.w	r3, r3, #4
 8004358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800435c:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800436e:	f7fd fc8b 	bl	8001c88 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004374:	4b4e      	ldr	r3, [pc, #312]	@ (80044b0 <HAL_RCC_ClockConfig+0x28c>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00f      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004382:	f7fd fc81 	bl	8001c88 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e12b      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004394:	4b46      	ldr	r3, [pc, #280]	@ (80044b0 <HAL_RCC_ClockConfig+0x28c>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043a6:	4b41      	ldr	r3, [pc, #260]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80043a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ac:	4a3f      	ldr	r2, [pc, #252]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80043ae:	f023 0304 	bic.w	r3, r3, #4
 80043b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043b6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d121      	bne.n	8004406 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e112      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d107      	bne.n	80043de <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ce:	4b37      	ldr	r3, [pc, #220]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d115      	bne.n	8004406 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e106      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80043e6:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e0fa      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f6:	4b2d      	ldr	r3, [pc, #180]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0f2      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004406:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f023 0203 	bic.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4926      	ldr	r1, [pc, #152]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004414:	4313      	orrs	r3, r2
 8004416:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004418:	f7fd fc36 	bl	8001c88 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d112      	bne.n	800444c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004426:	e00a      	b.n	800443e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004428:	f7fd fc2e 	bl	8001c88 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0d6      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800443e:	4b1b      	ldr	r3, [pc, #108]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d1ee      	bne.n	8004428 <HAL_RCC_ClockConfig+0x204>
 800444a:	e044      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d112      	bne.n	800447a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004454:	e00a      	b.n	800446c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004456:	f7fd fc17 	bl	8001c88 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0bf      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800446c:	4b0f      	ldr	r3, [pc, #60]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b08      	cmp	r3, #8
 8004476:	d1ee      	bne.n	8004456 <HAL_RCC_ClockConfig+0x232>
 8004478:	e02d      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d123      	bne.n	80044ca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004482:	e00a      	b.n	800449a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004484:	f7fd fc00 	bl	8001c88 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e0a8      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800449a:	4b04      	ldr	r3, [pc, #16]	@ (80044ac <HAL_RCC_ClockConfig+0x288>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ee      	bne.n	8004484 <HAL_RCC_ClockConfig+0x260>
 80044a6:	e016      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2b2>
 80044a8:	40022000 	.word	0x40022000
 80044ac:	46020c00 	.word	0x46020c00
 80044b0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b4:	f7fd fbe8 	bl	8001c88 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e090      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ca:	4b4a      	ldr	r3, [pc, #296]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d1ee      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	4b43      	ldr	r3, [pc, #268]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d208      	bcs.n	8004504 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80044f2:	4b40      	ldr	r3, [pc, #256]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 020f 	bic.w	r2, r3, #15
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	493d      	ldr	r1, [pc, #244]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004504:	4b3c      	ldr	r3, [pc, #240]	@ (80045f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d210      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b39      	ldr	r3, [pc, #228]	@ (80045f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 020f 	bic.w	r2, r3, #15
 800451a:	4937      	ldr	r1, [pc, #220]	@ (80045f8 <HAL_RCC_ClockConfig+0x3d4>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b35      	ldr	r3, [pc, #212]	@ (80045f8 <HAL_RCC_ClockConfig+0x3d4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e05b      	b.n	80045ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	4b2b      	ldr	r3, [pc, #172]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800454c:	429a      	cmp	r2, r3
 800454e:	d208      	bcs.n	8004562 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004550:	4b28      	ldr	r3, [pc, #160]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4925      	ldr	r1, [pc, #148]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 800455e:	4313      	orrs	r3, r2
 8004560:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800457c:	429a      	cmp	r2, r3
 800457e:	d209      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004580:	4b1c      	ldr	r3, [pc, #112]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	4919      	ldr	r1, [pc, #100]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	d010      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d208      	bcs.n	80045c2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80045b0:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	490d      	ldr	r1, [pc, #52]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80045c2:	f000 f821 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b0a      	ldr	r3, [pc, #40]	@ (80045f4 <HAL_RCC_ClockConfig+0x3d0>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	490a      	ldr	r1, [pc, #40]	@ (80045fc <HAL_RCC_ClockConfig+0x3d8>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
 80045d8:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <HAL_RCC_ClockConfig+0x3dc>)
 80045da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <HAL_RCC_ClockConfig+0x3e0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fc fff7 	bl	80015d4 <HAL_InitTick>
 80045e6:	4603      	mov	r3, r0
 80045e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	46020c00 	.word	0x46020c00
 80045f8:	40022000 	.word	0x40022000
 80045fc:	080096b0 	.word	0x080096b0
 8004600:	2000000c 	.word	0x2000000c
 8004604:	2000002c 	.word	0x2000002c

08004608 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	b08b      	sub	sp, #44	@ 0x2c
 800460c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004616:	4b78      	ldr	r3, [pc, #480]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004620:	4b75      	ldr	r3, [pc, #468]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x34>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d121      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d11e      	bne.n	800467a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800463c:	4b6e      	ldr	r3, [pc, #440]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004648:	4b6b      	ldr	r3, [pc, #428]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800464a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800464e:	0b1b      	lsrs	r3, r3, #12
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
 8004656:	e005      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004658:	4b67      	ldr	r3, [pc, #412]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	0f1b      	lsrs	r3, r3, #28
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004664:	4a65      	ldr	r2, [pc, #404]	@ (80047fc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d110      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004678:	e00d      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800467a:	4b5f      	ldr	r3, [pc, #380]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b04      	cmp	r3, #4
 8004684:	d102      	bne.n	800468c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004686:	4b5e      	ldr	r3, [pc, #376]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	e004      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b08      	cmp	r3, #8
 8004690:	d101      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004692:	4b5b      	ldr	r3, [pc, #364]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004694:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	f040 80a5 	bne.w	80047e8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800469e:	4b56      	ldr	r3, [pc, #344]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80046a8:	4b53      	ldr	r3, [pc, #332]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80046b6:	4b50      	ldr	r3, [pc, #320]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80046c2:	4b4d      	ldr	r3, [pc, #308]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80046c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c6:	08db      	lsrs	r3, r3, #3
 80046c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046da:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d003      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0xe4>
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d022      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x128>
 80046ea:	e043      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004804 <HAL_RCC_GetSysClockFreq+0x1fc>
 80046fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fe:	4b3e      	ldr	r3, [pc, #248]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800470e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004712:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004808 <HAL_RCC_GetSysClockFreq+0x200>
 8004716:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800471a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800471e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004722:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472e:	e046      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004804 <HAL_RCC_GetSysClockFreq+0x1fc>
 800473e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004742:	4b2d      	ldr	r3, [pc, #180]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004752:	ed97 6a01 	vldr	s12, [r7, #4]
 8004756:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004808 <HAL_RCC_GetSysClockFreq+0x200>
 800475a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800475e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004766:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800476a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004772:	e024      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	ee07 3a90 	vmov	s15, r3
 8004784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478c:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800479c:	ed97 6a01 	vldr	s12, [r7, #4]
 80047a0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004808 <HAL_RCC_GetSysClockFreq+0x200>
 80047a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047bc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80047be:	4b0e      	ldr	r3, [pc, #56]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c2:	0e1b      	lsrs	r3, r3, #24
 80047c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c8:	3301      	adds	r3, #1
 80047ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e2:	ee17 3a90 	vmov	r3, s15
 80047e6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	372c      	adds	r7, #44	@ 0x2c
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	46020c00 	.word	0x46020c00
 80047fc:	080096c8 	.word	0x080096c8
 8004800:	00f42400 	.word	0x00f42400
 8004804:	4b742400 	.word	0x4b742400
 8004808:	46000000 	.word	0x46000000

0800480c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004810:	f7ff fefa 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b07      	ldr	r3, [pc, #28]	@ (8004834 <HAL_RCC_GetHCLKFreq+0x28>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	4906      	ldr	r1, [pc, #24]	@ (8004838 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004820:	5ccb      	ldrb	r3, [r1, r3]
 8004822:	fa22 f303 	lsr.w	r3, r2, r3
 8004826:	4a05      	ldr	r2, [pc, #20]	@ (800483c <HAL_RCC_GetHCLKFreq+0x30>)
 8004828:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800482a:	4b04      	ldr	r3, [pc, #16]	@ (800483c <HAL_RCC_GetHCLKFreq+0x30>)
 800482c:	681b      	ldr	r3, [r3, #0]
}
 800482e:	4618      	mov	r0, r3
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	46020c00 	.word	0x46020c00
 8004838:	080096b0 	.word	0x080096b0
 800483c:	2000000c 	.word	0x2000000c

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004844:	f7ff ffe2 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	@ (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	@ (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	46020c00 	.word	0x46020c00
 8004864:	080096c0 	.word	0x080096c0

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800486c:	f7ff ffce 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	@ (8004888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	@ (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	46020c00 	.word	0x46020c00
 800488c:	080096c0 	.word	0x080096c0

08004890 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004894:	f7ff ffba 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	@ (80048b4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	46020c00 	.word	0x46020c00
 80048b4:	080096c0 	.word	0x080096c0

080048b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	221f      	movs	r2, #31
 80048c6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80048c8:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <HAL_RCC_GetClockConfig+0x68>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f003 0203 	and.w	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80048d4:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <HAL_RCC_GetClockConfig+0x68>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80048e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <HAL_RCC_GetClockConfig+0x68>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <HAL_RCC_GetClockConfig+0x68>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_GetClockConfig+0x68>)
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004906:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <HAL_RCC_GetClockConfig+0x6c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 020f 	and.w	r2, r3, #15
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	46020c00 	.word	0x46020c00
 8004924:	40022000 	.word	0x40022000

08004928 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004930:	4b3e      	ldr	r3, [pc, #248]	@ (8004a2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800493e:	f7fe fd17 	bl	8003370 <HAL_PWREx_GetVoltageRange>
 8004942:	6178      	str	r0, [r7, #20]
 8004944:	e019      	b.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	4b39      	ldr	r3, [pc, #228]	@ (8004a2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800494c:	4a37      	ldr	r2, [pc, #220]	@ (8004a2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004956:	4b35      	ldr	r3, [pc, #212]	@ (8004a2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004964:	f7fe fd04 	bl	8003370 <HAL_PWREx_GetVoltageRange>
 8004968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800496a:	4b30      	ldr	r3, [pc, #192]	@ (8004a2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800496c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004970:	4a2e      	ldr	r2, [pc, #184]	@ (8004a2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004972:	f023 0304 	bic.w	r3, r3, #4
 8004976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004980:	d003      	beq.n	800498a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004988:	d109      	bne.n	800499e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004990:	d202      	bcs.n	8004998 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004992:	2301      	movs	r3, #1
 8004994:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004996:	e033      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800499c:	e030      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049a4:	d208      	bcs.n	80049b8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ac:	d102      	bne.n	80049b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80049ae:	2303      	movs	r3, #3
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	e025      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e035      	b.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049be:	d90f      	bls.n	80049e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049cc:	d902      	bls.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	e015      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80049d4:	2301      	movs	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	e012      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e00f      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049e6:	d109      	bne.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ee:	d102      	bne.n	80049f6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80049f0:	2301      	movs	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	e004      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80049f6:	2302      	movs	r3, #2
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e001      	b.n	8004a00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80049fc:	2301      	movs	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a00:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 020f 	bic.w	r2, r3, #15
 8004a08:	4909      	ldr	r1, [pc, #36]	@ (8004a30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004a10:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d001      	beq.n	8004a22 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	46020c00 	.word	0x46020c00
 8004a30:	40022000 	.word	0x40022000

08004a34 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a38:	b0b8      	sub	sp, #224	@ 0xe0
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f002 0401 	and.w	r4, r2, #1
 8004a58:	2500      	movs	r5, #0
 8004a5a:	ea54 0305 	orrs.w	r3, r4, r5
 8004a5e:	d00b      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004a60:	4bca      	ldr	r3, [pc, #808]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a66:	f023 0103 	bic.w	r1, r3, #3
 8004a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	4ac6      	ldr	r2, [pc, #792]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a72:	430b      	orrs	r3, r1
 8004a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f002 0802 	and.w	r8, r2, #2
 8004a84:	f04f 0900 	mov.w	r9, #0
 8004a88:	ea58 0309 	orrs.w	r3, r8, r9
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004a8e:	4bbf      	ldr	r3, [pc, #764]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a94:	f023 010c 	bic.w	r1, r3, #12
 8004a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9e:	4abb      	ldr	r2, [pc, #748]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f002 0a04 	and.w	sl, r2, #4
 8004ab2:	f04f 0b00 	mov.w	fp, #0
 8004ab6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004aba:	d00b      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004abc:	4bb3      	ldr	r3, [pc, #716]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ac2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004acc:	4aaf      	ldr	r2, [pc, #700]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f002 0308 	and.w	r3, r2, #8
 8004ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004aea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4313      	orrs	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004af4:	4ba5      	ldr	r3, [pc, #660]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004afa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004afe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	4aa1      	ldr	r2, [pc, #644]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f002 0310 	and.w	r3, r2, #16
 8004b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004b26:	460b      	mov	r3, r1
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004b2c:	4b97      	ldr	r3, [pc, #604]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3c:	4a93      	ldr	r2, [pc, #588]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f002 0320 	and.w	r3, r2, #32
 8004b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4313      	orrs	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004b64:	4b89      	ldr	r3, [pc, #548]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b6a:	f023 0107 	bic.w	r1, r3, #7
 8004b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b74:	4a85      	ldr	r2, [pc, #532]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b76:	430b      	orrs	r3, r1
 8004b78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b92:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b96:	460b      	mov	r3, r1
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004b9c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004baa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bac:	4a77      	ldr	r2, [pc, #476]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004bca:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004bd4:	4b6d      	ldr	r3, [pc, #436]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be4:	4a69      	ldr	r2, [pc, #420]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004c0c:	4b5f      	ldr	r3, [pc, #380]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1c:	4a5b      	ldr	r2, [pc, #364]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c34:	2300      	movs	r3, #0
 8004c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4313      	orrs	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004c44:	4b51      	ldr	r3, [pc, #324]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c4a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004c4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c54:	4a4d      	ldr	r2, [pc, #308]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c72:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004c76:	460b      	mov	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004c7c:	4b43      	ldr	r3, [pc, #268]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c82:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004caa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004cb4:	4b35      	ldr	r3, [pc, #212]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cba:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cc4:	4a31      	ldr	r2, [pc, #196]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cda:	2300      	movs	r3, #0
 8004cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cde:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d00c      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004ce8:	4b28      	ldr	r3, [pc, #160]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cfa:	4a24      	ldr	r2, [pc, #144]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d10:	2300      	movs	r3, #0
 8004d12:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	d04f      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	2b80      	cmp	r3, #128	@ 0x80
 8004d28:	d02d      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004d2a:	2b80      	cmp	r3, #128	@ 0x80
 8004d2c:	d827      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d2e:	2b60      	cmp	r3, #96	@ 0x60
 8004d30:	d02e      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004d32:	2b60      	cmp	r3, #96	@ 0x60
 8004d34:	d823      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d36:	2b40      	cmp	r3, #64	@ 0x40
 8004d38:	d006      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004d3a:	2b40      	cmp	r3, #64	@ 0x40
 8004d3c:	d81f      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d011      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d46:	e01a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d48:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d52:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d54:	e01d      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 f9d1 	bl	8007104 <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d68:	e013      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d6e:	332c      	adds	r3, #44	@ 0x2c
 8004d70:	4618      	mov	r0, r3
 8004d72:	f002 fa5f 	bl	8007234 <RCCEx_PLL3_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d7c:	e009      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d84:	e005      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004d86:	bf00      	nop
 8004d88:	e003      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004d8a:	bf00      	nop
 8004d8c:	46020c00 	.word	0x46020c00
        break;
 8004d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d92:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10d      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004d9a:	4bb6      	ldr	r3, [pc, #728]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004da0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dac:	4ab1      	ldr	r2, [pc, #708]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004dae:	430b      	orrs	r3, r1
 8004db0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004db4:	e003      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004dba:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004dca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dcc:	2300      	movs	r3, #0
 8004dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dd0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	d053      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de6:	d033      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dec:	d82c      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004df2:	d02f      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004df8:	d826      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dfe:	d008      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e04:	d820      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e0e:	d011      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004e10:	e01a      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e12:	4b98      	ldr	r3, [pc, #608]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	4a97      	ldr	r2, [pc, #604]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e1e:	e01a      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e24:	3308      	adds	r3, #8
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 f96c 	bl	8007104 <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e32:	e010      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e38:	332c      	adds	r3, #44	@ 0x2c
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f002 f9fa 	bl	8007234 <RCCEx_PLL3_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e46:	e006      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004e50:	bf00      	nop
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10d      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004e5e:	4b85      	ldr	r3, [pc, #532]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e64:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004e68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e70:	4a80      	ldr	r2, [pc, #512]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e72:	430b      	orrs	r3, r1
 8004e74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e78:	e003      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e7e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004e82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e90:	2300      	movs	r3, #0
 8004e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d046      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004e9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ea6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004eaa:	d028      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004eac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004eb0:	d821      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb6:	d022      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ebc:	d81b      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ebe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ec2:	d01c      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ec4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ec8:	d815      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed4:	d80f      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d011      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	d00e      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ee0:	e009      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f002 f90b 	bl	8007104 <RCCEx_PLL2_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004ef4:	e004      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f00:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10d      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004f08:	4b5a      	ldr	r3, [pc, #360]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f0e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f1a:	4a56      	ldr	r2, [pc, #344]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f28:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004f38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d03f      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d81e      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004f54:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f9b 	.word	0x08004f9b
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f7f 	.word	0x08004f7f
 8004f68:	08004f9b 	.word	0x08004f9b
 8004f6c:	08004f9b 	.word	0x08004f9b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f70:	4b40      	ldr	r3, [pc, #256]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	4a3f      	ldr	r2, [pc, #252]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004f7c:	e00e      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f82:	332c      	adds	r3, #44	@ 0x2c
 8004f84:	4618      	mov	r0, r3
 8004f86:	f002 f955 	bl	8007234 <RCCEx_PLL3_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004f90:	e004      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004f9a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004f9c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10d      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004fa4:	4b33      	ldr	r3, [pc, #204]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004faa:	f023 0107 	bic.w	r1, r3, #7
 8004fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb6:	4a2f      	ldr	r2, [pc, #188]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004fbe:	e003      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fc4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004fd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d04d      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ff0:	d028      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004ff2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ff6:	d821      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ff8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ffc:	d024      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004ffe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005002:	d81b      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005008:	d00e      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800500a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800500e:	d815      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005018:	d110      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800501a:	4b16      	ldr	r3, [pc, #88]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800501c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501e:	4a15      	ldr	r2, [pc, #84]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005024:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005026:	e012      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800502c:	332c      	adds	r3, #44	@ 0x2c
 800502e:	4618      	mov	r0, r3
 8005030:	f002 f900 	bl	8007234 <RCCEx_PLL3_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800503a:	e008      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005042:	e004      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005044:	bf00      	nop
 8005046:	e002      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005048:	bf00      	nop
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800504c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800504e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005052:	2b00      	cmp	r3, #0
 8005054:	d110      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005056:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800505c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005068:	4a02      	ldr	r2, [pc, #8]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800506a:	430b      	orrs	r3, r1
 800506c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005070:	e006      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005072:	bf00      	nop
 8005074:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800507c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800508c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800508e:	2300      	movs	r3, #0
 8005090:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005092:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	f000 80b5 	beq.w	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509e:	2300      	movs	r3, #0
 80050a0:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050a4:	4b9d      	ldr	r3, [pc, #628]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d113      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b2:	4b9a      	ldr	r3, [pc, #616]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050b8:	4a98      	ldr	r2, [pc, #608]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050ba:	f043 0304 	orr.w	r3, r3, #4
 80050be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80050c2:	4b96      	ldr	r3, [pc, #600]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80050da:	4b91      	ldr	r3, [pc, #580]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	4a90      	ldr	r2, [pc, #576]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050e6:	f7fc fdcf 	bl	8001c88 <HAL_GetTick>
 80050ea:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050ee:	e00b      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f0:	f7fc fdca 	bl	8001c88 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d903      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005108:	4b85      	ldr	r3, [pc, #532]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ed      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005114:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005118:	2b00      	cmp	r3, #0
 800511a:	d165      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800511c:	4b7f      	ldr	r3, [pc, #508]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800511e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800512a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800512e:	2b00      	cmp	r3, #0
 8005130:	d023      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005136:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800513a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800513e:	4293      	cmp	r3, r2
 8005140:	d01b      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005142:	4b76      	ldr	r3, [pc, #472]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800514c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005150:	4b72      	ldr	r3, [pc, #456]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005156:	4a71      	ldr	r2, [pc, #452]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005160:	4b6e      	ldr	r3, [pc, #440]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005166:	4a6d      	ldr	r2, [pc, #436]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800516c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005170:	4a6a      	ldr	r2, [pc, #424]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005176:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800517a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d019      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fc fd7f 	bl	8001c88 <HAL_GetTick>
 800518a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518e:	e00d      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7fc fd7a 	bl	8001c88 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80051aa:	e006      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ac:	4b5b      	ldr	r3, [pc, #364]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ea      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80051ba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10d      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80051c2:	4b56      	ldr	r3, [pc, #344]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051d4:	4a51      	ldr	r2, [pc, #324]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051d6:	430b      	orrs	r3, r1
 80051d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80051dc:	e008      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051de:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051e2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80051e6:	e003      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051ec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051f0:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d107      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f8:	4b48      	ldr	r3, [pc, #288]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051fe:	4a47      	ldr	r2, [pc, #284]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005200:	f023 0304 	bic.w	r3, r3, #4
 8005204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005208:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005214:	643b      	str	r3, [r7, #64]	@ 0x40
 8005216:	2300      	movs	r3, #0
 8005218:	647b      	str	r3, [r7, #68]	@ 0x44
 800521a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d042      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005224:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005228:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800522c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005230:	d022      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005232:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005236:	d81b      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800523c:	d011      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800523e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005242:	d815      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d019      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800524c:	d110      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800524e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005252:	3308      	adds	r3, #8
 8005254:	4618      	mov	r0, r3
 8005256:	f001 ff55 	bl	8007104 <RCCEx_PLL2_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005260:	e00d      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005262:	4b2e      	ldr	r3, [pc, #184]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	4a2d      	ldr	r2, [pc, #180]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800526c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800526e:	e006      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005276:	e002      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800527c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800527e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005286:	4b25      	ldr	r3, [pc, #148]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800528c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005298:	4a20      	ldr	r2, [pc, #128]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800529a:	430b      	orrs	r3, r1
 800529c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052a6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80052b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052b8:	2300      	movs	r3, #0
 80052ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d032      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80052c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052d2:	d00b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80052d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052d8:	d804      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e2:	d007      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80052ea:	e004      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052ec:	bf00      	nop
 80052ee:	e002      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052f0:	bf00      	nop
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80052f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d112      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80052fe:	4b07      	ldr	r3, [pc, #28]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005300:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005304:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800530c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005310:	4a02      	ldr	r2, [pc, #8]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005312:	430b      	orrs	r3, r1
 8005314:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005318:	e008      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800531a:	bf00      	nop
 800531c:	46020c00 	.word	0x46020c00
 8005320:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005328:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800532c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005338:	633b      	str	r3, [r7, #48]	@ 0x30
 800533a:	2300      	movs	r3, #0
 800533c:	637b      	str	r3, [r7, #52]	@ 0x34
 800533e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005342:	460b      	mov	r3, r1
 8005344:	4313      	orrs	r3, r2
 8005346:	d019      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800534c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005354:	d105      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005356:	4b88      	ldr	r3, [pc, #544]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535a:	4a87      	ldr	r2, [pc, #540]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005360:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005362:	4b85      	ldr	r3, [pc, #532]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005364:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005368:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800536c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005374:	4a80      	ldr	r2, [pc, #512]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005376:	430b      	orrs	r3, r1
 8005378:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800537c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800538a:	2300      	movs	r3, #0
 800538c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005392:	460b      	mov	r3, r1
 8005394:	4313      	orrs	r3, r2
 8005396:	d00c      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005398:	4b77      	ldr	r3, [pc, #476]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800539a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800539e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053aa:	4973      	ldr	r1, [pc, #460]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80053b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	2300      	movs	r3, #0
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d00c      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80053ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053e0:	4965      	ldr	r1, [pc, #404]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80053e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053fe:	460b      	mov	r3, r1
 8005400:	4313      	orrs	r3, r2
 8005402:	d00c      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005404:	4b5c      	ldr	r3, [pc, #368]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800540a:	f023 0218 	bic.w	r2, r3, #24
 800540e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005412:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005416:	4958      	ldr	r1, [pc, #352]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800541e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	d032      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800543a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800543e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005442:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005446:	d105      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005448:	4b4b      	ldr	r3, [pc, #300]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	4a4a      	ldr	r2, [pc, #296]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800544e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005452:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005458:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800545c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005460:	d108      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005466:	3308      	adds	r3, #8
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fe4b 	bl	8007104 <RCCEx_PLL2_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005474:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10d      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800547c:	4b3e      	ldr	r3, [pc, #248]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800547e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800548a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800548e:	493a      	ldr	r1, [pc, #232]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800549c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80054a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054b6:	460b      	mov	r3, r1
 80054b8:	4313      	orrs	r3, r2
 80054ba:	d03a      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80054bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054c8:	d00e      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80054ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ce:	d815      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d017      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80054d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054d8:	d110      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054da:	4b27      	ldr	r3, [pc, #156]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	4a26      	ldr	r2, [pc, #152]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054e4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80054e6:	e00e      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054ec:	3308      	adds	r3, #8
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 fe08 	bl	8007104 <RCCEx_PLL2_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80054fa:	e004      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005502:	e000      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005504:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005506:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10d      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800550e:	4b1a      	ldr	r3, [pc, #104]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005514:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005520:	4915      	ldr	r1, [pc, #84]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005528:	e003      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800552e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	2300      	movs	r3, #0
 8005542:	607b      	str	r3, [r7, #4]
 8005544:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d00c      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800554e:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005554:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800555c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005560:	4905      	ldr	r1, [pc, #20]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005568:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 800556c:	4618      	mov	r0, r3
 800556e:	37e0      	adds	r7, #224	@ 0xe0
 8005570:	46bd      	mov	sp, r7
 8005572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005576:	bf00      	nop
 8005578:	46020c00 	.word	0x46020c00

0800557c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	@ 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005584:	4ba6      	ldr	r3, [pc, #664]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800558e:	4ba4      	ldr	r3, [pc, #656]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005598:	4ba1      	ldr	r3, [pc, #644]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	3301      	adds	r3, #1
 80055a4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80055a6:	4b9e      	ldr	r3, [pc, #632]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80055b2:	4b9b      	ldr	r3, [pc, #620]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	08db      	lsrs	r3, r3, #3
 80055b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d062      	beq.n	800569a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	f200 8081 	bhi.w	80056de <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d024      	beq.n	800562c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d17a      	bne.n	80056de <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005824 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80055f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fa:	4b89      	ldr	r3, [pc, #548]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800560a:	ed97 6a02 	vldr	s12, [r7, #8]
 800560e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005612:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005616:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800561a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800562a:	e08f      	b.n	800574c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800562c:	4b7c      	ldr	r3, [pc, #496]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005638:	4b79      	ldr	r3, [pc, #484]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	0f1b      	lsrs	r3, r3, #28
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	e006      	b.n	8005652 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005644:	4b76      	ldr	r3, [pc, #472]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	0f1b      	lsrs	r3, r3, #28
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4a76      	ldr	r2, [pc, #472]	@ (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005678:	ed97 6a02 	vldr	s12, [r7, #8]
 800567c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800568c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005694:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005698:	e058      	b.n	800574c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	ee07 3a90 	vmov	s15, r3
 80056a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005824 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80056a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80056c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056dc:	e036      	b.n	800574c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056de:	4b50      	ldr	r3, [pc, #320]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80056ea:	4b4d      	ldr	r3, [pc, #308]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	0f1b      	lsrs	r3, r3, #28
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	e006      	b.n	8005704 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80056f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	0f1b      	lsrs	r3, r3, #28
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	4a49      	ldr	r2, [pc, #292]	@ (800582c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	ed97 6a02 	vldr	s12, [r7, #8]
 800572e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005828 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800574a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800574c:	4b34      	ldr	r3, [pc, #208]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005758:	4b31      	ldr	r3, [pc, #196]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800575a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575c:	0a5b      	lsrs	r3, r3, #9
 800575e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800576a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800576e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005772:	edd7 6a07 	vldr	s13, [r7, #28]
 8005776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800577a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577e:	ee17 2a90 	vmov	r2, s15
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e002      	b.n	800578e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800578e:	4b24      	ldr	r3, [pc, #144]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d017      	beq.n	80057ca <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800579a:	4b21      	ldr	r3, [pc, #132]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800579c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579e:	0c1b      	lsrs	r3, r3, #16
 80057a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80057ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057b0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c0:	ee17 2a90 	vmov	r2, s15
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80057d0:	4b13      	ldr	r3, [pc, #76]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057dc:	4b10      	ldr	r3, [pc, #64]	@ (8005820 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e0:	0e1b      	lsrs	r3, r3, #24
 80057e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80057ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005802:	ee17 2a90 	vmov	r2, s15
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800580a:	e002      	b.n	8005812 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	609a      	str	r2, [r3, #8]
}
 8005812:	bf00      	nop
 8005814:	3724      	adds	r7, #36	@ 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	46020c00 	.word	0x46020c00
 8005824:	4b742400 	.word	0x4b742400
 8005828:	46000000 	.word	0x46000000
 800582c:	080096c8 	.word	0x080096c8

08005830 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	@ 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005838:	4ba6      	ldr	r3, [pc, #664]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800583a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005840:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005842:	4ba4      	ldr	r3, [pc, #656]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800584c:	4ba1      	ldr	r3, [pc, #644]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	3301      	adds	r3, #1
 8005858:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800585a:	4b9e      	ldr	r3, [pc, #632]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800585c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005866:	4b9b      	ldr	r3, [pc, #620]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	08db      	lsrs	r3, r3, #3
 800586c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d062      	beq.n	800594e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2b03      	cmp	r3, #3
 800588c:	f200 8081 	bhi.w	8005992 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d024      	beq.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d17a      	bne.n	8005992 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ae:	4b89      	ldr	r3, [pc, #548]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80058be:	ed97 6a02 	vldr	s12, [r7, #8]
 80058c2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058de:	e08f      	b.n	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80058e0:	4b7c      	ldr	r3, [pc, #496]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80058ec:	4b79      	ldr	r3, [pc, #484]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	0f1b      	lsrs	r3, r3, #28
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	e006      	b.n	8005906 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80058f8:	4b76      	ldr	r3, [pc, #472]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	0f1b      	lsrs	r3, r3, #28
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	4a76      	ldr	r2, [pc, #472]	@ (8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590c:	ee07 3a90 	vmov	s15, r3
 8005910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005930:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005940:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005948:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800594c:	e058      	b.n	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005958:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800595c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005960:	4b5c      	ldr	r3, [pc, #368]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005970:	ed97 6a02 	vldr	s12, [r7, #8]
 8005974:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005978:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800597c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005980:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005984:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005990:	e036      	b.n	8005a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005992:	4b50      	ldr	r3, [pc, #320]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800599e:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	0f1b      	lsrs	r3, r3, #28
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	e006      	b.n	80059b8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80059aa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059b0:	041b      	lsls	r3, r3, #16
 80059b2:	0f1b      	lsrs	r3, r3, #28
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	4a49      	ldr	r2, [pc, #292]	@ (8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80059ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	ee07 3a90 	vmov	s15, r3
 80059cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059de:	ed97 6a02 	vldr	s12, [r7, #8]
 80059e2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80059f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059fe:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005a00:	4b34      	ldr	r3, [pc, #208]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d017      	beq.n	8005a3c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a0c:	4b31      	ldr	r3, [pc, #196]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a10:	0a5b      	lsrs	r3, r3, #9
 8005a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a32:	ee17 2a90 	vmov	r2, s15
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005a42:	4b24      	ldr	r3, [pc, #144]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d017      	beq.n	8005a7e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a4e:	4b21      	ldr	r3, [pc, #132]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a58:	ee07 3a90 	vmov	s15, r3
 8005a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a64:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a74:	ee17 2a90 	vmov	r2, s15
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	605a      	str	r2, [r3, #4]
 8005a7c:	e002      	b.n	8005a84 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005a84:	4b13      	ldr	r3, [pc, #76]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d017      	beq.n	8005ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a90:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a94:	0e1b      	lsrs	r3, r3, #24
 8005a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005aa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ab6:	ee17 2a90 	vmov	r2, s15
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005abe:	e002      	b.n	8005ac6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	609a      	str	r2, [r3, #8]
}
 8005ac6:	bf00      	nop
 8005ac8:	3724      	adds	r7, #36	@ 0x24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	46020c00 	.word	0x46020c00
 8005ad8:	4b742400 	.word	0x4b742400
 8005adc:	46000000 	.word	0x46000000
 8005ae0:	080096c8 	.word	0x080096c8

08005ae4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b089      	sub	sp, #36	@ 0x24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005aec:	4ba6      	ldr	r3, [pc, #664]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005af6:	4ba4      	ldr	r3, [pc, #656]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005b00:	4ba1      	ldr	r3, [pc, #644]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	0a1b      	lsrs	r3, r3, #8
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b12:	091b      	lsrs	r3, r3, #4
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005b1a:	4b9b      	ldr	r3, [pc, #620]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1e:	08db      	lsrs	r3, r3, #3
 8005b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b32:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d062      	beq.n	8005c02 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	f200 8081 	bhi.w	8005c46 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d024      	beq.n	8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d17a      	bne.n	8005c46 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b89      	ldr	r3, [pc, #548]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b76:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005b92:	e08f      	b.n	8005cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b94:	4b7c      	ldr	r3, [pc, #496]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005ba0:	4b79      	ldr	r3, [pc, #484]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	0f1b      	lsrs	r3, r3, #28
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	e006      	b.n	8005bba <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005bac:	4b76      	ldr	r3, [pc, #472]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	0f1b      	lsrs	r3, r3, #28
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	4a76      	ldr	r2, [pc, #472]	@ (8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005be4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c00:	e058      	b.n	8005cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c14:	4b5c      	ldr	r3, [pc, #368]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c24:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c28:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c44:	e036      	b.n	8005cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c46:	4b50      	ldr	r3, [pc, #320]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005c52:	4b4d      	ldr	r3, [pc, #308]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	0f1b      	lsrs	r3, r3, #28
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	0f1b      	lsrs	r3, r3, #28
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	4a49      	ldr	r2, [pc, #292]	@ (8005d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c96:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005cb4:	4b34      	ldr	r3, [pc, #208]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d017      	beq.n	8005cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cc0:	4b31      	ldr	r3, [pc, #196]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc4:	0a5b      	lsrs	r3, r3, #9
 8005cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce6:	ee17 2a90 	vmov	r2, s15
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e002      	b.n	8005cf6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005cf6:	4b24      	ldr	r3, [pc, #144]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d017      	beq.n	8005d32 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d02:	4b21      	ldr	r3, [pc, #132]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d0c:	ee07 3a90 	vmov	s15, r3
 8005d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005d14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d18:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d28:	ee17 2a90 	vmov	r2, s15
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	e002      	b.n	8005d38 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005d38:	4b13      	ldr	r3, [pc, #76]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d017      	beq.n	8005d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d44:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d48:	0e1b      	lsrs	r3, r3, #24
 8005d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005d56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d6a:	ee17 2a90 	vmov	r2, s15
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d72:	e002      	b.n	8005d7a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
}
 8005d7a:	bf00      	nop
 8005d7c:	3724      	adds	r7, #36	@ 0x24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	46020c00 	.word	0x46020c00
 8005d8c:	4b742400 	.word	0x4b742400
 8005d90:	46000000 	.word	0x46000000
 8005d94:	080096c8 	.word	0x080096c8

08005d98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08e      	sub	sp, #56	@ 0x38
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005daa:	430b      	orrs	r3, r1
 8005dac:	d145      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005dae:	4baa      	ldr	r3, [pc, #680]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005dba:	4ba7      	ldr	r3, [pc, #668]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d108      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dce:	d104      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd6:	f001 b987 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005dda:	4b9f      	ldr	r3, [pc, #636]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005de4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005de8:	d114      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005df0:	d110      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005df2:	4b99      	ldr	r3, [pc, #612]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e00:	d103      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005e02:	23fa      	movs	r3, #250	@ 0xfa
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e06:	f001 b96f 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005e0a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e0e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005e10:	f001 b96a 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005e14:	4b90      	ldr	r3, [pc, #576]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e20:	d107      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e28:	d103      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005e2a:	4b8c      	ldr	r3, [pc, #560]	@ (800605c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e2e:	f001 b95b 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e36:	f001 b957 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e3e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005e42:	430b      	orrs	r3, r1
 8005e44:	d151      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e46:	4b84      	ldr	r3, [pc, #528]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e4c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005e50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	2b80      	cmp	r3, #128	@ 0x80
 8005e56:	d035      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	2b80      	cmp	r3, #128	@ 0x80
 8005e5c:	d841      	bhi.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e60:	2b60      	cmp	r3, #96	@ 0x60
 8005e62:	d02a      	beq.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e66:	2b60      	cmp	r3, #96	@ 0x60
 8005e68:	d83b      	bhi.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	2b40      	cmp	r3, #64	@ 0x40
 8005e6e:	d009      	beq.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	2b40      	cmp	r3, #64	@ 0x40
 8005e74:	d835      	bhi.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00c      	beq.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d012      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005e82:	e02e      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fb77 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e92:	f001 b929 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e96:	f107 0318 	add.w	r3, r7, #24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fcc8 	bl	8005830 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ea4:	f001 b920 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ea8:	f107 030c 	add.w	r3, r7, #12
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fe19 	bl	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eb6:	f001 b917 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005eba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005ebe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ec0:	f001 b912 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ec4:	4b64      	ldr	r3, [pc, #400]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed0:	d103      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005ed2:	4b63      	ldr	r3, [pc, #396]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ed6:	f001 b907 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ede:	f001 b903 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ee6:	f001 b8ff 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eee:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	d158      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005ef6:	4b58      	ldr	r3, [pc, #352]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ef8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005efc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f08:	d03b      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f10:	d846      	bhi.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f18:	d02e      	beq.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f20:	d83e      	bhi.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f28:	d00b      	beq.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f30:	d836      	bhi.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00d      	beq.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f3e:	d012      	beq.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005f40:	e02e      	b.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fb18 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f50:	f001 b8ca 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f54:	f107 0318 	add.w	r3, r7, #24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fc69 	bl	8005830 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f62:	f001 b8c1 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff fdba 	bl	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f74:	f001 b8b8 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f78:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f7e:	f001 b8b3 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f82:	4b35      	ldr	r3, [pc, #212]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f8e:	d103      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005f90:	4b33      	ldr	r3, [pc, #204]	@ (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005f92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f94:	f001 b8a8 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f9c:	f001 b8a4 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fa4:	f001 b8a0 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	d16e      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005fb4:	4b28      	ldr	r3, [pc, #160]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005fbe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005fc6:	d034      	beq.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005fce:	d85c      	bhi.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd6:	d00b      	beq.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fde:	d854      	bhi.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d016      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fec:	d009      	beq.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fee:	e04c      	b.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fac1 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ffe:	f001 b873 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006002:	f107 0318 	add.w	r3, r7, #24
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fc12 	bl	8005830 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006010:	f001 b86a 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006014:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800601c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006020:	d103      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8006022:	4b10      	ldr	r3, [pc, #64]	@ (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006024:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006026:	f001 b85f 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800602e:	f001 b85b 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006032:	4b09      	ldr	r3, [pc, #36]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b20      	cmp	r3, #32
 800603c:	d121      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800603e:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00e      	beq.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800604a:	4b03      	ldr	r3, [pc, #12]	@ (8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	0e1b      	lsrs	r3, r3, #24
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	e00f      	b.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006056:	bf00      	nop
 8006058:	46020c00 	.word	0x46020c00
 800605c:	0007a120 	.word	0x0007a120
 8006060:	00f42400 	.word	0x00f42400
 8006064:	02dc6c00 	.word	0x02dc6c00
 8006068:	4ba7      	ldr	r3, [pc, #668]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800606a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800606e:	041b      	lsls	r3, r3, #16
 8006070:	0e1b      	lsrs	r3, r3, #24
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	4aa5      	ldr	r2, [pc, #660]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800607e:	f001 b833 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006086:	f001 b82f 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800608e:	f001 b82b 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006096:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800609a:	430b      	orrs	r3, r1
 800609c:	d17f      	bne.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800609e:	4b9a      	ldr	r3, [pc, #616]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d165      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80060b0:	4b95      	ldr	r3, [pc, #596]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060b6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80060ba:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060c2:	d034      	beq.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060ca:	d853      	bhi.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060d2:	d00b      	beq.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80060d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060da:	d84b      	bhi.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060e8:	d009      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80060ea:	e043      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fa43 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80060fa:	f000 bff5 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060fe:	f107 0318 	add.w	r3, r7, #24
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fb94 	bl	8005830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800610c:	f000 bfec 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006110:	4b7d      	ldr	r3, [pc, #500]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800611c:	d103      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800611e:	4b7c      	ldr	r3, [pc, #496]	@ (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006122:	f000 bfe1 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800612a:	f000 bfdd 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800612e:	4b76      	ldr	r3, [pc, #472]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	d118      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800613a:	4b73      	ldr	r3, [pc, #460]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006146:	4b70      	ldr	r3, [pc, #448]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	0e1b      	lsrs	r3, r3, #24
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	e006      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006152:	4b6d      	ldr	r3, [pc, #436]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	0e1b      	lsrs	r3, r3, #24
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	4a6a      	ldr	r2, [pc, #424]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006168:	f000 bfbe 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006170:	f000 bfba 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006178:	f000 bfb6 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006182:	d108      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff f9f7 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	637b      	str	r3, [r7, #52]	@ 0x34
 8006192:	f000 bfa9 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	637b      	str	r3, [r7, #52]	@ 0x34
 800619a:	f000 bfa5 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800619e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a2:	1e51      	subs	r1, r2, #1
 80061a4:	430b      	orrs	r3, r1
 80061a6:	d136      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061a8:	4b57      	ldr	r3, [pc, #348]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80061ba:	f7fe fb55 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 80061be:	6378      	str	r0, [r7, #52]	@ 0x34
 80061c0:	f000 bf92 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d104      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061ca:	f7fe fa1d 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80061ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80061d0:	f000 bf8a 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061d4:	4b4c      	ldr	r3, [pc, #304]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e0:	d106      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d103      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80061e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ec:	f000 bf7c 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061f0:	4b45      	ldr	r3, [pc, #276]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d107      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2b03      	cmp	r3, #3
 8006202:	d104      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
 800620a:	f000 bf6d 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	637b      	str	r3, [r7, #52]	@ 0x34
 8006212:	f000 bf69 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621a:	1e91      	subs	r1, r2, #2
 800621c:	430b      	orrs	r3, r1
 800621e:	d136      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006220:	4b39      	ldr	r3, [pc, #228]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006226:	f003 030c 	and.w	r3, r3, #12
 800622a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006232:	f7fe fb05 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006236:	6378      	str	r0, [r7, #52]	@ 0x34
 8006238:	f000 bf56 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	2b04      	cmp	r3, #4
 8006240:	d104      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006242:	f7fe f9e1 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006246:	6378      	str	r0, [r7, #52]	@ 0x34
 8006248:	f000 bf4e 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800624c:	4b2e      	ldr	r3, [pc, #184]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006258:	d106      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	2b08      	cmp	r3, #8
 800625e:	d103      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006260:	4b2c      	ldr	r3, [pc, #176]	@ (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006262:	637b      	str	r3, [r7, #52]	@ 0x34
 8006264:	f000 bf40 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006268:	4b27      	ldr	r3, [pc, #156]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800626a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b02      	cmp	r3, #2
 8006274:	d107      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	2b0c      	cmp	r3, #12
 800627a:	d104      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800627c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006280:	637b      	str	r3, [r7, #52]	@ 0x34
 8006282:	f000 bf31 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
 800628a:	f000 bf2d 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800628e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006292:	1f11      	subs	r1, r2, #4
 8006294:	430b      	orrs	r3, r1
 8006296:	d13f      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006298:	4b1b      	ldr	r3, [pc, #108]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800629a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800629e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062aa:	f7fe fac9 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80062ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80062b0:	f000 bf1a 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d104      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062ba:	f7fe f9a5 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80062be:	6378      	str	r0, [r7, #52]	@ 0x34
 80062c0:	f000 bf12 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80062c4:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d0:	d106      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d103      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80062d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80062da:	637b      	str	r3, [r7, #52]	@ 0x34
 80062dc:	f000 bf04 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80062e0:	4b09      	ldr	r3, [pc, #36]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d107      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	2b30      	cmp	r3, #48	@ 0x30
 80062f2:	d104      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80062f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fa:	f000 bef5 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
 8006302:	f000 bef1 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006306:	bf00      	nop
 8006308:	46020c00 	.word	0x46020c00
 800630c:	080096c8 	.word	0x080096c8
 8006310:	02dc6c00 	.word	0x02dc6c00
 8006314:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800631c:	f1a2 0108 	sub.w	r1, r2, #8
 8006320:	430b      	orrs	r3, r1
 8006322:	d136      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006324:	4ba4      	ldr	r3, [pc, #656]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800632a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800632e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006336:	f7fe fa83 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 800633a:	6378      	str	r0, [r7, #52]	@ 0x34
 800633c:	f000 bed4 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d104      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006346:	f7fe f95f 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 800634a:	6378      	str	r0, [r7, #52]	@ 0x34
 800634c:	f000 becc 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006350:	4b99      	ldr	r3, [pc, #612]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800635c:	d106      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	2b80      	cmp	r3, #128	@ 0x80
 8006362:	d103      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006364:	4b95      	ldr	r3, [pc, #596]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006366:	637b      	str	r3, [r7, #52]	@ 0x34
 8006368:	f000 bebe 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800636c:	4b92      	ldr	r3, [pc, #584]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800636e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d107      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	2bc0      	cmp	r3, #192	@ 0xc0
 800637e:	d104      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006384:	637b      	str	r3, [r7, #52]	@ 0x34
 8006386:	f000 beaf 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
 800638e:	f000 beab 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006396:	f1a2 0110 	sub.w	r1, r2, #16
 800639a:	430b      	orrs	r3, r1
 800639c:	d139      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800639e:	4b86      	ldr	r3, [pc, #536]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063b0:	f7fe fa46 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80063b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80063b6:	f000 be97 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c0:	d104      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063c2:	f7fe f921 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80063c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80063c8:	f000 be8e 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80063cc:	4b7a      	ldr	r3, [pc, #488]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d8:	d107      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e0:	d103      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80063e2:	4b76      	ldr	r3, [pc, #472]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80063e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e6:	f000 be7f 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80063ea:	4b73      	ldr	r3, [pc, #460]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d108      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063fe:	d104      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006400:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006404:	637b      	str	r3, [r7, #52]	@ 0x34
 8006406:	f000 be6f 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34
 800640e:	f000 be6b 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006416:	f1a2 0120 	sub.w	r1, r2, #32
 800641a:	430b      	orrs	r3, r1
 800641c:	d158      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800641e:	4b66      	ldr	r3, [pc, #408]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006430:	f7fe fa2e 	bl	8004890 <HAL_RCC_GetPCLK3Freq>
 8006434:	6378      	str	r0, [r7, #52]	@ 0x34
 8006436:	f000 be57 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	2b01      	cmp	r3, #1
 800643e:	d104      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006440:	f7fe f8e2 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006444:	6378      	str	r0, [r7, #52]	@ 0x34
 8006446:	f000 be4f 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800644a:	4b5b      	ldr	r3, [pc, #364]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006456:	d106      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645a:	2b02      	cmp	r3, #2
 800645c:	d103      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800645e:	4b57      	ldr	r3, [pc, #348]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006460:	637b      	str	r3, [r7, #52]	@ 0x34
 8006462:	f000 be41 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006466:	4b54      	ldr	r3, [pc, #336]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d107      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	2b03      	cmp	r3, #3
 8006478:	d104      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800647a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006480:	f000 be32 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006484:	4b4c      	ldr	r3, [pc, #304]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b20      	cmp	r3, #32
 800648e:	d11b      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006492:	2b04      	cmp	r3, #4
 8006494:	d118      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006496:	4b48      	ldr	r3, [pc, #288]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80064a2:	4b45      	ldr	r3, [pc, #276]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	0e1b      	lsrs	r3, r3, #24
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	e006      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80064ae:	4b42      	ldr	r3, [pc, #264]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064b4:	041b      	lsls	r3, r3, #16
 80064b6:	0e1b      	lsrs	r3, r3, #24
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	4a40      	ldr	r2, [pc, #256]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80064be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064c4:	f000 be10 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80064cc:	f000 be0c 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80064d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80064d8:	430b      	orrs	r3, r1
 80064da:	d173      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80064dc:	4b36      	ldr	r3, [pc, #216]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064e2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80064e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ee:	d104      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064f0:	f7fe f88a 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80064f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80064f6:	f000 bdf7 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006500:	d108      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006502:	f107 0318 	add.w	r3, r7, #24
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff f992 	bl	8005830 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006510:	f000 bdea 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800651a:	f7fe f977 	bl	800480c <HAL_RCC_GetHCLKFreq>
 800651e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006520:	f000 bde2 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800652a:	d122      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800652c:	4b22      	ldr	r3, [pc, #136]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b20      	cmp	r3, #32
 8006536:	d118      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006538:	4b1f      	ldr	r3, [pc, #124]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006544:	4b1c      	ldr	r3, [pc, #112]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	0e1b      	lsrs	r3, r3, #24
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	e006      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006550:	4b19      	ldr	r3, [pc, #100]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006556:	041b      	lsls	r3, r3, #16
 8006558:	0e1b      	lsrs	r3, r3, #24
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	4a18      	ldr	r2, [pc, #96]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006564:	637b      	str	r3, [r7, #52]	@ 0x34
 8006566:	f000 bdbf 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
 800656e:	f000 bdbb 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006572:	4b11      	ldr	r3, [pc, #68]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800657a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800657e:	d107      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006586:	d103      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006588:	4b0c      	ldr	r3, [pc, #48]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800658a:	637b      	str	r3, [r7, #52]	@ 0x34
 800658c:	f000 bdac 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006590:	4b09      	ldr	r3, [pc, #36]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065a4:	d103      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80065a6:	4b05      	ldr	r3, [pc, #20]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80065a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065aa:	f000 bd9d 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b2:	f000 bd99 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80065b6:	bf00      	nop
 80065b8:	46020c00 	.word	0x46020c00
 80065bc:	00f42400 	.word	0x00f42400
 80065c0:	080096c8 	.word	0x080096c8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80065c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80065cc:	430b      	orrs	r3, r1
 80065ce:	d158      	bne.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80065d0:	4bad      	ldr	r3, [pc, #692]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d84b      	bhi.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80065e2:	a201      	add	r2, pc, #4	@ (adr r2, 80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	08006621 	.word	0x08006621
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	0800660f 	.word	0x0800660f
 80065f4:	0800662b 	.word	0x0800662b
 80065f8:	08006635 	.word	0x08006635
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe ffbb 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800660a:	f000 bd6d 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fa66 	bl	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800661c:	f000 bd64 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006620:	f7fe f8f4 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8006624:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006626:	f000 bd5f 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800662a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006630:	f000 bd5a 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006634:	4b94      	ldr	r3, [pc, #592]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b20      	cmp	r3, #32
 800663e:	d118      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006640:	4b91      	ldr	r3, [pc, #580]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 800664c:	4b8e      	ldr	r3, [pc, #568]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	0e1b      	lsrs	r3, r3, #24
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	e006      	b.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006658:	4b8b      	ldr	r3, [pc, #556]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800665a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	0e1b      	lsrs	r3, r3, #24
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	4a89      	ldr	r2, [pc, #548]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800666e:	f000 bd3b 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006676:	f000 bd37 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800667e:	f000 bd33 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006686:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800668a:	430b      	orrs	r3, r1
 800668c:	d167      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800668e:	4b7e      	ldr	r3, [pc, #504]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006694:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006698:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066a0:	d036      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066a8:	d855      	bhi.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066b0:	d029      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066b8:	d84d      	bhi.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c0:	d013      	beq.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c8:	d845      	bhi.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d6:	d13e      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe ff4d 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066e6:	f000 bcff 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff f9f8 	bl	8005ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066f8:	f000 bcf6 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80066fc:	f7fe f886 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8006700:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006702:	f000 bcf1 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006706:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800670c:	f000 bcec 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006710:	4b5d      	ldr	r3, [pc, #372]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b20      	cmp	r3, #32
 800671a:	d118      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800671c:	4b5a      	ldr	r3, [pc, #360]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006728:	4b57      	ldr	r3, [pc, #348]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	0e1b      	lsrs	r3, r3, #24
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006734:	4b54      	ldr	r3, [pc, #336]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	0e1b      	lsrs	r3, r3, #24
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	4a52      	ldr	r2, [pc, #328]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800674a:	f000 bccd 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006752:	f000 bcc9 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800675a:	f000 bcc5 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800675e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006762:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006766:	430b      	orrs	r3, r1
 8006768:	d14c      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800676a:	4b47      	ldr	r3, [pc, #284]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800676c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006770:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006774:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800677c:	f7fe f860 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006780:	6378      	str	r0, [r7, #52]	@ 0x34
 8006782:	f000 bcb1 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678c:	d104      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800678e:	f7fd ff3b 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006792:	6378      	str	r0, [r7, #52]	@ 0x34
 8006794:	f000 bca8 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006798:	4b3b      	ldr	r3, [pc, #236]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a4:	d107      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ac:	d103      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80067ae:	4b38      	ldr	r3, [pc, #224]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80067b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b2:	f000 bc99 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80067b6:	4b34      	ldr	r3, [pc, #208]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d11c      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067c8:	d118      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80067d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	0e1b      	lsrs	r3, r3, #24
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	e006      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80067e2:	4b29      	ldr	r3, [pc, #164]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067e8:	041b      	lsls	r3, r3, #16
 80067ea:	0e1b      	lsrs	r3, r3, #24
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	4a26      	ldr	r2, [pc, #152]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80067f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f8:	f000 bc76 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006800:	f000 bc72 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006808:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800680c:	430b      	orrs	r3, r1
 800680e:	d152      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006810:	4b1d      	ldr	r3, [pc, #116]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006816:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800681a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800681c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006822:	f7fe f80d 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006826:	6378      	str	r0, [r7, #52]	@ 0x34
 8006828:	f000 bc5e 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006832:	d104      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006834:	f7fd fee8 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006838:	6378      	str	r0, [r7, #52]	@ 0x34
 800683a:	f000 bc55 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800683e:	4b12      	ldr	r3, [pc, #72]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800684a:	d107      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006852:	d103      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006854:	4b0e      	ldr	r3, [pc, #56]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006856:	637b      	str	r3, [r7, #52]	@ 0x34
 8006858:	f000 bc46 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b20      	cmp	r3, #32
 8006866:	d122      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800686e:	d11e      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006870:	4b05      	ldr	r3, [pc, #20]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 800687c:	4b02      	ldr	r3, [pc, #8]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	0e1b      	lsrs	r3, r3, #24
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	e00c      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006888:	46020c00 	.word	0x46020c00
 800688c:	080096c8 	.word	0x080096c8
 8006890:	00f42400 	.word	0x00f42400
 8006894:	4ba1      	ldr	r3, [pc, #644]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	0e1b      	lsrs	r3, r3, #24
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	4a9f      	ldr	r2, [pc, #636]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068aa:	f000 bc1d 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b2:	f000 bc19 	b.w	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80068b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80068be:	430b      	orrs	r3, r1
 80068c0:	d151      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80068c2:	4b96      	ldr	r3, [pc, #600]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80068d2:	d024      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068d8:	d842      	bhi.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	2b80      	cmp	r3, #128	@ 0x80
 80068de:	d00d      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	2b80      	cmp	r3, #128	@ 0x80
 80068e4:	d83c      	bhi.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	2b40      	cmp	r3, #64	@ 0x40
 80068f0:	d011      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80068f2:	e035      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80068f4:	f7fd ffcc 	bl	8004890 <HAL_RCC_GetPCLK3Freq>
 80068f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068fa:	e3f5      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068fc:	4b87      	ldr	r3, [pc, #540]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006908:	d102      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800690a:	4b86      	ldr	r3, [pc, #536]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800690c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800690e:	e3eb      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006914:	e3e8      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006916:	f7fd fe77 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 800691a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800691c:	e3e4      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800691e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d117      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800692a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006936:	4b79      	ldr	r3, [pc, #484]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	0e1b      	lsrs	r3, r3, #24
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	e006      	b.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006942:	4b76      	ldr	r3, [pc, #472]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006948:	041b      	lsls	r3, r3, #16
 800694a:	0e1b      	lsrs	r3, r3, #24
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	4a73      	ldr	r2, [pc, #460]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006956:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006958:	e3c6      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800695e:	e3c3      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006964:	e3c0      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800696a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800696e:	430b      	orrs	r3, r1
 8006970:	d147      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006972:	4b6a      	ldr	r3, [pc, #424]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006978:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800697c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	2b00      	cmp	r3, #0
 8006982:	d103      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006984:	f7fd ff5c 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006988:	6378      	str	r0, [r7, #52]	@ 0x34
 800698a:	e3ad      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006992:	d103      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006994:	f7fd fe38 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006998:	6378      	str	r0, [r7, #52]	@ 0x34
 800699a:	e3a5      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800699c:	4b5f      	ldr	r3, [pc, #380]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a8:	d106      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069b0:	d102      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80069b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b6:	e397      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80069b8:	4b58      	ldr	r3, [pc, #352]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d11b      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80069ca:	d117      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069cc:	4b53      	ldr	r3, [pc, #332]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80069d8:	4b50      	ldr	r3, [pc, #320]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	0e1b      	lsrs	r3, r3, #24
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	e006      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80069e4:	4b4d      	ldr	r3, [pc, #308]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069ea:	041b      	lsls	r3, r3, #16
 80069ec:	0e1b      	lsrs	r3, r3, #24
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	4a4b      	ldr	r2, [pc, #300]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80069f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069fa:	e375      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a00:	e372      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a06:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	d164      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006a0e:	4b43      	ldr	r3, [pc, #268]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d120      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a20:	4b3e      	ldr	r3, [pc, #248]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d117      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006a38:	4b38      	ldr	r3, [pc, #224]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	0e1b      	lsrs	r3, r3, #24
 8006a3e:	f003 030f 	and.w	r3, r3, #15
 8006a42:	e006      	b.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006a44:	4b35      	ldr	r3, [pc, #212]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a4a:	041b      	lsls	r3, r3, #16
 8006a4c:	0e1b      	lsrs	r3, r3, #24
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	4a33      	ldr	r2, [pc, #204]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5a:	e345      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a60:	e342      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006a62:	4b2e      	ldr	r3, [pc, #184]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a70:	d112      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a78:	d10e      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a7a:	4b28      	ldr	r3, [pc, #160]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a88:	d102      	bne.n	8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006a8a:	23fa      	movs	r3, #250	@ 0xfa
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a8e:	e32b      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a96:	e327      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006a98:	4b20      	ldr	r3, [pc, #128]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa4:	d106      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aac:	d102      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006aae:	4b1d      	ldr	r3, [pc, #116]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab2:	e319      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006ab4:	4b19      	ldr	r3, [pc, #100]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d107      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ac8:	d103      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad0:	e30a      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad6:	e307      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006adc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	d16b      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006aea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006aee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d127      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006af6:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d11e      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b02:	4b06      	ldr	r3, [pc, #24]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00c      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006b0e:	4b03      	ldr	r3, [pc, #12]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	0e1b      	lsrs	r3, r3, #24
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	e00d      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006b1a:	bf00      	nop
 8006b1c:	46020c00 	.word	0x46020c00
 8006b20:	080096c8 	.word	0x080096c8
 8006b24:	00f42400 	.word	0x00f42400
 8006b28:	4b94      	ldr	r3, [pc, #592]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	0e1b      	lsrs	r3, r3, #24
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	4a92      	ldr	r2, [pc, #584]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3e:	e2d3      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b44:	e2d0      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006b46:	4b8d      	ldr	r3, [pc, #564]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b54:	d112      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b5c:	d10e      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b5e:	4b87      	ldr	r3, [pc, #540]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b6c:	d102      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006b6e:	23fa      	movs	r3, #250	@ 0xfa
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b72:	e2b9      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b7a:	e2b5      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b88:	d106      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b90:	d102      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006b92:	4b7c      	ldr	r3, [pc, #496]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b96:	e2a7      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006b98:	4b78      	ldr	r3, [pc, #480]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d107      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bac:	d103      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb4:	e298      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bba:	e295      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	d147      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006bd2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d103      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bda:	f7fd fe31 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006bde:	6378      	str	r0, [r7, #52]	@ 0x34
 8006be0:	e282      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006be2:	4b66      	ldr	r3, [pc, #408]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf0:	d112      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bf8:	d10e      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bfa:	4b60      	ldr	r3, [pc, #384]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c08:	d102      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006c0a:	23fa      	movs	r3, #250	@ 0xfa
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c0e:	e26b      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c16:	e267      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006c18:	4b58      	ldr	r3, [pc, #352]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c24:	d106      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006c2e:	4b55      	ldr	r3, [pc, #340]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c32:	e259      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006c34:	4b51      	ldr	r3, [pc, #324]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d107      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c48:	d103      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c50:	e24a      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c56:	e247      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c5c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006c60:	430b      	orrs	r3, r1
 8006c62:	d12d      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006c64:	4b45      	ldr	r3, [pc, #276]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c6a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006c6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006c70:	4b42      	ldr	r3, [pc, #264]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c7c:	d105      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006c84:	4b3f      	ldr	r3, [pc, #252]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c88:	e22e      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe fc70 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca0:	e222      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ca8:	d107      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006caa:	f107 0318 	add.w	r3, r7, #24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fdbe 	bl	8005830 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb8:	e216      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cbe:	e213      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	d15d      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cd2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cde:	d028      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ce6:	d845      	bhi.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cee:	d013      	beq.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cf6:	d83d      	bhi.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d004      	beq.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d04:	d004      	beq.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006d06:	e035      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006d08:	f7fd fdae 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8006d0c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d0e:	e1eb      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d10:	f7fd fc7a 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006d14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d16:	e1e7      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d18:	4b18      	ldr	r3, [pc, #96]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d24:	d102      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006d26:	4b17      	ldr	r3, [pc, #92]	@ (8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006d28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d2a:	e1dd      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d30:	e1da      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d32:	4b12      	ldr	r3, [pc, #72]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d117      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	0e1b      	lsrs	r3, r3, #24
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	e006      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006d56:	4b09      	ldr	r3, [pc, #36]	@ (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	0e1b      	lsrs	r3, r3, #24
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	4a06      	ldr	r2, [pc, #24]	@ (8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d6c:	e1bc      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d72:	e1b9      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d78:	e1b6      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006d7a:	bf00      	nop
 8006d7c:	46020c00 	.word	0x46020c00
 8006d80:	080096c8 	.word	0x080096c8
 8006d84:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d8c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006d90:	430b      	orrs	r3, r1
 8006d92:	d156      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006d94:	4ba5      	ldr	r3, [pc, #660]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006da6:	d028      	beq.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dae:	d845      	bhi.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006db6:	d013      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dbe:	d83d      	bhi.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dcc:	d004      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006dce:	e035      	b.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f7fd fd36 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006dd4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006dd6:	e187      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006dd8:	f7fd fc16 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006ddc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006dde:	e183      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006de0:	4b92      	ldr	r3, [pc, #584]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dec:	d102      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006dee:	4b90      	ldr	r3, [pc, #576]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006df0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006df2:	e179      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006df8:	e176      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006dfa:	4b8c      	ldr	r3, [pc, #560]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d117      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e06:	4b89      	ldr	r3, [pc, #548]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006e12:	4b86      	ldr	r3, [pc, #536]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	0e1b      	lsrs	r3, r3, #24
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	e006      	b.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006e1e:	4b83      	ldr	r3, [pc, #524]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	0e1b      	lsrs	r3, r3, #24
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	4a81      	ldr	r2, [pc, #516]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e34:	e158      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e3a:	e155      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e40:	e152      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e46:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	d177      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006e4e:	4b77      	ldr	r3, [pc, #476]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e54:	f003 0318 	and.w	r3, r3, #24
 8006e58:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	2b18      	cmp	r3, #24
 8006e5e:	d86b      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006e60:	a201      	add	r2, pc, #4	@ (adr r2, 8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006ecd 	.word	0x08006ecd
 8006e6c:	08006f39 	.word	0x08006f39
 8006e70:	08006f39 	.word	0x08006f39
 8006e74:	08006f39 	.word	0x08006f39
 8006e78:	08006f39 	.word	0x08006f39
 8006e7c:	08006f39 	.word	0x08006f39
 8006e80:	08006f39 	.word	0x08006f39
 8006e84:	08006f39 	.word	0x08006f39
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006f39 	.word	0x08006f39
 8006e90:	08006f39 	.word	0x08006f39
 8006e94:	08006f39 	.word	0x08006f39
 8006e98:	08006f39 	.word	0x08006f39
 8006e9c:	08006f39 	.word	0x08006f39
 8006ea0:	08006f39 	.word	0x08006f39
 8006ea4:	08006f39 	.word	0x08006f39
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006f39 	.word	0x08006f39
 8006eb0:	08006f39 	.word	0x08006f39
 8006eb4:	08006f39 	.word	0x08006f39
 8006eb8:	08006f39 	.word	0x08006f39
 8006ebc:	08006f39 	.word	0x08006f39
 8006ec0:	08006f39 	.word	0x08006f39
 8006ec4:	08006f39 	.word	0x08006f39
 8006ec8:	08006ef7 	.word	0x08006ef7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006ecc:	f7fd fce0 	bl	8004890 <HAL_RCC_GetPCLK3Freq>
 8006ed0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ed2:	e109      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ed4:	f7fd fb98 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006eda:	e105      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006edc:	4b53      	ldr	r3, [pc, #332]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee8:	d102      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006eea:	4b51      	ldr	r3, [pc, #324]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006eec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eee:	e0fb      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ef4:	e0f8      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ef6:	4b4d      	ldr	r3, [pc, #308]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d117      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f02:	4b4a      	ldr	r3, [pc, #296]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006f0e:	4b47      	ldr	r3, [pc, #284]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0e1b      	lsrs	r3, r3, #24
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	e006      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006f1a:	4b44      	ldr	r3, [pc, #272]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	0e1b      	lsrs	r3, r3, #24
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	4a42      	ldr	r2, [pc, #264]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f30:	e0da      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f36:	e0d7      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f3c:	e0d4      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f42:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006f46:	430b      	orrs	r3, r1
 8006f48:	d155      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006f4a:	4b38      	ldr	r3, [pc, #224]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006f54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f5c:	d013      	beq.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f64:	d844      	bhi.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f6c:	d013      	beq.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f74:	d83c      	bhi.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d014      	beq.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f82:	d014      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006f84:	e034      	b.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f86:	f107 0318 	add.w	r3, r7, #24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fc50 	bl	8005830 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f94:	e0a8      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe faee 	bl	800557c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fa4:	e0a0      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006fa6:	f7fd fb2f 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8006faa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fac:	e09c      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fae:	4b1f      	ldr	r3, [pc, #124]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	d117      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fba:	4b1c      	ldr	r3, [pc, #112]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006fc6:	4b19      	ldr	r3, [pc, #100]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	0e1b      	lsrs	r3, r3, #24
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006fd2:	4b16      	ldr	r3, [pc, #88]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fd8:	041b      	lsls	r3, r3, #16
 8006fda:	0e1b      	lsrs	r3, r3, #24
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	4a14      	ldr	r2, [pc, #80]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fe8:	e07e      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fee:	e07b      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ff4:	e078      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffa:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006ffe:	430b      	orrs	r3, r1
 8007000:	d138      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007002:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800700c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800700e:	4b07      	ldr	r3, [pc, #28]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b02      	cmp	r3, #2
 800701a:	d10d      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8007022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
 8007028:	e05e      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800702a:	bf00      	nop
 800702c:	46020c00 	.word	0x46020c00
 8007030:	00f42400 	.word	0x00f42400
 8007034:	080096c8 	.word	0x080096c8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007038:	4b2e      	ldr	r3, [pc, #184]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800703a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800703e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007042:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007046:	d112      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800704e:	d10e      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007050:	4b28      	ldr	r3, [pc, #160]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800705a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800705e:	d102      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007060:	23fa      	movs	r3, #250	@ 0xfa
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007064:	e040      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007066:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800706c:	e03c      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	637b      	str	r3, [r7, #52]	@ 0x34
 8007072:	e039      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007078:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800707c:	430b      	orrs	r3, r1
 800707e:	d131      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007080:	4b1c      	ldr	r3, [pc, #112]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007082:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007086:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800708a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800708c:	4b19      	ldr	r3, [pc, #100]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007098:	d105      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80070a0:	4b15      	ldr	r3, [pc, #84]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a4:	e020      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80070a6:	4b13      	ldr	r3, [pc, #76]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b2:	d106      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ba:	d102      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80070bc:	4b0f      	ldr	r3, [pc, #60]	@ (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80070be:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c0:	e012      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80070c2:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ce:	d106      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d6:	d102      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80070d8:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
 80070dc:	e004      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e2:	e001      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80070e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3738      	adds	r7, #56	@ 0x38
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	46020c00 	.word	0x46020c00
 80070f8:	02dc6c00 	.word	0x02dc6c00
 80070fc:	016e3600 	.word	0x016e3600
 8007100:	00f42400 	.word	0x00f42400

08007104 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800710c:	4b47      	ldr	r3, [pc, #284]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a46      	ldr	r2, [pc, #280]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 8007112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007116:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007118:	f7fa fdb6 	bl	8001c88 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800711e:	e008      	b.n	8007132 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007120:	f7fa fdb2 	bl	8001c88 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e077      	b.n	8007222 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007132:	4b3e      	ldr	r3, [pc, #248]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f0      	bne.n	8007120 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800713e:	4b3b      	ldr	r3, [pc, #236]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007142:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6811      	ldr	r1, [r2, #0]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6852      	ldr	r2, [r2, #4]
 8007152:	3a01      	subs	r2, #1
 8007154:	0212      	lsls	r2, r2, #8
 8007156:	430a      	orrs	r2, r1
 8007158:	4934      	ldr	r1, [pc, #208]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 800715a:	4313      	orrs	r3, r2
 800715c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800715e:	4b33      	ldr	r3, [pc, #204]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 8007160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007162:	4b33      	ldr	r3, [pc, #204]	@ (8007230 <RCCEx_PLL2_Config+0x12c>)
 8007164:	4013      	ands	r3, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6892      	ldr	r2, [r2, #8]
 800716a:	3a01      	subs	r2, #1
 800716c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	68d2      	ldr	r2, [r2, #12]
 8007174:	3a01      	subs	r2, #1
 8007176:	0252      	lsls	r2, r2, #9
 8007178:	b292      	uxth	r2, r2
 800717a:	4311      	orrs	r1, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6912      	ldr	r2, [r2, #16]
 8007180:	3a01      	subs	r2, #1
 8007182:	0412      	lsls	r2, r2, #16
 8007184:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007188:	4311      	orrs	r1, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6952      	ldr	r2, [r2, #20]
 800718e:	3a01      	subs	r2, #1
 8007190:	0612      	lsls	r2, r2, #24
 8007192:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007196:	430a      	orrs	r2, r1
 8007198:	4924      	ldr	r1, [pc, #144]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 800719a:	4313      	orrs	r3, r2
 800719c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800719e:	4b23      	ldr	r3, [pc, #140]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a2:	f023 020c 	bic.w	r2, r3, #12
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	4920      	ldr	r1, [pc, #128]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80071b0:	4b1e      	ldr	r3, [pc, #120]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	491c      	ldr	r1, [pc, #112]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80071be:	4b1b      	ldr	r3, [pc, #108]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c2:	4a1a      	ldr	r2, [pc, #104]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071c4:	f023 0310 	bic.w	r3, r3, #16
 80071c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071ca:	4b18      	ldr	r3, [pc, #96]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	69d2      	ldr	r2, [r2, #28]
 80071da:	00d2      	lsls	r2, r2, #3
 80071dc:	4913      	ldr	r1, [pc, #76]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80071e2:	4b12      	ldr	r3, [pc, #72]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	4a11      	ldr	r2, [pc, #68]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071e8:	f043 0310 	orr.w	r3, r3, #16
 80071ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80071ee:	4b0f      	ldr	r3, [pc, #60]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a0e      	ldr	r2, [pc, #56]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 80071f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071fa:	f7fa fd45 	bl	8001c88 <HAL_GetTick>
 80071fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007200:	e008      	b.n	8007214 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007202:	f7fa fd41 	bl	8001c88 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e006      	b.n	8007222 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007214:	4b05      	ldr	r3, [pc, #20]	@ (800722c <RCCEx_PLL2_Config+0x128>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0f0      	beq.n	8007202 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007220:	2300      	movs	r3, #0

}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	46020c00 	.word	0x46020c00
 8007230:	80800000 	.word	0x80800000

08007234 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800723c:	4b47      	ldr	r3, [pc, #284]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a46      	ldr	r2, [pc, #280]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007246:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007248:	f7fa fd1e 	bl	8001c88 <HAL_GetTick>
 800724c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800724e:	e008      	b.n	8007262 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007250:	f7fa fd1a 	bl	8001c88 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e077      	b.n	8007352 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007262:	4b3e      	ldr	r3, [pc, #248]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800726e:	4b3b      	ldr	r3, [pc, #236]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007272:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6811      	ldr	r1, [r2, #0]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6852      	ldr	r2, [r2, #4]
 8007282:	3a01      	subs	r2, #1
 8007284:	0212      	lsls	r2, r2, #8
 8007286:	430a      	orrs	r2, r1
 8007288:	4934      	ldr	r1, [pc, #208]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 800728a:	4313      	orrs	r3, r2
 800728c:	630b      	str	r3, [r1, #48]	@ 0x30
 800728e:	4b33      	ldr	r3, [pc, #204]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007292:	4b33      	ldr	r3, [pc, #204]	@ (8007360 <RCCEx_PLL3_Config+0x12c>)
 8007294:	4013      	ands	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6892      	ldr	r2, [r2, #8]
 800729a:	3a01      	subs	r2, #1
 800729c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	68d2      	ldr	r2, [r2, #12]
 80072a4:	3a01      	subs	r2, #1
 80072a6:	0252      	lsls	r2, r2, #9
 80072a8:	b292      	uxth	r2, r2
 80072aa:	4311      	orrs	r1, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6912      	ldr	r2, [r2, #16]
 80072b0:	3a01      	subs	r2, #1
 80072b2:	0412      	lsls	r2, r2, #16
 80072b4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80072b8:	4311      	orrs	r1, r2
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6952      	ldr	r2, [r2, #20]
 80072be:	3a01      	subs	r2, #1
 80072c0:	0612      	lsls	r2, r2, #24
 80072c2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80072c6:	430a      	orrs	r2, r1
 80072c8:	4924      	ldr	r1, [pc, #144]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80072ce:	4b23      	ldr	r3, [pc, #140]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	f023 020c 	bic.w	r2, r3, #12
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	4920      	ldr	r1, [pc, #128]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80072e0:	4b1e      	ldr	r3, [pc, #120]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 80072e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	491c      	ldr	r1, [pc, #112]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80072ee:	4b1b      	ldr	r3, [pc, #108]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 80072f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f2:	4a1a      	ldr	r2, [pc, #104]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 80072f4:	f023 0310 	bic.w	r3, r3, #16
 80072f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072fa:	4b18      	ldr	r3, [pc, #96]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 80072fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007302:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	69d2      	ldr	r2, [r2, #28]
 800730a:	00d2      	lsls	r2, r2, #3
 800730c:	4913      	ldr	r1, [pc, #76]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 800730e:	4313      	orrs	r3, r2
 8007310:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007312:	4b12      	ldr	r3, [pc, #72]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007316:	4a11      	ldr	r2, [pc, #68]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007318:	f043 0310 	orr.w	r3, r3, #16
 800731c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800731e:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a0e      	ldr	r2, [pc, #56]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007328:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800732a:	f7fa fcad 	bl	8001c88 <HAL_GetTick>
 800732e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007330:	e008      	b.n	8007344 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007332:	f7fa fca9 	bl	8001c88 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e006      	b.n	8007352 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <RCCEx_PLL3_Config+0x128>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f0      	beq.n	8007332 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	46020c00 	.word	0x46020c00
 8007360:	80800000 	.word	0x80800000

08007364 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e0fb      	b.n	800756e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a7f      	ldr	r2, [pc, #508]	@ (8007578 <HAL_SPI_Init+0x214>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_SPI_Init+0x26>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a7d      	ldr	r2, [pc, #500]	@ (800757c <HAL_SPI_Init+0x218>)
 8007386:	4293      	cmp	r3, r2
 8007388:	e000      	b.n	800738c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800738a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a78      	ldr	r2, [pc, #480]	@ (8007578 <HAL_SPI_Init+0x214>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d004      	beq.n	80073a6 <HAL_SPI_Init+0x42>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a76      	ldr	r2, [pc, #472]	@ (800757c <HAL_SPI_Init+0x218>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d105      	bne.n	80073b2 <HAL_SPI_Init+0x4e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	d901      	bls.n	80073b2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e0dd      	b.n	800756e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fff4 	bl	80083a0 <SPI_GetPacketSize>
 80073b8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a6e      	ldr	r2, [pc, #440]	@ (8007578 <HAL_SPI_Init+0x214>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <HAL_SPI_Init+0x6a>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a6c      	ldr	r2, [pc, #432]	@ (800757c <HAL_SPI_Init+0x218>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d102      	bne.n	80073d4 <HAL_SPI_Init+0x70>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d816      	bhi.n	8007402 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073d8:	4a69      	ldr	r2, [pc, #420]	@ (8007580 <HAL_SPI_Init+0x21c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00e      	beq.n	80073fc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a68      	ldr	r2, [pc, #416]	@ (8007584 <HAL_SPI_Init+0x220>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d009      	beq.n	80073fc <HAL_SPI_Init+0x98>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a66      	ldr	r2, [pc, #408]	@ (8007588 <HAL_SPI_Init+0x224>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d004      	beq.n	80073fc <HAL_SPI_Init+0x98>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a65      	ldr	r2, [pc, #404]	@ (800758c <HAL_SPI_Init+0x228>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d104      	bne.n	8007406 <HAL_SPI_Init+0xa2>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d901      	bls.n	8007406 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e0b3      	b.n	800756e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fa f820 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0201 	bic.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007442:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800744c:	d119      	bne.n	8007482 <HAL_SPI_Init+0x11e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007456:	d103      	bne.n	8007460 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800745c:	2b00      	cmp	r3, #0
 800745e:	d008      	beq.n	8007472 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10c      	bne.n	8007482 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800746c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007470:	d107      	bne.n	8007482 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007480:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00f      	beq.n	80074ae <HAL_SPI_Init+0x14a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b06      	cmp	r3, #6
 8007494:	d90b      	bls.n	80074ae <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	e007      	b.n	80074be <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69da      	ldr	r2, [r3, #28]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	431a      	orrs	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d0:	ea42 0103 	orr.w	r1, r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752a:	ea42 0103 	orr.w	r1, r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	46002000 	.word	0x46002000
 800757c:	56002000 	.word	0x56002000
 8007580:	40013000 	.word	0x40013000
 8007584:	50013000 	.word	0x50013000
 8007588:	40003800 	.word	0x40003800
 800758c:	50003800 	.word	0x50003800

08007590 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3320      	adds	r3, #32
 80075a6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a90      	ldr	r2, [pc, #576]	@ (80077f0 <HAL_SPI_Transmit+0x260>)
 80075ae:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075b0:	f7fa fb6a 	bl	8001c88 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d001      	beq.n	80075c6 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
 80075c4:	e1f4      	b.n	80079b0 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <HAL_SPI_Transmit+0x42>
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e1ec      	b.n	80079b0 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_SPI_Transmit+0x54>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e1e5      	b.n	80079b0 <HAL_SPI_Transmit+0x420>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2203      	movs	r2, #3
 80075f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	88fa      	ldrh	r2, [r7, #6]
 8007606:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	88fa      	ldrh	r2, [r7, #6]
 800760e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800763c:	d108      	bne.n	8007650 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e009      	b.n	8007664 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007662:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	88f9      	ldrh	r1, [r7, #6]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	430b      	orrs	r3, r1
 8007676:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10c      	bne.n	80076b0 <HAL_SPI_Transmit+0x120>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800769e:	d107      	bne.n	80076b0 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	2b0f      	cmp	r3, #15
 80076b6:	d95b      	bls.n	8007770 <HAL_SPI_Transmit+0x1e0>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a4d      	ldr	r2, [pc, #308]	@ (80077f4 <HAL_SPI_Transmit+0x264>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d04f      	beq.n	8007762 <HAL_SPI_Transmit+0x1d2>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a4c      	ldr	r2, [pc, #304]	@ (80077f8 <HAL_SPI_Transmit+0x268>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d04a      	beq.n	8007762 <HAL_SPI_Transmit+0x1d2>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a4a      	ldr	r2, [pc, #296]	@ (80077fc <HAL_SPI_Transmit+0x26c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d045      	beq.n	8007762 <HAL_SPI_Transmit+0x1d2>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a49      	ldr	r2, [pc, #292]	@ (8007800 <HAL_SPI_Transmit+0x270>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d147      	bne.n	8007770 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80076e0:	e03f      	b.n	8007762 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d114      	bne.n	800771a <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007700:	1d1a      	adds	r2, r3, #4
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007718:	e023      	b.n	8007762 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800771a:	f7fa fab5 	bl	8001c88 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d803      	bhi.n	8007732 <HAL_SPI_Transmit+0x1a2>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d102      	bne.n	8007738 <HAL_SPI_Transmit+0x1a8>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d114      	bne.n	8007762 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fd63 	bl	8008204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007744:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e126      	b.n	80079b0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1b9      	bne.n	80076e2 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800776e:	e0f9      	b.n	8007964 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b07      	cmp	r3, #7
 8007776:	f240 80ee 	bls.w	8007956 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800777a:	e067      	b.n	800784c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b02      	cmp	r3, #2
 8007788:	d13c      	bne.n	8007804 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b01      	cmp	r3, #1
 8007794:	d918      	bls.n	80077c8 <HAL_SPI_Transmit+0x238>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d014      	beq.n	80077c8 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077ae:	1d1a      	adds	r2, r3, #4
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b02      	subs	r3, #2
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077c6:	e041      	b.n	800784c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077cc:	881a      	ldrh	r2, [r3, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077d6:	1c9a      	adds	r2, r3, #2
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077ee:	e02d      	b.n	800784c <HAL_SPI_Transmit+0x2bc>
 80077f0:	46002000 	.word	0x46002000
 80077f4:	40013000 	.word	0x40013000
 80077f8:	50013000 	.word	0x50013000
 80077fc:	40003800 	.word	0x40003800
 8007800:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007804:	f7fa fa40 	bl	8001c88 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d803      	bhi.n	800781c <HAL_SPI_Transmit+0x28c>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d102      	bne.n	8007822 <HAL_SPI_Transmit+0x292>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d114      	bne.n	800784c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fcee 	bl	8008204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800782e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e0b1      	b.n	80079b0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d191      	bne.n	800777c <HAL_SPI_Transmit+0x1ec>
 8007858:	e084      	b.n	8007964 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b02      	cmp	r3, #2
 8007866:	d152      	bne.n	800790e <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b03      	cmp	r3, #3
 8007872:	d918      	bls.n	80078a6 <HAL_SPI_Transmit+0x316>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007878:	2b40      	cmp	r3, #64	@ 0x40
 800787a:	d914      	bls.n	80078a6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800788c:	1d1a      	adds	r2, r3, #4
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b04      	subs	r3, #4
 800789c:	b29a      	uxth	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078a4:	e057      	b.n	8007956 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d917      	bls.n	80078e2 <HAL_SPI_Transmit+0x352>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d013      	beq.n	80078e2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078be:	881a      	ldrh	r2, [r3, #0]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b02      	subs	r3, #2
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078e0:	e039      	b.n	8007956 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3320      	adds	r3, #32
 80078ec:	7812      	ldrb	r2, [r2, #0]
 80078ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800790c:	e023      	b.n	8007956 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800790e:	f7fa f9bb 	bl	8001c88 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d803      	bhi.n	8007926 <HAL_SPI_Transmit+0x396>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d102      	bne.n	800792c <HAL_SPI_Transmit+0x39c>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d114      	bne.n	8007956 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 fc69 	bl	8008204 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007938:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e02c      	b.n	80079b0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	f47f af7b 	bne.w	800785a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2200      	movs	r2, #0
 800796c:	2108      	movs	r1, #8
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fce8 	bl	8008344 <SPI_WaitOnFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007980:	f043 0220 	orr.w	r2, r3, #32
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 fc3a 	bl	8008204 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 80079ae:	2300      	movs	r3, #0
  }
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a96      	ldr	r2, [pc, #600]	@ (8007c24 <HAL_SPI_Transmit_DMA+0x26c>)
 80079cc:	4293      	cmp	r3, r2
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d001      	beq.n	80079de <HAL_SPI_Transmit_DMA+0x26>
  {
    return HAL_BUSY;
 80079da:	2302      	movs	r3, #2
 80079dc:	e1a3      	b.n	8007d26 <HAL_SPI_Transmit_DMA+0x36e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <HAL_SPI_Transmit_DMA+0x32>
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_SPI_Transmit_DMA+0x36>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e19b      	b.n	8007d26 <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_SPI_Transmit_DMA+0x44>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e194      	b.n	8007d26 <HAL_SPI_Transmit_DMA+0x36e>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2203      	movs	r2, #3
 8007a08:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	88fa      	ldrh	r2, [r7, #6]
 8007a1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	88fa      	ldrh	r2, [r7, #6]
 8007a26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007a54:	d108      	bne.n	8007a68 <HAL_SPI_Transmit_DMA+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	e009      	b.n	8007a7c <HAL_SPI_Transmit_DMA+0xc4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007a7a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b0f      	cmp	r3, #15
 8007a82:	d919      	bls.n	8007ab8 <HAL_SPI_Transmit_DMA+0x100>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d013      	beq.n	8007ab8 <HAL_SPI_Transmit_DMA+0x100>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8007a94:	4a64      	ldr	r2, [pc, #400]	@ (8007c28 <HAL_SPI_Transmit_DMA+0x270>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d018      	beq.n	8007acc <HAL_SPI_Transmit_DMA+0x114>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a63      	ldr	r2, [pc, #396]	@ (8007c2c <HAL_SPI_Transmit_DMA+0x274>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d013      	beq.n	8007acc <HAL_SPI_Transmit_DMA+0x114>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a61      	ldr	r2, [pc, #388]	@ (8007c30 <HAL_SPI_Transmit_DMA+0x278>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00e      	beq.n	8007acc <HAL_SPI_Transmit_DMA+0x114>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a60      	ldr	r2, [pc, #384]	@ (8007c34 <HAL_SPI_Transmit_DMA+0x27c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d009      	beq.n	8007acc <HAL_SPI_Transmit_DMA+0x114>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	d90b      	bls.n	8007ad8 <HAL_SPI_Transmit_DMA+0x120>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d105      	bne.n	8007ad8 <HAL_SPI_Transmit_DMA+0x120>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e126      	b.n	8007d26 <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b07      	cmp	r3, #7
 8007ade:	d820      	bhi.n	8007b22 <HAL_SPI_Transmit_DMA+0x16a>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d109      	bne.n	8007b00 <HAL_SPI_Transmit_DMA+0x148>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3301      	adds	r3, #1
 8007af6:	105b      	asrs	r3, r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d11e      	bne.n	8007b4a <HAL_SPI_Transmit_DMA+0x192>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3303      	adds	r3, #3
 8007b16:	109b      	asrs	r3, r3, #2
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b20:	e013      	b.n	8007b4a <HAL_SPI_Transmit_DMA+0x192>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	2b0f      	cmp	r3, #15
 8007b28:	d80f      	bhi.n	8007b4a <HAL_SPI_Transmit_DMA+0x192>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d109      	bne.n	8007b4a <HAL_SPI_Transmit_DMA+0x192>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3301      	adds	r3, #1
 8007b40:	105b      	asrs	r3, r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b50:	4a39      	ldr	r2, [pc, #228]	@ (8007c38 <HAL_SPI_Transmit_DMA+0x280>)
 8007b52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b5a:	4a38      	ldr	r2, [pc, #224]	@ (8007c3c <HAL_SPI_Transmit_DMA+0x284>)
 8007b5c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b64:	4a36      	ldr	r2, [pc, #216]	@ (8007c40 <HAL_SPI_Transmit_DMA+0x288>)
 8007b66:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b6e:	2200      	movs	r2, #0
 8007b70:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b80:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	2b07      	cmp	r3, #7
 8007b88:	d804      	bhi.n	8007b94 <HAL_SPI_Transmit_DMA+0x1dc>
  {
    hspi->TxXferCount = Size;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	88fa      	ldrh	r2, [r7, #6]
 8007b8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b92:	e010      	b.n	8007bb6 <HAL_SPI_Transmit_DMA+0x1fe>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b0f      	cmp	r3, #15
 8007b9a:	d806      	bhi.n	8007baa <HAL_SPI_Transmit_DMA+0x1f2>
  {
    hspi->TxXferCount = Size * 2U;
 8007b9c:	88fb      	ldrh	r3, [r7, #6]
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ba8:	e005      	b.n	8007bb6 <HAL_SPI_Transmit_DMA+0x1fe>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d03e      	beq.n	8007c44 <HAL_SPI_Transmit_DMA+0x28c>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d024      	beq.n	8007c1c <HAL_SPI_Transmit_DMA+0x264>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f103 0220 	add.w	r2, r3, #32
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fa ffbb 	bl	8002b8c <HAL_DMAEx_List_Start_IT>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
 8007c1a:	e025      	b.n	8007c68 <HAL_SPI_Transmit_DMA+0x2b0>
    }
    else
    {
      status = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
 8007c20:	e022      	b.n	8007c68 <HAL_SPI_Transmit_DMA+0x2b0>
 8007c22:	bf00      	nop
 8007c24:	46002000 	.word	0x46002000
 8007c28:	40013000 	.word	0x40013000
 8007c2c:	50013000 	.word	0x50013000
 8007c30:	40003800 	.word	0x40003800
 8007c34:	50003800 	.word	0x50003800
 8007c38:	0800816f 	.word	0x0800816f
 8007c3c:	08008129 	.word	0x08008129
 8007c40:	0800818b 	.word	0x0800818b
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c4e:	4619      	mov	r1, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3320      	adds	r3, #32
 8007c56:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c5e:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007c60:	f7fa fabc 	bl	80021dc <HAL_DMA_Start_IT>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d011      	beq.n	8007c92 <HAL_SPI_Transmit_DMA+0x2da>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c74:	f043 0210 	orr.w	r2, r3, #16
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e049      	b.n	8007d26 <HAL_SPI_Transmit_DMA+0x36e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9a:	2b81      	cmp	r3, #129	@ 0x81
 8007c9c:	d108      	bne.n	8007cb0 <HAL_SPI_Transmit_DMA+0x2f8>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	6812      	ldr	r2, [r2, #0]
 8007ca8:	0c1b      	lsrs	r3, r3, #16
 8007caa:	041b      	lsls	r3, r3, #16
 8007cac:	6053      	str	r3, [r2, #4]
 8007cae:	e009      	b.n	8007cc4 <HAL_SPI_Transmit_DMA+0x30c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	0c1b      	lsrs	r3, r3, #16
 8007cb8:	041b      	lsls	r3, r3, #16
 8007cba:	88f9      	ldrh	r1, [r7, #6]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	6812      	ldr	r2, [r2, #0]
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cd2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8007ce2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0201 	orr.w	r2, r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10c      	bne.n	8007d1c <HAL_SPI_Transmit_DMA+0x364>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d0a:	d107      	bne.n	8007d1c <HAL_SPI_Transmit_DMA+0x364>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d1a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop

08007d30 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08a      	sub	sp, #40	@ 0x28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007d48:	6a3a      	ldr	r2, [r7, #32]
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d62:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3330      	adds	r3, #48	@ 0x30
 8007d6a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d010      	beq.n	8007d98 <HAL_SPI_IRQHandler+0x68>
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	f003 0308 	and.w	r3, r3, #8
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d8e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f9bf 	bl	8008114 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007d96:	e19a      	b.n	80080ce <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d113      	bne.n	8007dca <HAL_SPI_IRQHandler+0x9a>
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10e      	bne.n	8007dca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
    handled = 1UL;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10f      	bne.n	8007df4 <HAL_SPI_IRQHandler+0xc4>
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d105      	bne.n	8007df4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4798      	blx	r3
    handled = 1UL;
 8007df0:	2301      	movs	r3, #1
 8007df2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10f      	bne.n	8007e1e <HAL_SPI_IRQHandler+0xee>
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00a      	beq.n	8007e1e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d105      	bne.n	8007e1e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
    handled = 1UL;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 814f 	bne.w	80080c4 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 808b 	beq.w	8007f48 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	699a      	ldr	r2, [r3, #24]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0208 	orr.w	r2, r2, #8
 8007e40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0210 	orr.w	r2, r2, #16
 8007e50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e60:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0208 	bic.w	r2, r2, #8
 8007e70:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d13d      	bne.n	8007efc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007e80:	e036      	b.n	8007ef0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d90b      	bls.n	8007ea2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e94:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e9a:	1d1a      	adds	r2, r3, #4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007ea0:	e01d      	b.n	8007ede <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b07      	cmp	r3, #7
 8007ea8:	d90b      	bls.n	8007ec2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	8812      	ldrh	r2, [r2, #0]
 8007eb2:	b292      	uxth	r2, r2
 8007eb4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eba:	1c9a      	adds	r2, r3, #2
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007ec0:	e00d      	b.n	8007ede <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ece:	7812      	ldrb	r2, [r2, #0]
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1c2      	bne.n	8007e82 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f981 	bl	8008204 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7f9 f815 	bl	8000f44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f1a:	e0d8      	b.n	80080ce <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007f1c:	7cfb      	ldrb	r3, [r7, #19]
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	d103      	bne.n	8007f2a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f8e2 	bl	80080ec <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007f28:	e0ce      	b.n	80080c8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007f2a:	7cfb      	ldrb	r3, [r7, #19]
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d103      	bne.n	8007f38 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f8d1 	bl	80080d8 <HAL_SPI_RxCpltCallback>
    return;
 8007f36:	e0c7      	b.n	80080c8 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007f38:	7cfb      	ldrb	r3, [r7, #19]
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	f040 80c4 	bne.w	80080c8 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7f8 ffe9 	bl	8000f18 <HAL_SPI_TxCpltCallback>
    return;
 8007f46:	e0bf      	b.n	80080c8 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 80bd 	beq.w	80080ce <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00f      	beq.n	8007f7e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f64:	f043 0204 	orr.w	r2, r3, #4
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00f      	beq.n	8007fa8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f8e:	f043 0201 	orr.w	r2, r3, #1
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fa6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00f      	beq.n	8007fd2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fb8:	f043 0208 	orr.w	r2, r3, #8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	699a      	ldr	r2, [r3, #24]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00f      	beq.n	8007ffc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fe2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0220 	orr.w	r2, r2, #32
 8007ffa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d062      	beq.n	80080cc <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008030:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008034:	d13e      	bne.n	80080b4 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008044:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800804c:	2b00      	cmp	r3, #0
 800804e:	d015      	beq.n	800807c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008056:	4a1f      	ldr	r2, [pc, #124]	@ (80080d4 <HAL_SPI_IRQHandler+0x3a4>)
 8008058:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008060:	4618      	mov	r0, r3
 8008062:	f7fa f91b 	bl	800229c <HAL_DMA_Abort_IT>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d007      	beq.n	800807c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008072:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008082:	2b00      	cmp	r3, #0
 8008084:	d022      	beq.n	80080cc <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800808c:	4a11      	ldr	r2, [pc, #68]	@ (80080d4 <HAL_SPI_IRQHandler+0x3a4>)
 800808e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008096:	4618      	mov	r0, r3
 8008098:	f7fa f900 	bl	800229c <HAL_DMA_Abort_IT>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d014      	beq.n	80080cc <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80080b2:	e00b      	b.n	80080cc <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7f8 ff41 	bl	8000f44 <HAL_SPI_ErrorCallback>
    return;
 80080c2:	e003      	b.n	80080cc <HAL_SPI_IRQHandler+0x39c>
    return;
 80080c4:	bf00      	nop
 80080c6:	e002      	b.n	80080ce <HAL_SPI_IRQHandler+0x39e>
    return;
 80080c8:	bf00      	nop
 80080ca:	e000      	b.n	80080ce <HAL_SPI_IRQHandler+0x39e>
    return;
 80080cc:	bf00      	nop
  }
}
 80080ce:	3728      	adds	r7, #40	@ 0x28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	080081d1 	.word	0x080081d1

080080d8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008134:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b07      	cmp	r3, #7
 8008140:	d011      	beq.n	8008166 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800814a:	2b81      	cmp	r3, #129	@ 0x81
 800814c:	d103      	bne.n	8008156 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7f8 fee2 	bl	8000f18 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008154:	e007      	b.n	8008166 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f042 0208 	orr.w	r2, r2, #8
 8008164:	611a      	str	r2, [r3, #16]
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800817a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff ffbf 	bl	8008100 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008196:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7fa fa09 	bl	80025b0 <HAL_DMA_GetError>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d011      	beq.n	80081c8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f82d 	bl	8008204 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081b0:	f043 0210 	orr.w	r2, r3, #16
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7f8 febe 	bl	8000f44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f7f8 fea4 	bl	8000f44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081fc:	bf00      	nop
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699a      	ldr	r2, [r3, #24]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0208 	orr.w	r2, r2, #8
 8008222:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	699a      	ldr	r2, [r3, #24]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f042 0210 	orr.w	r2, r2, #16
 8008232:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0201 	bic.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008252:	f023 0303 	bic.w	r3, r3, #3
 8008256:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008266:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b04      	cmp	r3, #4
 8008272:	d014      	beq.n	800829e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00f      	beq.n	800829e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008284:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	699a      	ldr	r2, [r3, #24]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0220 	orr.w	r2, r2, #32
 800829c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d014      	beq.n	80082d4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00f      	beq.n	80082d4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ba:	f043 0204 	orr.w	r2, r3, #4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00f      	beq.n	80082fe <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082e4:	f043 0201 	orr.w	r2, r3, #1
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00f      	beq.n	8008328 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800830e:	f043 0208 	orr.w	r2, r3, #8
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699a      	ldr	r2, [r3, #24]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008326:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	4613      	mov	r3, r2
 8008352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008354:	e010      	b.n	8008378 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008356:	f7f9 fc97 	bl	8001c88 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d803      	bhi.n	800836e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836c:	d102      	bne.n	8008374 <SPI_WaitOnFlagUntilTimeout+0x30>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e00f      	b.n	8008398 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695a      	ldr	r2, [r3, #20]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4013      	ands	r3, r2
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	429a      	cmp	r2, r3
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	429a      	cmp	r2, r3
 8008394:	d0df      	beq.n	8008356 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	3307      	adds	r3, #7
 80083be:	08db      	lsrs	r3, r3, #3
 80083c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d12e      	bne.n	800844a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e028      	b.n	800844c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008426:	ea42 0103 	orr.w	r1, r2, r3
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	e000      	b.n	800844c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
  }
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e049      	b.n	80084fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f841 	bl	8008506 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3304      	adds	r3, #4
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f000 fa58 	bl	800894c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
	...

0800851c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b01      	cmp	r3, #1
 800852e:	d001      	beq.n	8008534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e072      	b.n	800861a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68da      	ldr	r2, [r3, #12]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0201 	orr.w	r2, r2, #1
 800854a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a35      	ldr	r2, [pc, #212]	@ (8008628 <HAL_TIM_Base_Start_IT+0x10c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d040      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a34      	ldr	r2, [pc, #208]	@ (800862c <HAL_TIM_Base_Start_IT+0x110>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d03b      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008568:	d036      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008572:	d031      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a2d      	ldr	r2, [pc, #180]	@ (8008630 <HAL_TIM_Base_Start_IT+0x114>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d02c      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a2c      	ldr	r2, [pc, #176]	@ (8008634 <HAL_TIM_Base_Start_IT+0x118>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d027      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a2a      	ldr	r2, [pc, #168]	@ (8008638 <HAL_TIM_Base_Start_IT+0x11c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d022      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a29      	ldr	r2, [pc, #164]	@ (800863c <HAL_TIM_Base_Start_IT+0x120>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d01d      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a27      	ldr	r2, [pc, #156]	@ (8008640 <HAL_TIM_Base_Start_IT+0x124>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d018      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a26      	ldr	r2, [pc, #152]	@ (8008644 <HAL_TIM_Base_Start_IT+0x128>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d013      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a24      	ldr	r2, [pc, #144]	@ (8008648 <HAL_TIM_Base_Start_IT+0x12c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d00e      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a23      	ldr	r2, [pc, #140]	@ (800864c <HAL_TIM_Base_Start_IT+0x130>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d009      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a21      	ldr	r2, [pc, #132]	@ (8008650 <HAL_TIM_Base_Start_IT+0x134>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_TIM_Base_Start_IT+0xbc>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a20      	ldr	r2, [pc, #128]	@ (8008654 <HAL_TIM_Base_Start_IT+0x138>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d115      	bne.n	8008604 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689a      	ldr	r2, [r3, #8]
 80085de:	4b1e      	ldr	r3, [pc, #120]	@ (8008658 <HAL_TIM_Base_Start_IT+0x13c>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b06      	cmp	r3, #6
 80085e8:	d015      	beq.n	8008616 <HAL_TIM_Base_Start_IT+0xfa>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f0:	d011      	beq.n	8008616 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0201 	orr.w	r2, r2, #1
 8008600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008602:	e008      	b.n	8008616 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0201 	orr.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	e000      	b.n	8008618 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008616:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40012c00 	.word	0x40012c00
 800862c:	50012c00 	.word	0x50012c00
 8008630:	40000400 	.word	0x40000400
 8008634:	50000400 	.word	0x50000400
 8008638:	40000800 	.word	0x40000800
 800863c:	50000800 	.word	0x50000800
 8008640:	40000c00 	.word	0x40000c00
 8008644:	50000c00 	.word	0x50000c00
 8008648:	40013400 	.word	0x40013400
 800864c:	50013400 	.word	0x50013400
 8008650:	40014000 	.word	0x40014000
 8008654:	50014000 	.word	0x50014000
 8008658:	00010007 	.word	0x00010007

0800865c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d020      	beq.n	80086c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f003 0302 	and.w	r3, r3, #2
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01b      	beq.n	80086c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f06f 0202 	mvn.w	r2, #2
 8008690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f931 	bl	800890e <HAL_TIM_IC_CaptureCallback>
 80086ac:	e005      	b.n	80086ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f923 	bl	80088fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f934 	bl	8008922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d020      	beq.n	800870c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01b      	beq.n	800870c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0204 	mvn.w	r2, #4
 80086dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2202      	movs	r2, #2
 80086e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f90b 	bl	800890e <HAL_TIM_IC_CaptureCallback>
 80086f8:	e005      	b.n	8008706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8fd 	bl	80088fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f90e 	bl	8008922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d020      	beq.n	8008758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01b      	beq.n	8008758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0208 	mvn.w	r2, #8
 8008728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2204      	movs	r2, #4
 800872e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f8e5 	bl	800890e <HAL_TIM_IC_CaptureCallback>
 8008744:	e005      	b.n	8008752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8d7 	bl	80088fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f8e8 	bl	8008922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f003 0310 	and.w	r3, r3, #16
 800875e:	2b00      	cmp	r3, #0
 8008760:	d020      	beq.n	80087a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f003 0310 	and.w	r3, r3, #16
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01b      	beq.n	80087a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f06f 0210 	mvn.w	r2, #16
 8008774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2208      	movs	r2, #8
 800877a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f8bf 	bl	800890e <HAL_TIM_IC_CaptureCallback>
 8008790:	e005      	b.n	800879e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f8b1 	bl	80088fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f8c2 	bl	8008922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f06f 0201 	mvn.w	r2, #1
 80087c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7f8 fe18 	bl	80013f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d104      	bne.n	80087dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00c      	beq.n	80087f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80087ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f9b5 	bl	8008b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00c      	beq.n	800881a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008806:	2b00      	cmp	r3, #0
 8008808:	d007      	beq.n	800881a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f9ad 	bl	8008b74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00c      	beq.n	800883e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f87c 	bl	8008936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f003 0320 	and.w	r3, r3, #32
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00c      	beq.n	8008862 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f06f 0220 	mvn.w	r2, #32
 800885a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f975 	bl	8008b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00c      	beq.n	8008886 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d007      	beq.n	8008886 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800887e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f981 	bl	8008b88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00c      	beq.n	80088aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80088a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f979 	bl	8008b9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00c      	beq.n	80088ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80088c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f971 	bl	8008bb0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00c      	beq.n	80088f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d007      	beq.n	80088f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80088ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f969 	bl	8008bc4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
	...

0800894c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a6b      	ldr	r2, [pc, #428]	@ (8008b0c <TIM_Base_SetConfig+0x1c0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d02b      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a6a      	ldr	r2, [pc, #424]	@ (8008b10 <TIM_Base_SetConfig+0x1c4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d027      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008972:	d023      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800897a:	d01f      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a65      	ldr	r2, [pc, #404]	@ (8008b14 <TIM_Base_SetConfig+0x1c8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d01b      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a64      	ldr	r2, [pc, #400]	@ (8008b18 <TIM_Base_SetConfig+0x1cc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d017      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a63      	ldr	r2, [pc, #396]	@ (8008b1c <TIM_Base_SetConfig+0x1d0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d013      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a62      	ldr	r2, [pc, #392]	@ (8008b20 <TIM_Base_SetConfig+0x1d4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00f      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a61      	ldr	r2, [pc, #388]	@ (8008b24 <TIM_Base_SetConfig+0x1d8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00b      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a60      	ldr	r2, [pc, #384]	@ (8008b28 <TIM_Base_SetConfig+0x1dc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d007      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a5f      	ldr	r2, [pc, #380]	@ (8008b2c <TIM_Base_SetConfig+0x1e0>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d003      	beq.n	80089bc <TIM_Base_SetConfig+0x70>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a5e      	ldr	r2, [pc, #376]	@ (8008b30 <TIM_Base_SetConfig+0x1e4>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d108      	bne.n	80089ce <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a4e      	ldr	r2, [pc, #312]	@ (8008b0c <TIM_Base_SetConfig+0x1c0>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d043      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a4d      	ldr	r2, [pc, #308]	@ (8008b10 <TIM_Base_SetConfig+0x1c4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d03f      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089e4:	d03b      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089ec:	d037      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a48      	ldr	r2, [pc, #288]	@ (8008b14 <TIM_Base_SetConfig+0x1c8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d033      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a47      	ldr	r2, [pc, #284]	@ (8008b18 <TIM_Base_SetConfig+0x1cc>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d02f      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a46      	ldr	r2, [pc, #280]	@ (8008b1c <TIM_Base_SetConfig+0x1d0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d02b      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a45      	ldr	r2, [pc, #276]	@ (8008b20 <TIM_Base_SetConfig+0x1d4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d027      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a44      	ldr	r2, [pc, #272]	@ (8008b24 <TIM_Base_SetConfig+0x1d8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d023      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a43      	ldr	r2, [pc, #268]	@ (8008b28 <TIM_Base_SetConfig+0x1dc>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d01f      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a42      	ldr	r2, [pc, #264]	@ (8008b2c <TIM_Base_SetConfig+0x1e0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d01b      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a41      	ldr	r2, [pc, #260]	@ (8008b30 <TIM_Base_SetConfig+0x1e4>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d017      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a40      	ldr	r2, [pc, #256]	@ (8008b34 <TIM_Base_SetConfig+0x1e8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d013      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a3f      	ldr	r2, [pc, #252]	@ (8008b38 <TIM_Base_SetConfig+0x1ec>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00f      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a3e      	ldr	r2, [pc, #248]	@ (8008b3c <TIM_Base_SetConfig+0x1f0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00b      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a3d      	ldr	r2, [pc, #244]	@ (8008b40 <TIM_Base_SetConfig+0x1f4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d007      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a3c      	ldr	r2, [pc, #240]	@ (8008b44 <TIM_Base_SetConfig+0x1f8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d003      	beq.n	8008a5e <TIM_Base_SetConfig+0x112>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a3b      	ldr	r2, [pc, #236]	@ (8008b48 <TIM_Base_SetConfig+0x1fc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d108      	bne.n	8008a70 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a1e      	ldr	r2, [pc, #120]	@ (8008b0c <TIM_Base_SetConfig+0x1c0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d023      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a1d      	ldr	r2, [pc, #116]	@ (8008b10 <TIM_Base_SetConfig+0x1c4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d01f      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a22      	ldr	r2, [pc, #136]	@ (8008b2c <TIM_Base_SetConfig+0x1e0>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d01b      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a21      	ldr	r2, [pc, #132]	@ (8008b30 <TIM_Base_SetConfig+0x1e4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d017      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a20      	ldr	r2, [pc, #128]	@ (8008b34 <TIM_Base_SetConfig+0x1e8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d013      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8008b38 <TIM_Base_SetConfig+0x1ec>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00f      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8008b3c <TIM_Base_SetConfig+0x1f0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00b      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b40 <TIM_Base_SetConfig+0x1f4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d007      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8008b44 <TIM_Base_SetConfig+0x1f8>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d003      	beq.n	8008ade <TIM_Base_SetConfig+0x192>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8008b48 <TIM_Base_SetConfig+0x1fc>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d103      	bne.n	8008ae6 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	691a      	ldr	r2, [r3, #16]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f043 0204 	orr.w	r2, r3, #4
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	601a      	str	r2, [r3, #0]
}
 8008afe:	bf00      	nop
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	40012c00 	.word	0x40012c00
 8008b10:	50012c00 	.word	0x50012c00
 8008b14:	40000400 	.word	0x40000400
 8008b18:	50000400 	.word	0x50000400
 8008b1c:	40000800 	.word	0x40000800
 8008b20:	50000800 	.word	0x50000800
 8008b24:	40000c00 	.word	0x40000c00
 8008b28:	50000c00 	.word	0x50000c00
 8008b2c:	40013400 	.word	0x40013400
 8008b30:	50013400 	.word	0x50013400
 8008b34:	40014000 	.word	0x40014000
 8008b38:	50014000 	.word	0x50014000
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	50014400 	.word	0x50014400
 8008b44:	40014800 	.word	0x40014800
 8008b48:	50014800 	.word	0x50014800

08008b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e042      	b.n	8008c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f83b 	bl	8008c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2224      	movs	r2, #36	@ 0x24
 8008c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 0201 	bic.w	r2, r2, #1
 8008c18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f9d4 	bl	8008fd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f82f 	bl	8008c8c <UART_SetConfig>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e01b      	b.n	8008c70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fa53 	bl	8009114 <UART_CheckIdleState>
 8008c6e:	4603      	mov	r3, r0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c90:	b094      	sub	sp, #80	@ 0x50
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8008e9c <UART_SetConfig+0x210>)
 8008ca2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4977      	ldr	r1, [pc, #476]	@ (8008ea0 <UART_SetConfig+0x214>)
 8008cc4:	4019      	ands	r1, r3
 8008cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cdc:	68d9      	ldr	r1, [r3, #12]
 8008cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	ea40 0301 	orr.w	r3, r0, r1
 8008ce6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8008e9c <UART_SetConfig+0x210>)
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d009      	beq.n	8008d0c <UART_SetConfig+0x80>
 8008cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	4b69      	ldr	r3, [pc, #420]	@ (8008ea4 <UART_SetConfig+0x218>)
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d004      	beq.n	8008d0c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008d16:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d20:	430b      	orrs	r3, r1
 8008d22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2a:	f023 000f 	bic.w	r0, r3, #15
 8008d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	ea40 0301 	orr.w	r3, r0, r1
 8008d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	4b59      	ldr	r3, [pc, #356]	@ (8008ea8 <UART_SetConfig+0x21c>)
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d102      	bne.n	8008d4c <UART_SetConfig+0xc0>
 8008d46:	2301      	movs	r3, #1
 8008d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d4a:	e029      	b.n	8008da0 <UART_SetConfig+0x114>
 8008d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	4b56      	ldr	r3, [pc, #344]	@ (8008eac <UART_SetConfig+0x220>)
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d102      	bne.n	8008d5c <UART_SetConfig+0xd0>
 8008d56:	2302      	movs	r3, #2
 8008d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d5a:	e021      	b.n	8008da0 <UART_SetConfig+0x114>
 8008d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4b53      	ldr	r3, [pc, #332]	@ (8008eb0 <UART_SetConfig+0x224>)
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d102      	bne.n	8008d6c <UART_SetConfig+0xe0>
 8008d66:	2304      	movs	r3, #4
 8008d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d6a:	e019      	b.n	8008da0 <UART_SetConfig+0x114>
 8008d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	4b50      	ldr	r3, [pc, #320]	@ (8008eb4 <UART_SetConfig+0x228>)
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d102      	bne.n	8008d7c <UART_SetConfig+0xf0>
 8008d76:	2308      	movs	r3, #8
 8008d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d7a:	e011      	b.n	8008da0 <UART_SetConfig+0x114>
 8008d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	4b4d      	ldr	r3, [pc, #308]	@ (8008eb8 <UART_SetConfig+0x22c>)
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d102      	bne.n	8008d8c <UART_SetConfig+0x100>
 8008d86:	2310      	movs	r3, #16
 8008d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d8a:	e009      	b.n	8008da0 <UART_SetConfig+0x114>
 8008d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	4b42      	ldr	r3, [pc, #264]	@ (8008e9c <UART_SetConfig+0x210>)
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d102      	bne.n	8008d9c <UART_SetConfig+0x110>
 8008d96:	2320      	movs	r3, #32
 8008d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d9a:	e001      	b.n	8008da0 <UART_SetConfig+0x114>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	4b3d      	ldr	r3, [pc, #244]	@ (8008e9c <UART_SetConfig+0x210>)
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d005      	beq.n	8008db6 <UART_SetConfig+0x12a>
 8008daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4b3d      	ldr	r3, [pc, #244]	@ (8008ea4 <UART_SetConfig+0x218>)
 8008db0:	429a      	cmp	r2, r3
 8008db2:	f040 8085 	bne.w	8008ec0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008db8:	2200      	movs	r2, #0
 8008dba:	623b      	str	r3, [r7, #32]
 8008dbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008dc2:	f7fc ffe9 	bl	8005d98 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dc6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 80e8 	beq.w	8008fa0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd4:	4a39      	ldr	r2, [pc, #228]	@ (8008ebc <UART_SetConfig+0x230>)
 8008dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	4613      	mov	r3, r2
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	4413      	add	r3, r2
 8008dee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d305      	bcc.n	8008e00 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d903      	bls.n	8008e08 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008e06:	e048      	b.n	8008e9a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	61bb      	str	r3, [r7, #24]
 8008e0e:	61fa      	str	r2, [r7, #28]
 8008e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	4a29      	ldr	r2, [pc, #164]	@ (8008ebc <UART_SetConfig+0x230>)
 8008e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	617a      	str	r2, [r7, #20]
 8008e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008e2a:	f7f7 fa25 	bl	8000278 <__aeabi_uldivmod>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	f04f 0200 	mov.w	r2, #0
 8008e3a:	f04f 0300 	mov.w	r3, #0
 8008e3e:	020b      	lsls	r3, r1, #8
 8008e40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e44:	0202      	lsls	r2, r0, #8
 8008e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e48:	6849      	ldr	r1, [r1, #4]
 8008e4a:	0849      	lsrs	r1, r1, #1
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	4605      	mov	r5, r0
 8008e52:	eb12 0804 	adds.w	r8, r2, r4
 8008e56:	eb43 0905 	adc.w	r9, r3, r5
 8008e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	60bb      	str	r3, [r7, #8]
 8008e62:	60fa      	str	r2, [r7, #12]
 8008e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 fa04 	bl	8000278 <__aeabi_uldivmod>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4613      	mov	r3, r2
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e7e:	d308      	bcc.n	8008e92 <UART_SetConfig+0x206>
 8008e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e86:	d204      	bcs.n	8008e92 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e8e:	60da      	str	r2, [r3, #12]
 8008e90:	e003      	b.n	8008e9a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008e98:	e082      	b.n	8008fa0 <UART_SetConfig+0x314>
 8008e9a:	e081      	b.n	8008fa0 <UART_SetConfig+0x314>
 8008e9c:	46002400 	.word	0x46002400
 8008ea0:	cfff69f3 	.word	0xcfff69f3
 8008ea4:	56002400 	.word	0x56002400
 8008ea8:	40013800 	.word	0x40013800
 8008eac:	40004400 	.word	0x40004400
 8008eb0:	40004800 	.word	0x40004800
 8008eb4:	40004c00 	.word	0x40004c00
 8008eb8:	40005000 	.word	0x40005000
 8008ebc:	08009794 	.word	0x08009794
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec8:	d13c      	bne.n	8008f44 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ecc:	2200      	movs	r2, #0
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	607a      	str	r2, [r7, #4]
 8008ed2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ed6:	f7fc ff5f 	bl	8005d98 <HAL_RCCEx_GetPeriphCLKFreq>
 8008eda:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d05e      	beq.n	8008fa0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee6:	4a39      	ldr	r2, [pc, #228]	@ (8008fcc <UART_SetConfig+0x340>)
 8008ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eec:	461a      	mov	r2, r3
 8008eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ef4:	005a      	lsls	r2, r3, #1
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	085b      	lsrs	r3, r3, #1
 8008efc:	441a      	add	r2, r3
 8008efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f0a:	2b0f      	cmp	r3, #15
 8008f0c:	d916      	bls.n	8008f3c <UART_SetConfig+0x2b0>
 8008f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f14:	d212      	bcs.n	8008f3c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	f023 030f 	bic.w	r3, r3, #15
 8008f1e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f22:	085b      	lsrs	r3, r3, #1
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	e031      	b.n	8008fa0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f42:	e02d      	b.n	8008fa0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f46:	2200      	movs	r2, #0
 8008f48:	469a      	mov	sl, r3
 8008f4a:	4693      	mov	fp, r2
 8008f4c:	4650      	mov	r0, sl
 8008f4e:	4659      	mov	r1, fp
 8008f50:	f7fc ff22 	bl	8005d98 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f54:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d021      	beq.n	8008fa0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	4a1a      	ldr	r2, [pc, #104]	@ (8008fcc <UART_SetConfig+0x340>)
 8008f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f66:	461a      	mov	r2, r3
 8008f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	085b      	lsrs	r3, r3, #1
 8008f74:	441a      	add	r2, r3
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f82:	2b0f      	cmp	r3, #15
 8008f84:	d909      	bls.n	8008f9a <UART_SetConfig+0x30e>
 8008f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f8c:	d205      	bcs.n	8008f9a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60da      	str	r2, [r3, #12]
 8008f98:	e002      	b.n	8008fa0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008faa:	2201      	movs	r2, #1
 8008fac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb8:	2200      	movs	r2, #0
 8008fba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008fbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3750      	adds	r7, #80	@ 0x50
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fca:	bf00      	nop
 8008fcc:	08009794 	.word	0x08009794

08008fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fdc:	f003 0308 	and.w	r3, r3, #8
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009086:	f003 0320 	and.w	r3, r3, #32
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00a      	beq.n	80090a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01a      	beq.n	80090e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090ce:	d10a      	bne.n	80090e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	605a      	str	r2, [r3, #4]
  }
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b098      	sub	sp, #96	@ 0x60
 8009118:	af02      	add	r7, sp, #8
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009124:	f7f8 fdb0 	bl	8001c88 <HAL_GetTick>
 8009128:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0308 	and.w	r3, r3, #8
 8009134:	2b08      	cmp	r3, #8
 8009136:	d12f      	bne.n	8009198 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009138:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009140:	2200      	movs	r2, #0
 8009142:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f88e 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d022      	beq.n	8009198 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009166:	653b      	str	r3, [r7, #80]	@ 0x50
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009170:	647b      	str	r3, [r7, #68]	@ 0x44
 8009172:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800917e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e6      	bne.n	8009152 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2220      	movs	r2, #32
 8009188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e063      	b.n	8009260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d149      	bne.n	800923a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ae:	2200      	movs	r2, #0
 80091b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f857 	bl	8009268 <UART_WaitOnFlagUntilTimeout>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d03c      	beq.n	800923a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	623b      	str	r3, [r7, #32]
   return(result);
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091de:	633b      	str	r3, [r7, #48]	@ 0x30
 80091e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e6      	bne.n	80091c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	60fb      	str	r3, [r7, #12]
   return(result);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f023 0301 	bic.w	r3, r3, #1
 8009208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3308      	adds	r3, #8
 8009210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009212:	61fa      	str	r2, [r7, #28]
 8009214:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	69b9      	ldr	r1, [r7, #24]
 8009218:	69fa      	ldr	r2, [r7, #28]
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	617b      	str	r3, [r7, #20]
   return(result);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e5      	bne.n	80091f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2220      	movs	r2, #32
 800922a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e012      	b.n	8009260 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3758      	adds	r7, #88	@ 0x58
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	4613      	mov	r3, r2
 8009276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009278:	e04f      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d04b      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009282:	f7f8 fd01 	bl	8001c88 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	429a      	cmp	r2, r3
 8009290:	d302      	bcc.n	8009298 <UART_WaitOnFlagUntilTimeout+0x30>
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e04e      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0304 	and.w	r3, r3, #4
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d037      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b80      	cmp	r3, #128	@ 0x80
 80092ae:	d034      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b40      	cmp	r3, #64	@ 0x40
 80092b4:	d031      	beq.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b08      	cmp	r3, #8
 80092c2:	d110      	bne.n	80092e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2208      	movs	r2, #8
 80092ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 f838 	bl	8009342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2208      	movs	r2, #8
 80092d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e029      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092f4:	d111      	bne.n	800931a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f81e 	bl	8009342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e00f      	b.n	800933a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	4013      	ands	r3, r2
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	429a      	cmp	r2, r3
 8009328:	bf0c      	ite	eq
 800932a:	2301      	moveq	r3, #1
 800932c:	2300      	movne	r3, #0
 800932e:	b2db      	uxtb	r3, r3
 8009330:	461a      	mov	r2, r3
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	429a      	cmp	r2, r3
 8009336:	d0a0      	beq.n	800927a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009342:	b480      	push	{r7}
 8009344:	b095      	sub	sp, #84	@ 0x54
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800935e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009368:	643b      	str	r3, [r7, #64]	@ 0x40
 800936a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800936e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e6      	bne.n	800934a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	61fb      	str	r3, [r7, #28]
   return(result);
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009392:	f023 0301 	bic.w	r3, r3, #1
 8009396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e3      	bne.n	800937c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d118      	bne.n	80093ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f023 0310 	bic.w	r3, r3, #16
 80093d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093da:	61bb      	str	r3, [r7, #24]
 80093dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093de:	6979      	ldr	r1, [r7, #20]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	e841 2300 	strex	r3, r2, [r1]
 80093e6:	613b      	str	r3, [r7, #16]
   return(result);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e6      	bne.n	80093bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2220      	movs	r2, #32
 80093f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009402:	bf00      	nop
 8009404:	3754      	adds	r7, #84	@ 0x54
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <memset>:
 800940e:	4402      	add	r2, r0
 8009410:	4603      	mov	r3, r0
 8009412:	4293      	cmp	r3, r2
 8009414:	d100      	bne.n	8009418 <memset+0xa>
 8009416:	4770      	bx	lr
 8009418:	f803 1b01 	strb.w	r1, [r3], #1
 800941c:	e7f9      	b.n	8009412 <memset+0x4>
	...

08009420 <__libc_init_array>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	4d0d      	ldr	r5, [pc, #52]	@ (8009458 <__libc_init_array+0x38>)
 8009424:	2600      	movs	r6, #0
 8009426:	4c0d      	ldr	r4, [pc, #52]	@ (800945c <__libc_init_array+0x3c>)
 8009428:	1b64      	subs	r4, r4, r5
 800942a:	10a4      	asrs	r4, r4, #2
 800942c:	42a6      	cmp	r6, r4
 800942e:	d109      	bne.n	8009444 <__libc_init_array+0x24>
 8009430:	4d0b      	ldr	r5, [pc, #44]	@ (8009460 <__libc_init_array+0x40>)
 8009432:	2600      	movs	r6, #0
 8009434:	4c0b      	ldr	r4, [pc, #44]	@ (8009464 <__libc_init_array+0x44>)
 8009436:	f000 f817 	bl	8009468 <_init>
 800943a:	1b64      	subs	r4, r4, r5
 800943c:	10a4      	asrs	r4, r4, #2
 800943e:	42a6      	cmp	r6, r4
 8009440:	d105      	bne.n	800944e <__libc_init_array+0x2e>
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	f855 3b04 	ldr.w	r3, [r5], #4
 8009448:	3601      	adds	r6, #1
 800944a:	4798      	blx	r3
 800944c:	e7ee      	b.n	800942c <__libc_init_array+0xc>
 800944e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009452:	3601      	adds	r6, #1
 8009454:	4798      	blx	r3
 8009456:	e7f2      	b.n	800943e <__libc_init_array+0x1e>
 8009458:	080097b4 	.word	0x080097b4
 800945c:	080097b4 	.word	0x080097b4
 8009460:	080097b4 	.word	0x080097b4
 8009464:	080097b8 	.word	0x080097b8

08009468 <_init>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	bf00      	nop
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr

08009474 <_fini>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr
